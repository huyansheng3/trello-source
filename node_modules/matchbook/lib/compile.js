"use strict";

var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

var all = require("./all");
var PredicatePattern = require("./predicate-pattern");

var zipSameLength = function (list1, list2) {
  var result = [];
  for (var i = 0; i < list1.length; i++) {
    result.push([list1[i], list2[i]]);
  }
  return result;
};

var call = function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2);

  var f = _ref2[0];
  var x = _ref2[1];
  return f(x);
};

var isString = function (x) {
  return typeof x === "string";
};
var isBoolean = function (x) {
  return typeof x === "boolean";
};
var isNumber = function (x) {
  return typeof x === "number";
};
var isFunction = function (x) {
  return typeof x === "function";
};

var compile = undefined;

var compileArray = function (pattern) {
  var predicates = pattern.map(compile);
  return function (target) {
    return Array.isArray(target) && pattern.length === target.length && all(call, zipSameLength(predicates, target));
  };
};

var compileObject = function (pattern) {
  var compiled = [];
  for (var key in pattern) {
    if (pattern.hasOwnProperty(key)) {
      compiled.push([key, compile(pattern[key])]);
    }
  }
  return function (target) {
    if (typeof target !== "object") {
      return false;
    }
    for (var _iterator = compiled, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var _ref2 = _slicedToArray(_ref, 2);

      var key = _ref2[0];
      var _pattern = _ref2[1];

      if (!(key in target) || !_pattern(target[key])) {
        return false;
      }
    }
    return true;
  };
};

compile = function (pattern) {
  if (pattern instanceof PredicatePattern) {
    return pattern.matches;
  } else if (pattern === String) {
    return isString;
  } else if (pattern === Boolean) {
    return isBoolean;
  } else if (pattern === Number) {
    return isNumber;
  } else if (pattern === Function) {
    return isFunction;
  } else if (pattern === Array) {
    return Array.isArray;
  } else if (Array.isArray(pattern)) {
    return compileArray(pattern);
  } else if (typeof pattern === "object") {
    return compileObject(pattern);
  } else if (typeof pattern === "function") {
    return function (x) {
      return x instanceof pattern;
    };
  } else {
    return function (x) {
      return x === pattern;
    };
  }
};

module.exports = compile;