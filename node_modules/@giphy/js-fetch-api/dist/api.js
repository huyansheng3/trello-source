"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GiphyFetch = void 0;
/* eslint-disable no-dupe-class-members */
var js_util_1 = require("@giphy/js-util");
var qs_1 = __importDefault(require("qs"));
var gif_1 = require("./normalize/gif");
var request_1 = __importDefault(require("./request"));
var getType = function (options) { return (options && options.type ? options.type : 'gifs'); };
/**
 * @class GiphyFetch
 * @param {string} apiKey
 */
var GiphyFetch = /** @class */ (function () {
    function GiphyFetch(apiKey) {
        var _this = this;
        /**
         * @hidden
         */
        this.getQS = function (options) {
            if (options === void 0) { options = {}; }
            return qs_1.default.stringify(__assign(__assign({}, options), { api_key: _this.apiKey, pingback_id: js_util_1.getPingbackId() }));
        };
        this.apiKey = apiKey;
    }
    /**
     * A list of categories
     *
     * @param {CategoriesOptions} [options]
     * @returns {Promise<CategoriesResult>}
     */
    GiphyFetch.prototype.categories = function (options) {
        return request_1.default("gifs/categories?" + this.getQS(options));
    };
    /**
     * Get a single gif by a id
     * @param {string} id
     * @returns {Promise<GifsResult>}
     **/
    GiphyFetch.prototype.gif = function (id) {
        return request_1.default("gifs/" + id + "?" + this.getQS(), gif_1.normalizeGif);
    };
    GiphyFetch.prototype.gifs = function (arg1, arg2) {
        if (Array.isArray(arg1)) {
            return request_1.default("gifs?" + this.getQS({ ids: arg1.join(',') }), gif_1.normalizeGifs);
        }
        return request_1.default("gifs/categories/" + arg1 + "/" + arg2 + "?" + this.getQS(), gif_1.normalizeGifs);
    };
    GiphyFetch.prototype.emoji = function (options) {
        return request_1.default("emoji?" + this.getQS(options), gif_1.normalizeGifs);
    };
    GiphyFetch.prototype.animate = function (text, options) {
        if (options === void 0) { options = {}; }
        var qsParams = this.getQS(__assign(__assign({}, options), { m: text }));
        return request_1.default("text/animate?" + qsParams, gif_1.normalizeGifs);
    };
    /**
     * @param term: string The term you're searching for
     * @param options: SearchOptions
     * @returns {Promise<GifsResult>}
     **/
    GiphyFetch.prototype.search = function (term, options) {
        if (options === void 0) { options = {}; }
        var q = options.channel ? "@" + options.channel + " " + term : term;
        var excludeDynamicResults;
        if (options.type === 'text') {
            excludeDynamicResults = true;
        }
        var qsParams = this.getQS(__assign(__assign({}, options), { q: q, excludeDynamicResults: excludeDynamicResults }));
        return request_1.default(getType(options) + "/search?" + qsParams, gif_1.normalizeGifs);
    };
    /**
     * Get a list of subcategories
     * @param {string} category
     * @param {SubcategoriesOptions} options
     * @returns {Promise<CategoriesResult>}
     */
    GiphyFetch.prototype.subcategories = function (category, options) {
        return request_1.default("gifs/categories/" + category + "?" + this.getQS(options));
    };
    /**
     * Get trending gifs
     *
     * @param {TrendingOptions} options
     * @returns {Promise<GifsResult>}
     */
    GiphyFetch.prototype.trending = function (options) {
        if (options === void 0) { options = {}; }
        return request_1.default(getType(options) + "/trending?" + this.getQS(options), gif_1.normalizeGifs);
    };
    /**
     * Get a random gif
     * @param {RandomOptions}
     * @returns {Promise<GifResult>}
     **/
    GiphyFetch.prototype.random = function (options) {
        return request_1.default(getType(options) + "/random?" + this.getQS(options), gif_1.normalizeGif, true);
    };
    /**
     * Get related gifs by a id
     * @param {string} id
     * @param {SubcategoriesOptions} options
     * @returns {Promise<GifsResult>}
     **/
    GiphyFetch.prototype.related = function (id, options) {
        return request_1.default(((options === null || options === void 0 ? void 0 : options.type) === 'stickers' ? 'stickers' : 'gifs') + "/related?" + this.getQS(__assign({ gif_id: id }, options)), gif_1.normalizeGifs);
    };
    return GiphyFetch;
}());
exports.GiphyFetch = GiphyFetch;
exports.default = GiphyFetch;
//# sourceMappingURL=api.js.map