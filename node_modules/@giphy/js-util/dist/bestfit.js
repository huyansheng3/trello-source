"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setRenditionScaleUpMaxPixels = void 0;
var log_1 = require("./log");
var closestArea = function (width, height, renditions) {
    var currentBest = Infinity;
    var result;
    // sort the renditions so we can avoid scaling up low resolutions
    renditions.forEach(function (rendition) {
        var widthPercentage = rendition.width / width;
        var heightPercentage = rendition.height / height;
        // a width percentage of 1 is exact, 2 is double, .5 half etc
        var areaPercentage = widthPercentage * heightPercentage;
        // img could be bigger or smaller
        var testBest = Math.abs(1 - areaPercentage); // the closer to 0 the better
        if (testBest < currentBest) {
            currentBest = testBest;
            result = rendition;
        }
    });
    return result;
};
var SCALE_UP_MAX_PIXELS = 50;
var setRenditionScaleUpMaxPixels = function (pixels) {
    log_1.Logger.debug("@giphy/js-util set rendition selection scale up max pixels to " + pixels);
    SCALE_UP_MAX_PIXELS = pixels;
};
exports.setRenditionScaleUpMaxPixels = setRenditionScaleUpMaxPixels;
/**
 * Finds image rendition that best fits a given container preferring images
 * ##### Note: all renditions are assumed to have the same aspect ratio
 *
 * When we have a portrait target and landscape gif, we choose a higher rendition to match
 * the height of the portrait target, otherwise it's blurry (same applies for landscape to portrait)
 *
 * @name bestfit
 * @function
 * @param {Array.<Object>} renditions available image renditions each having a width and height property
 * @param {Number} width
 * @param {Number} height
 * @param {Number} scaleUpMaxPixels the maximum pixels an asset should be scaled up
 */
function bestfit(renditions, width, height, scaleUpMaxPixels) {
    if (scaleUpMaxPixels === void 0) { scaleUpMaxPixels = SCALE_UP_MAX_PIXELS; }
    var largestRendition = renditions[0];
    // filter out renditions that are smaller than the target width and height by scaleUpMaxPixels value
    var testRenditions = renditions.filter(function (rendition) {
        if (rendition.width * rendition.height > largestRendition.width * largestRendition.height) {
            largestRendition = rendition;
        }
        return width - rendition.width <= scaleUpMaxPixels && height - rendition.height <= scaleUpMaxPixels;
    });
    // if all are too small, use the largest we have
    if (testRenditions.length === 0) {
        return largestRendition;
    }
    // find the closest area of the filtered renditions
    return closestArea(width, height, testRenditions);
}
exports.default = bestfit;
//# sourceMappingURL=bestfit.js.map