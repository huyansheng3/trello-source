"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LogLevel = void 0;
/* istanbul ignore next */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
/* istanbul ignore next */
exports.Logger = {
    ENABLED: typeof window !== 'undefined' &&
        typeof location !== 'undefined' &&
        location.search.indexOf('giphy-debug') !== -1,
    LEVEL: 0,
    PREFIX: 'GiphyJS',
    debug: function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        if (exports.Logger.ENABLED && exports.Logger.LEVEL <= LogLevel.DEBUG) {
            console.debug.apply(console, __spreadArray([exports.Logger.PREFIX], msg)); // eslint-disable-line no-console
        }
    },
    info: function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        if (exports.Logger.ENABLED && exports.Logger.LEVEL <= LogLevel.INFO) {
            console.info.apply(console, __spreadArray([exports.Logger.PREFIX], msg)); // eslint-disable-line no-console
        }
    },
    warn: function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        if (exports.Logger.ENABLED && exports.Logger.LEVEL <= LogLevel.WARN) {
            console.warn.apply(console, __spreadArray([exports.Logger.PREFIX], msg)); // eslint-disable-line no-console
        }
    },
    error: function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        if (exports.Logger.ENABLED && exports.Logger.LEVEL <= LogLevel.ERROR) {
            console.error.apply(console, __spreadArray([exports.Logger.PREFIX], msg)); // eslint-disable-line no-console
        }
    },
};
//# sourceMappingURL=log.js.map