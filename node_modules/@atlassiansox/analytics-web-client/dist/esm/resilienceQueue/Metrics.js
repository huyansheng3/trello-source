import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { ResilienceMechanism } from './types';
export class MetricsCollector {
  constructor() {
    _defineProperty(this, "itemsDiscardedByRetry", 0);

    _defineProperty(this, "duplicateEventCount", 0);

    _defineProperty(this, "eventCount", 0);

    _defineProperty(this, "localstorageDuplicateCount", 0);

    _defineProperty(this, "itemsDiscardedByOverflow", 0);

    _defineProperty(this, "resilienceMechanism", ResilienceMechanism.LOCALSTORAGE);
  }

  addToItemsDiscardedByRetryCounter() {
    this.itemsDiscardedByRetry++;
  }

  addToDuplicateEventCounter() {
    this.duplicateEventCount++;
  }

  addToEventCount() {
    this.eventCount++;
  }

  addToLocalstorageDuplicateCount() {
    this.localstorageDuplicateCount++;
  }

  addToItemsDiscardedByOverflowCounter() {
    this.itemsDiscardedByOverflow++;
  }

  setResilienceMechanism(mechanism) {
    this.resilienceMechanism = mechanism;
  }

  subtractFromMetrics(sentMetrics) {
    this.itemsDiscardedByRetry = this.subtractFromCount(this.itemsDiscardedByRetry, sentMetrics.itemsDiscardedByRetry);
    this.duplicateEventCount = this.subtractFromCount(this.duplicateEventCount, sentMetrics.duplicateEventCount);
    this.eventCount = this.subtractFromCount(this.eventCount, sentMetrics.eventCount);
    this.localstorageDuplicateCount = this.subtractFromCount(this.localstorageDuplicateCount, sentMetrics.localstorageDuplicateCount);
    this.itemsDiscardedByOverflow = this.subtractFromCount(this.itemsDiscardedByOverflow, sentMetrics.itemsDiscardedByOverflow);
  }

  subtractFromCount(count, subtract) {
    return Math.max(count - (subtract || 0), 0);
  }

  getMetricsPayload() {
    return {
      itemsDiscardedByRetry: this.itemsDiscardedByRetry,
      duplicateEventCount: this.duplicateEventCount,
      eventCount: this.eventCount,
      localstorageDuplicateCount: this.localstorageDuplicateCount,
      itemsDiscardedByOverflow: this.itemsDiscardedByOverflow,
      resilienceMechanism: this.resilienceMechanism
    };
  }

}
let cachedMetricsClient = null;
export default (() => {
  if (!cachedMetricsClient) {
    cachedMetricsClient = new MetricsCollector();
  }

  return cachedMetricsClient;
});