import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { originTracingType } from './analyticsWebTypes';
import { mapKeys, omit, pick } from './objectUtils';
import SafeSessionStorage from './storage/SafeSessionStorage';
import urlParamExtractor from './urlUtils';
import uuidv4 from './uuid';

const {
  parseUrl,
  stringify
} = require('query-string');

const STORAGE_KEY = 'taskSessions';
const INIT_KEY = 'taskSessionsInit';
const AWC_PARAM_PREFIX = 'awc.';
const TASK_SESSION_RELOAD_TIME = 3000;
export default class TaskSessionStore {
  constructor() {
    _defineProperty(this, "_taskSessionsNotRecentlyInitialised", currentTimestamp => this._safeSessionStorage.getItem(STORAGE_KEY) === null || this._safeSessionStorage.getItem(INIT_KEY) === null || this._safeSessionStorage.getItem(INIT_KEY) < currentTimestamp - TASK_SESSION_RELOAD_TIME);

    _defineProperty(this, "_removeTaskSessionPrefix", (_, taskSessionName) => taskSessionName.split(AWC_PARAM_PREFIX)[1]);

    _defineProperty(this, "_isTaskSessionQueryParam", (_, taskSessionName) => taskSessionName.startsWith(AWC_PARAM_PREFIX));

    _defineProperty(this, "getAllTaskSessions", () => {
      try {
        return JSON.parse(this._safeSessionStorage.getItem(STORAGE_KEY));
      } catch (e) {
        return {};
      }
    });

    _defineProperty(this, "_writeToSessionStorage", taskSessions => {
      try {
        this._safeSessionStorage.setItem(STORAGE_KEY, JSON.stringify(taskSessions)); // eslint-disable-next-line no-empty

      } catch (e) {}
    });

    _defineProperty(this, "_appendTaskSessions", newTaskSessions => {
      const currentState = this.getAllTaskSessions();
      const newState = currentState === null ? newTaskSessions : Object.assign(currentState, newTaskSessions);

      this._writeToSessionStorage(newState);
    });

    _defineProperty(this, "_safelyRemoveKey", (currentState, taskSessionName) => {
      if (currentState === null) {
        return {};
      }

      delete currentState[taskSessionName];
      return currentState;
    });

    _defineProperty(this, "createTaskSession", taskSessionName => {
      const taskSessionId = uuidv4();
      const newTaskSessions = {};
      newTaskSessions[taskSessionName] = taskSessionId;

      this._appendTaskSessions(newTaskSessions);

      return taskSessionId;
    });

    _defineProperty(this, "createTaskSessionWithProvidedId", (taskSessionName, taskSessionId) => {
      if (typeof taskSessionId !== 'string') {
        throw new TypeError('invalid taskSessionId, must be string');
      }

      const newTaskSessions = {};
      newTaskSessions[taskSessionName] = taskSessionId;

      this._appendTaskSessions(newTaskSessions);
    });

    _defineProperty(this, "completeTaskSession", taskSessionName => {
      const currentState = this.getAllTaskSessions();

      const updatedState = this._safelyRemoveKey(currentState, taskSessionName);

      this._writeToSessionStorage(updatedState);
    });

    _defineProperty(this, "formatTaskSessionQueryString", ({
      uri,
      includedTaskSessions
    }) => {
      const {
        url,
        query
      } = parseUrl(uri);
      const currentState = this.getAllTaskSessions(); // Use specified task sessions, otherwise all tasksessions excluding originTracing sessions

      const filteredTaskSessions = includedTaskSessions ? pick(currentState, includedTaskSessions) : omit(currentState, Object.values(originTracingType));

      if (Object.keys(filteredTaskSessions).length === 0) {
        return uri;
      }

      const queryWithTaskSessions = _objectSpread(_objectSpread({}, mapKeys(filteredTaskSessions, (_, taskSessionName) => AWC_PARAM_PREFIX + taskSessionName)), query);

      return `${url}?${stringify(queryWithTaskSessions)}`;
    });

    _defineProperty(this, "stripQueryParameters", () => {
      const extractedTaskSessions = mapKeys(urlParamExtractor(this._isTaskSessionQueryParam), this._removeTaskSessionPrefix);

      this._appendTaskSessions(extractedTaskSessions);
    });

    const _currentTimestamp = Date.now();

    this._safeSessionStorage = new SafeSessionStorage(); // Wrapping all sessionStorage calls in try catch to stop any error propogation, taskSessions should gracefully fail.

    try {
      if (this._taskSessionsNotRecentlyInitialised(_currentTimestamp)) {
        this._writeToSessionStorage({});

        this._safeSessionStorage.setItem(INIT_KEY, _currentTimestamp);
      } // eslint-disable-next-line no-empty

    } catch (e) {}
  }

}