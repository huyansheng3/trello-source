// For more details on this funciton, see https://hello.atlassian.net/wiki/spaces/MEASURE/pages/585086028/Investigation+Local+storage+full
// TL;DR
// If a queue looses its `ack` key in localstorage, it will never get claimed.
// There is a small chance that this can happen.
// This function is to run through queues and clean any that have been orphaned.
// Keys stolen from https://github.com/segmentio/localstorage-retry/blob/master/lib/index.js#L55
const keySuffixs = {
  IN_PROGRESS: 'inProgress',
  QUEUE: 'queue',
  ACK: 'ack',
  RECLAIM_START: 'reclaimStart',
  RECLAIM_END: 'reclaimEnd'
};
const validSuffixs = Object.values(keySuffixs);
export default (prefix => {
  if (typeof prefix !== 'string' || prefix.length === 0) {
    // We do not want to start deleting everything in localstorage
    return;
  }

  try {
    const queueStates = new Array(window.localStorage.length).fill('').map((_empty, index) => window.localStorage.key(index)).filter(key => key.startsWith(`${prefix}.`)).map(key => key.split('.')).filter(splitKeys => splitKeys.length === 3 && validSuffixs.includes(splitKeys[2])).reduce((accumulator, currentKeys) => {
      const [, id, suffix] = currentKeys;

      if (accumulator[id] === undefined) {
        accumulator[id] = {};
      }

      accumulator[id][suffix] = true;
      return accumulator;
    }, {});
    Object.keys(queueStates).filter(id => queueStates[id][keySuffixs.ACK] !== true).forEach(id => {
      localStorage.removeItem(`${prefix}.${id}.${keySuffixs.IN_PROGRESS}`);
      localStorage.removeItem(`${prefix}.${id}.${keySuffixs.QUEUE}`);
      localStorage.removeItem(`${prefix}.${id}.${keySuffixs.RECLAIM_START}`);
      localStorage.removeItem(`${prefix}.${id}.${keySuffixs.RECLAIM_END}`);
    });
  } catch (_error) {// Ignore errors from localStorage.
  }
});