import _defineProperty from "@babel/runtime/helpers/defineProperty";
import SafeLocalStorage from './storage/SafeLocalStorage';
const SESSION_ID_STORAGE_KEY = 'session.id';
const SESSION_EXPIRY_STORAGE_KEY = 'session.expiry';
const ONLY_NUMBERS_REGEX = /^\d+$/;
const DEFAULT_SESSION_EXPIRY_TIME_MS = 30 * 60 * 1000; // 30 minutes

export default class SessionTracking {
  constructor(options) {
    _defineProperty(this, "_generateNewSessionId", () => {
      const newSessionId = Date.now().toString();

      this._safeLocalStorage.setItem(SESSION_ID_STORAGE_KEY, newSessionId);

      return newSessionId;
    });

    _defineProperty(this, "_updateSessionExpiry", () => {
      const expiry = Date.now() + this._sessionExpiryTime;

      this._safeLocalStorage.setItem(SESSION_EXPIRY_STORAGE_KEY, expiry);

      return expiry;
    });

    if (!options) {
      this._sessionExpiryTime = DEFAULT_SESSION_EXPIRY_TIME_MS;
    } else {
      this._sessionExpiryTime = options.sessionExpiryTime || DEFAULT_SESSION_EXPIRY_TIME_MS;
    }

    this._safeLocalStorage = new SafeLocalStorage();
  }

  getCurrentSessionId() {
    const sessionId = this._safeLocalStorage.getItem(SESSION_ID_STORAGE_KEY);

    const sessionExpiry = parseInt(this._safeLocalStorage.getItem(SESSION_EXPIRY_STORAGE_KEY), 10);

    this._updateSessionExpiry();

    if (!sessionId || sessionExpiry <= Date.now() || Number.isNaN(sessionExpiry)) {
      return this._generateNewSessionId();
    } // Old versions of sessionId were UUIDs which caused issues for Amplitude which only accepts
    // integers for this field. In these scenarios we want to regenerate the sessionId as an integer


    if (!ONLY_NUMBERS_REGEX.test(sessionId)) {
      return this._generateNewSessionId();
    }

    return sessionId;
  }

}