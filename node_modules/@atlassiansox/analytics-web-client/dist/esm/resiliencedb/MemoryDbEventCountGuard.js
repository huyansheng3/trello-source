import _defineProperty from "@babel/runtime/helpers/defineProperty";
import AbandonWriteError from './AbandonWriteError';
import { MEMORY_DB_GUARD_POLICY, StoreType } from './constants';
export default class MemoryDbEventCountGuard {
  constructor(eventLimit, memoryStore) {
    _defineProperty(this, "insertItemsToMemoryStore", (itemsToAdd, policy) => {
      switch (policy) {
        case MEMORY_DB_GUARD_POLICY.ABANDON_IF_LIMIT_WILL_EXECEED:
          return this.handleAbandonIfLimitWillExceedPolicy(itemsToAdd);

        case MEMORY_DB_GUARD_POLICY.EVICT_OLDEST_IF_LIMIT_EXECEEDED:
          return this.handleEvictOldestIfLimitExceededPolicy(itemsToAdd);

        default:
          throw new Error('Unreachable state');
      }
    });

    if (eventLimit > 0) {
      this.eventLimit = eventLimit;
    } else {
      throw Error('Event Limit has to be set higher than 1');
    }

    this.memoryStore = memoryStore;
  }
  /**
   * Unlike IndexedDb, we cannot take advantage of any index. So we are,
   * treating the memory store as a sorted set when adding items.
   *
   * Then we will evict the oldest items from our sorted stack, if our limit is exceeded.
   */


  handleAbandonIfLimitWillExceedPolicy(itemsToAdd) {
    if (this.memoryStore.length + itemsToAdd.length > this.eventLimit) {
      throw new AbandonWriteError(StoreType.MEMORY);
    }

    itemsToAdd.forEach(item => this.addItem(item));
  }

  handleEvictOldestIfLimitExceededPolicy(itemsToAdd) {
    itemsToAdd.forEach(item => this.addItem(item));
    this.evictEventsIfNeeded();
  }
  /**
   * This function is adding items to the tail of the memoryStore and as it adds new items it keeps the
   * memory store sorted by timeAdded property. This makes evictions easier and adding elements to
   * memoryStore much faster.
   *
   * @param itemToAdd
   */


  addItem(itemToAdd) {
    this.memoryStore.push(itemToAdd); // Sorting everytime, intentionally.

    this.memoryStore.sort(function (a, b) {
      return a.timeAdded - b.timeAdded;
    });
  }
  /**
   * This function checks the number of events currently in AWC MemoryDb and if necessary,
   * will evict the oldest events in favour of the events we want to add.
   *
   * @param countOfEventsToAdd - The number of events we are proposing to add.
   */


  evictEventsIfNeeded() {
    const numberOfEventsInDb = this.memoryStore.length; // The number of analytics events currently in MemoryDb and
    // the Z events we are proposing to add will exceed our event count limit.

    if (numberOfEventsInDb > this.eventLimit) {
      const m = numberOfEventsInDb - this.eventLimit; // Removing oldest M events

      this.memoryStore.splice(0, m);
    }
  }

}