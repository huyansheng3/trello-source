import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { TIME_ADDED_INDEX } from './constants';

/**
 * A class to enforce a limit on the amount of Analytics Events stored in AWC IndexedDb.
 */
export default class IndexedDbEventCountGuard {
  constructor(eventLimit, logger, requestToPromiseTransformer, deleteItemHandler) {
    _defineProperty(this, "deleteOldestNEvents", async (objectStore, count) => {
      var _target;

      const timeIndex = objectStore.index(TIME_ADDED_INDEX);
      const lowerBoundOpenKeyRange = IDBKeyRange.lowerBound(0);
      const getAllRequest = timeIndex.getAllKeys(lowerBoundOpenKeyRange, count);
      const event = await this.requestToPromiseTransformer(getAllRequest);
      const result = event === null || event === void 0 ? void 0 : (_target = event.target) === null || _target === void 0 ? void 0 : _target.result; // Adding extra safety

      if (result && Array.isArray(result) && result.length > 0) {
        try {
          const deletePromises = result.map(item => this.deleteItemHandler(objectStore, item));
          await Promise.all(deletePromises);
        } catch (error) {
          this.logger.warn('Failed to delete items from indexeddb.', error);
          throw error;
        }
      }
    });

    if (eventLimit > 0) {
      this.eventLimit = eventLimit;
    } else {
      throw Error('Event Limit has to be set higher than 1');
    }

    this.logger = logger;
    this.requestToPromiseTransformer = requestToPromiseTransformer;
    this.deleteItemHandler = deleteItemHandler;
  }
  /**
   * This function checks the number of events currently in AWC IndexedDB object store and if necessary,
   * will evict the oldest events in favour of the events we want to add.
   *
   * This function can be re-used when the bulk add functionality is added in IndexedDbConnector.
   *
   * @param countOfEventsToAdd - The number of events we are proposing to add.
   */


  async makeSpaceForNEvents(objectStore, countOfEventsToAdd = 1) {
    const numberOfEventsInDb = await this.getCountofEventsInObjectStore(objectStore); // The number of analytics events currently in IndexedDB and
    // the N events we are proposing to add will exceed our event count limit.

    if (numberOfEventsInDb + countOfEventsToAdd > this.eventLimit) {
      const makeSpaceForXEvents = numberOfEventsInDb + countOfEventsToAdd - this.eventLimit;
      await this.deleteOldestNEvents(objectStore, makeSpaceForXEvents);
    }
  }
  /**
   * This query returns the count of items held in AWC IndexedDB object store.
   */


  async getCountofEventsInObjectStore(objectStore) {
    const request = objectStore.count();
    const event = await this.requestToPromiseTransformer(request);
    return event.target.result;
  }
  /**
  * This query fetches the oldest events currently stored in AWC IndexedDb object store
  * and deletes them sequentially
  */


}