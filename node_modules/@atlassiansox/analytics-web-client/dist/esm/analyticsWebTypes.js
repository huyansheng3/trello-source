export const envType = Object.freeze({
  LOCAL: 'local',
  DEV: 'dev',
  STAGING: 'staging',
  PROD: 'prod'
});
export const eventType = Object.freeze({
  TRACK: 'track',
  UI: 'ui',
  OPERATIONAL: 'operational',
  SCREEN: 'screen',
  IDENTIFY: 'identify'
});
export const platformType = Object.freeze({
  MAC: 'mac',
  LINUX: 'linux',
  WINDOWS: 'windows',

  /**
   *  @deprecated desktop is here for retrocompatibility, please select one of the above OS instead.
   */
  DESKTOP: 'desktop',
  WEB: 'web',
  MOBILE_WEB: 'mobileWeb'
});
export const originType = Object.freeze({
  DESKTOP: 'desktop',
  WEB: 'web'
});
export const tenantType = Object.freeze({
  CLOUD_ID: 'cloudId',
  ORG_ID: 'orgId',
  OPSGENIE_CUSTOMER_ID: 'opsgenieCustomerId',
  NONE: 'none'
});
export const userType = Object.freeze({
  ATLASSIAN_ACCOUNT: 'atlassianAccount',
  HASHED_EMAIL: 'hashedEmail',
  TRELLO: 'trello',
  OPSGENIE: 'opsgenie'
});
export const apdexType = Object.freeze({
  TRANSITION: 'transition',
  INITIAL_LOAD: 'initialLoad'
});
export const desktopPlatforms = Object.freeze([platformType.DESKTOP, platformType.MAC, platformType.LINUX, platformType.WINDOWS]);
export const webPlatforms = Object.freeze([platformType.WEB, platformType.MOBILE_WEB]);
export const originTracingType = Object.freeze({
  ATL_ORIGIN: 'atlOrigin'
});
export function objectValues(object) {
  return Object.keys(object).map(key => object[key]);
}
export function isType(type, value) {
  return objectValues(type).indexOf(value) > -1;
}