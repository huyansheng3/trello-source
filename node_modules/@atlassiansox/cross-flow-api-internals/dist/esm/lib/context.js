import _extends from "@babel/runtime/helpers/extends";
import React, { createContext, useContext, useMemo } from 'react';
import { VERSION as V0, createAPIv0 } from './api/v0';
import { Reasons } from './types';
var LATEST_VERSION = V0;
/**
 * Private Cross Flow context
 *
 * Not to be used directly other than by useCrossFlow and BaseCrossFlowApiProvider
 */

var CrossFlowContext = /*#__PURE__*/createContext(function () {
  return {
    isEnabled: false,
    reason: Reasons.NO_PROVIDER
  };
});
/**
 * A factory for Cross Flow API negotiator
 * Negotiator will attempt to instantiate a requested version of the API context or fallback
 * to default one (NO_API_SUPPORT)
 */

export var createNegotiateApi = function createNegotiateApi(onOpen) {
  return function (version) {
    switch (version) {
      case V0:
        return {
          isEnabled: true,
          api: createAPIv0(onOpen)
        };

      default:
        return {
          isEnabled: false,
          reason: Reasons.NO_API_SUPPORT
        };
    }
  };
};
/**
 * Cross Flow API provider
 *
 * It's responsibility is to abstract CrossFlowContext.Provider from product integration modules and also
 * to supply a method of negotiating API version with the consumer.
 *
 * (Not to be used directly by products, but rather by (product specific) integration module)
 *
 * @param onOpen - Callback that will be invoked when API consumer requests to kick off expand process
 */

export var BaseCrossFlowApiProvider = function BaseCrossFlowApiProvider(_ref) {
  var onOpen = _ref.onOpen,
      children = _ref.children;
  var negotiateApi = useMemo(function () {
    return createNegotiateApi(onOpen);
  }, [onOpen]);
  return /*#__PURE__*/React.createElement(CrossFlowContext.Provider, {
    value: negotiateApi
  }, children);
};
/**
 * React hook for accessing Cross Flow API
 */

export var useCrossFlow = function useCrossFlow() {
  var negotiateApi = useContext(CrossFlowContext);
  return useMemo(function () {
    return negotiateApi(LATEST_VERSION);
  }, [negotiateApi]);
};
/**
 * React HOC for wrapping class components with the above React hook
 * @param WrappedComponent
 */

export function withCrossFlow( //component coming in here has no crossflow type yet, but expects it
WrappedComponent) {
  var ComponentWithCrossFlow = function ComponentWithCrossFlow(props) {
    var crossFlow = useCrossFlow();
    return /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, props, {
      crossFlow: crossFlow
    }));
  };

  ComponentWithCrossFlow.displayName = "withCrossFlow(".concat(WrappedComponent.displayName || WrappedComponent.name || 'Component', ")");
  return ComponentWithCrossFlow;
}