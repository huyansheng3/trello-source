import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { ClientStorageState } from '../fetcher/types';
import hashUser from '../util/hash';
export var STORAGE_KEY_PREFIX = 'feature-flags-atl';
var STORAGE_KEY_FLAG_STATE_PREFIX = "".concat(STORAGE_KEY_PREFIX, ".flags");
var STORAGE_KEY_ANON_ID = "".concat(STORAGE_KEY_PREFIX, ".anonId");
var STORAGE_KEY_DETECT_SUPPORT = "".concat(STORAGE_KEY_PREFIX, ".storage.support");
var StorageExceedQuota = false; // Expire after 7 days

export var FLAG_STATE_EXPIRY_PERIOD = 1000 * 60 * 60 * 24 * 7;

var Storage = /*#__PURE__*/function () {
  function Storage(env, product, apiKey, user) {
    _classCallCheck(this, Storage);

    this.env = env;
    this.product = product;
    this.apiKey = apiKey;
    this.generateKey(user);
  }

  _createClass(Storage, [{
    key: "updateUserContext",
    value: function updateUserContext(user) {
      this.generateKey(user);
    }
  }, {
    key: "getFlagsState",
    value: function getFlagsState() {
      return Storage.getFlagState(this.key);
    }
  }, {
    key: "setFlagsState",
    value: function setFlagsState(data) {
      Storage.setItem(this.key, JSON.stringify(data));
    }
  }, {
    key: "purgeStaleFlagState",
    value: function purgeStaleFlagState() {
      var _this = this;

      try {
        Object.keys(window.localStorage).filter(function (key) {
          return key.startsWith(STORAGE_KEY_FLAG_STATE_PREFIX) && key !== _this.key;
        }).forEach(function (key) {
          var flagState = Storage.getFlagState(key);

          if (flagState && Date.now() - flagState.timestamp >= FLAG_STATE_EXPIRY_PERIOD) {
            Storage.removeItem(key);
          }
        });
      } catch (error) {// This could fail due to localstorage permissions being restricted, in this case do nothing
      }
    }
  }, {
    key: "generateKey",
    value: function generateKey(user) {
      this.key = "".concat(STORAGE_KEY_FLAG_STATE_PREFIX, ".").concat(this.env, ".").concat(this.product, ".").concat(this.apiKey, ".").concat(hashUser(user));
    }
  }], [{
    key: "getFlagState",
    value: function getFlagState(key) {
      var rawData = Storage.getItem(key);

      if (!rawData) {
        return null;
      }

      return JSON.parse(rawData);
    }
  }, {
    key: "getAnonymousId",
    value: function getAnonymousId() {
      return Storage.getItem(STORAGE_KEY_ANON_ID);
    }
  }, {
    key: "setAnonymousId",
    value: function setAnonymousId(anonymousId) {
      Storage.setItem(STORAGE_KEY_ANON_ID, anonymousId);
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      try {
        window.localStorage.setItem(key, value);
        StorageExceedQuota = false;
      } catch (error) {
        if (Storage.isQuotaExceeded(error)) {
          StorageExceedQuota = true;
        } // This could fail due to localstorage being full or localstorage permissions being restricted.
        // In either case, we do nothing.

      }
    }
  }, {
    key: "getItem",
    value: function getItem(key) {
      try {
        return window.localStorage.getItem(key);
      } catch (error) {
        // This could fail due to localstorage permissions being restricted, in this case do nothing
        return null;
      }
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      try {
        window.localStorage.removeItem(key);
      } catch (error) {// This could fail due to localstorage permissions being restricted, in this case do nothing
      }
    }
  }, {
    key: "isQuotaExceeded",
    value: function isQuotaExceeded(e) {
      // according to https://developer.mozilla.org/en-US/docs/Web/API/DOMException
      // DOMException.code is deprecated API should no longer be used
      if (e instanceof DOMException) {
        switch (e.name) {
          case 'QUOTA_EXCEEDED_ERR':
            // Safari
            return true;

          case 'QuotaExceededError':
            // Chrome
            return true;

          case 'NS_ERROR_DOM_QUOTA_REACHED':
            // Firefox
            return true;

          default:
            return false;
        }
      } // Internet Explorer 8


      return e.number === -2147024882;
    }
  }, {
    key: "getStorageStatus",
    value: function getStorageStatus() {
      var TEST_VALUE = 'test_value';

      try {
        if (!window.localStorage) {
          return ClientStorageState.NOT_AVAILABLE;
        }

        if (StorageExceedQuota) {
          return ClientStorageState.FULL;
        }

        window.localStorage.setItem(STORAGE_KEY_DETECT_SUPPORT, TEST_VALUE);
        var value = window.localStorage.getItem(STORAGE_KEY_DETECT_SUPPORT);
        window.localStorage.removeItem(STORAGE_KEY_DETECT_SUPPORT); // handle localStorage silently failing

        return value === TEST_VALUE ? ClientStorageState.AVAILABLE : ClientStorageState.ERRORED;
      } catch (e) {
        if (Storage.isQuotaExceeded(e)) {
          return ClientStorageState.FULL;
        } // permission issue or localStorage disabled


        return ClientStorageState.NOT_AVAILABLE;
      }
    }
  }]);

  return Storage;
}();

export { Storage as default };