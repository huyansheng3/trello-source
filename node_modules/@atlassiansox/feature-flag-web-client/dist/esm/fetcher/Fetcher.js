import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { EnvironmentType } from '../index';
import { ResponseError } from './errors';
var REQUEST_TIMEOUT = 2000;
var PROD_BASE_URL = 'https://api.atlassian.com/flags';
var STAGING_BASE_URL = 'https://api.stg.atlassian.com/flags';
var DEV_BASE_URL = 'https://api.dev.atlassian.com/flags';

var Fetcher = /*#__PURE__*/function () {
  function Fetcher(apiKey) {
    var serviceEnv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EnvironmentType.PROD;
    var baseUrl = arguments.length > 2 ? arguments[2] : undefined;

    _classCallCheck(this, Fetcher);

    this.apiKey = apiKey;
    this.baseUrl = Fetcher.buildBaseUrl(serviceEnv, baseUrl);
  }

  _createClass(Fetcher, [{
    key: "fetchFeatureFlags",
    value: function () {
      var _fetchFeatureFlags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, metadata, version) {
        var requestBody, controller, timeoutId, response, successfulResponse;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                requestBody = {
                  apiKey: this.apiKey,
                  identifier: user.identifier,
                  isAnonymous: user.isAnonymous,
                  additionalIdentifiers: user.additionalIdentifiers,
                  customAttributes: user.custom,
                  versionData: version,
                  metadata: metadata
                }; // in case there are still IE users, check AbortController before init,
                // IE has no timeout applied on fetch since AbortController isn't available

                controller = typeof AbortController !== 'undefined' ? new AbortController() : null;
                timeoutId = setTimeout(function () {
                  return controller === null || controller === void 0 ? void 0 : controller.abort();
                }, REQUEST_TIMEOUT);
                _context.prev = 3;
                _context.next = 6;
                return fetch("".concat(this.baseUrl, "/api/v1/frontend/featureFlagValues"), {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'X-Client-Name': metadata.client.name,
                    'X-Client-Version': metadata.client.version,
                    'X-Api-Key': this.apiKey
                  },
                  body: JSON.stringify(requestBody),
                  signal: controller === null || controller === void 0 ? void 0 : controller.signal
                });

              case 6:
                response = _context.sent;
                _context.next = 9;
                return Fetcher.handleResponseError(response);

              case 9:
                successfulResponse = _context.sent;
                return _context.abrupt("return", Fetcher.extractBody(successfulResponse));

              case 13:
                _context.prev = 13;
                _context.t0 = _context["catch"](3);
                return _context.abrupt("return", Promise.reject(_context.t0));

              case 16:
                _context.prev = 16;
                clearTimeout(timeoutId);
                return _context.finish(16);

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 13, 16, 19]]);
      }));

      function fetchFeatureFlags(_x, _x2, _x3) {
        return _fetchFeatureFlags.apply(this, arguments);
      }

      return fetchFeatureFlags;
    }()
  }], [{
    key: "handleResponseError",
    value: function () {
      var _handleResponseError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {
        var body;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (response.ok) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 3;
                return response.text();

              case 3:
                body = _context2.sent;
                throw new ResponseError(response.status, body);

              case 5:
                return _context2.abrupt("return", response);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function handleResponseError(_x4) {
        return _handleResponseError.apply(this, arguments);
      }

      return handleResponseError;
    }()
  }, {
    key: "extractBody",
    value: function () {
      var _extractBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(response.status === 204)) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", {});

              case 2:
                return _context3.abrupt("return", response.text().then(function (text) {
                  return JSON.parse(text || '{}');
                }));

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function extractBody(_x5) {
        return _extractBody.apply(this, arguments);
      }

      return extractBody;
    }()
  }, {
    key: "buildBaseUrl",
    value: function buildBaseUrl(serviceEnv, baseUrl) {
      if (baseUrl) {
        return baseUrl;
      }

      if (serviceEnv === EnvironmentType.DEV || serviceEnv === EnvironmentType.LOCAL) {
        return DEV_BASE_URL;
      }

      if (serviceEnv === EnvironmentType.STAGING) {
        return STAGING_BASE_URL;
      }

      return PROD_BASE_URL;
    }
  }]);

  return Fetcher;
}();

export { Fetcher as default };