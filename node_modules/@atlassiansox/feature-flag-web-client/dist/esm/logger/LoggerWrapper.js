import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import { version } from '../util/version';
import { LogLevel } from './types';

var getDefaultLogLevel = function getDefaultLogLevel() {
  return LogLevel.INFO;
};

export var MESSAGE_PREFIX = "@atlassiansox/feature-flag-web-client@".concat(version, " -");

var LoggerWrapper = /*#__PURE__*/function () {
  function LoggerWrapper() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LoggerWrapper);

    this.isEnabled = options.enabled !== undefined ? options.enabled : true;
    this.logger = options.logger || console;
    this.logLevel = options.level || getDefaultLogLevel();
  }

  _createClass(LoggerWrapper, [{
    key: "debug",
    value: function debug() {
      if (this.shouldLog(LogLevel.DEBUG)) {
        var _this$logger;

        for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {
          data[_key] = arguments[_key];
        }

        (_this$logger = this.logger).debug.apply(_this$logger, [MESSAGE_PREFIX].concat(data));
      }
    }
  }, {
    key: "info",
    value: function info() {
      if (this.shouldLog(LogLevel.INFO)) {
        var _this$logger2;

        for (var _len2 = arguments.length, data = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          data[_key2] = arguments[_key2];
        }

        (_this$logger2 = this.logger).info.apply(_this$logger2, [MESSAGE_PREFIX].concat(data));
      }
    }
  }, {
    key: "log",
    value: function log() {
      if (this.shouldLog(LogLevel.LOG)) {
        var _this$logger3;

        for (var _len3 = arguments.length, data = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          data[_key3] = arguments[_key3];
        }

        (_this$logger3 = this.logger).log.apply(_this$logger3, [MESSAGE_PREFIX].concat(data));
      }
    }
  }, {
    key: "warn",
    value: function warn() {
      if (this.shouldLog(LogLevel.WARN)) {
        var _this$logger4;

        for (var _len4 = arguments.length, data = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          data[_key4] = arguments[_key4];
        }

        (_this$logger4 = this.logger).warn.apply(_this$logger4, [MESSAGE_PREFIX].concat(data));
      }
    }
  }, {
    key: "error",
    value: function error() {
      if (this.shouldLog(LogLevel.ERROR)) {
        var _this$logger5;

        for (var _len5 = arguments.length, data = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          data[_key5] = arguments[_key5];
        }

        (_this$logger5 = this.logger).error.apply(_this$logger5, [MESSAGE_PREFIX].concat(data));
      }
    }
  }, {
    key: "shouldLog",
    value: function shouldLog(checkLevel) {
      return this.isEnabled && checkLevel >= this.logLevel;
    }
  }]);

  return LoggerWrapper;
}();

export { LoggerWrapper as default };