import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import hashFn from '../util/hash';
export var ONE_HOUR = 1000 * 60 * 60;

var ExposureEvents = /*#__PURE__*/function () {
  function ExposureEvents(analyticsWebClient) {
    _classCallCheck(this, ExposureEvents);

    _defineProperty(this, "spamBuster", {});

    this.analyticsWebClient = analyticsWebClient;
  }

  _createClass(ExposureEvents, [{
    key: "sendExposureEvent",
    value: function sendExposureEvent(flagKey, value, evaluationDetail, exposureData) {
      var attributes = _objectSpread(_objectSpread({}, exposureData), {}, {
        flagKey: flagKey,
        reason: evaluationDetail === null || evaluationDetail === void 0 ? void 0 : evaluationDetail.reason,
        ruleId: evaluationDetail === null || evaluationDetail === void 0 ? void 0 : evaluationDetail.ruleId,
        errorKind: evaluationDetail === null || evaluationDetail === void 0 ? void 0 : evaluationDetail.errorKind,
        value: value
      });

      if (this.shouldSendEvent(attributes)) {
        this.analyticsWebClient.sendOperationalEvent({
          actionSubject: 'feature',
          action: 'exposed',
          attributes: attributes,
          tags: ['measurement'],
          source: '@atlassiansox/feature-flag-web-client'
        });
      }
    }
  }, {
    key: "shouldSendEvent",
    value: function shouldSendEvent(attributes) {
      var hash = hashFn(attributes);

      if (this.spamBuster[hash] === undefined || this.spamBuster[hash] + ONE_HOUR < Date.now()) {
        this.spamBuster[hash] = Date.now();
        return true;
      }

      return false;
    }
  }]);

  return ExposureEvents;
}();

export { ExposureEvents as default };