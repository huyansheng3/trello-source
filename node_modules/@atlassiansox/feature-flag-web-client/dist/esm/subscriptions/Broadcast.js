import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import hashUser from '../util/hash';
export var CHANNEL_PREFIX = 'flagData';

var Broadcast = /*#__PURE__*/function () {
  function Broadcast(apiKey, user, stateUpdateCallback) {
    _classCallCheck(this, Broadcast);

    this.apiKey = apiKey;
    this.stateUpdateCallback = stateUpdateCallback;
    this.setupChannel(user);
  }

  _createClass(Broadcast, [{
    key: "updateUserContext",
    value: function updateUserContext(user) {
      this.stop();
      this.setupChannel(user);
    }
  }, {
    key: "sendFeatureFlagState",
    value: function sendFeatureFlagState(featureFlagState) {
      var _this$channel;

      (_this$channel = this.channel) === null || _this$channel === void 0 ? void 0 : _this$channel.postMessage(featureFlagState);
    }
  }, {
    key: "stop",
    value: function stop() {
      var _this$channel2;

      (_this$channel2 = this.channel) === null || _this$channel2 === void 0 ? void 0 : _this$channel2.close();
    }
  }, {
    key: "setupChannel",
    value: function setupChannel(user) {
      var _this = this;

      try {
        // Keep reference to old channel so we can check the name of the current subscription
        // is the same as the channel we received a message for.
        // Due to a bug in Firefox which events can be recieved after
        // the channel has been closed.
        // eslint-disable-next-line compat/compat
        var channel = new BroadcastChannel(this.createChannelName(user));

        channel.onmessage = function (e) {
          var _this$channel3;

          if (channel.name === ((_this$channel3 = _this.channel) === null || _this$channel3 === void 0 ? void 0 : _this$channel3.name)) {
            _this.stateUpdateCallback(e.data);
          }
        };

        this.channel = channel;
      } catch (error) {// This could fail due to BroadcastChannel not available.
        // In that case, we do nothing.
      }
    }
  }, {
    key: "createChannelName",
    value: function createChannelName(user) {
      return "".concat(CHANNEL_PREFIX, ".").concat(this.apiKey, ".").concat(hashUser(user));
    }
  }]);

  return Broadcast;
}();

export { Broadcast as default };