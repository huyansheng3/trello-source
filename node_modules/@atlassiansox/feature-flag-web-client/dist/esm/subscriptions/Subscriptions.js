import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import mitt from 'mitt';
export var FLAG_PREFIX = 'flagKey.';
export var ALL_FLAGS = 'allFlags';

var Subscriptions = /*#__PURE__*/function () {
  function Subscriptions() {
    _classCallCheck(this, Subscriptions);

    this.emitter = mitt();
  }

  _createClass(Subscriptions, [{
    key: "on",
    value: function on(flagKey, defaultValue, callback, getFlagValue, options) {
      var _this = this;

      var wrapCallback = function wrapCallback() {
        return callback(getFlagValue(flagKey, defaultValue, options));
      };

      this.emitter.on(FLAG_PREFIX + flagKey, wrapCallback);
      return function () {
        return _this.emitter.off(FLAG_PREFIX + flagKey, wrapCallback);
      };
    }
  }, {
    key: "onAnyFlagUpdated",
    value: function onAnyFlagUpdated(callback) {
      var _this2 = this;

      this.emitter.on(ALL_FLAGS, callback);
      return function () {
        return _this2.emitter.off(ALL_FLAGS, callback);
      };
    }
  }, {
    key: "anyFlagUpdated",
    value: function anyFlagUpdated() {
      this.emitter.emit(ALL_FLAGS);
    }
  }, {
    key: "flagValueUpdated",
    value: function flagValueUpdated(flagKey) {
      this.emitter.emit(FLAG_PREFIX + flagKey);
    }
  }, {
    key: "stop",
    value: function stop() {
      // There is no way to clear the emitter so instead we're creating a new one
      this.emitter = mitt();
    }
  }]);

  return Subscriptions;
}();

export { Subscriptions as default };