import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { Identifiers } from '../index';
import Storage from '../storage';
import { uuidv4 } from './util';

var Anonymous = /*#__PURE__*/function () {
  function Anonymous() {
    _classCallCheck(this, Anonymous);
  }

  _createClass(Anonymous, null, [{
    key: "processAnonymousUser",
    value: function processAnonymousUser(featureFlagUser) {
      var identifier = featureFlagUser.identifier;

      if (identifier) {
        return _objectSpread(_objectSpread({}, featureFlagUser), {}, {
          identifier: identifier
        });
      }

      identifier = {
        type: Identifiers.FF_CLIENT_ANONYMOUS_ID,
        value: Anonymous.generateAnonymousId()
      };
      return _objectSpread(_objectSpread({}, featureFlagUser), {}, {
        isAnonymous: true,
        identifier: identifier
      });
    }
  }, {
    key: "generateAnonymousId",
    value: function generateAnonymousId() {
      var storedAnonymousId = Storage.getAnonymousId();

      if (storedAnonymousId) {
        return storedAnonymousId;
      }

      var anonymousId = uuidv4();
      Storage.setAnonymousId(anonymousId);
      return anonymousId;
    }
  }]);

  return Anonymous;
}();

export { Anonymous as default };