import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import Storage from '../storage';
import { version } from '../util/version';

var MetadataManager = /*#__PURE__*/function () {
  function MetadataManager(pollingConfig) {
    _classCallCheck(this, MetadataManager);

    this.pollingSeconds = pollingConfig.interval / 1000;
  }

  _createClass(MetadataManager, [{
    key: "updateClientCauseReason",
    value: function updateClientCauseReason(reason) {
      this.clientCauseReason = reason;
    }
  }, {
    key: "updateClientUserState",
    value: function updateClientUserState(state) {
      this.clientUserState = state;
    }
  }, {
    key: "get",
    value: function get() {
      var metadata = {
        client: {
          name: 'feature-flag-web-client',
          version: version
        },
        config: {
          pollingSeconds: this.pollingSeconds
        },
        state: {
          // Need to cast VisibilityState (type) to ClientVisibilityState (enum)
          visibility: document.visibilityState,
          storage: Storage.getStorageStatus(),
          userContext: this.clientUserState,
          cause: this.clientCauseReason
        }
      };
      return metadata;
    }
  }]);

  return MetadataManager;
}();

export { MetadataManager as default };