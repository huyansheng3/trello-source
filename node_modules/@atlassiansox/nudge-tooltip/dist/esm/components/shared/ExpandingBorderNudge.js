import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject;

import React, { forwardRef } from 'react';
import styled from 'styled-components';
var NudgePulse = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: block;\n  position: relative;\n  outline: none;\n  z-index: 0;\n\n  & > * {\n    outline: none;\n  }\n\n  --elWidthBase: ", ";\n  --elBorderBase: ", ";\n  --animationDuration: ", ";\n  --elWidth: calc(var(--elWidthBase) * 1px);\n  --elBorder: calc(var(--elBorderBase) * 1px);\n  --elWithBordersBase: calc(var(--elWidthBase) + 2 * var(--elBorderBase));\n  --elWithBorders: calc(var(--elWithBordersBase) * 1px);\n  --elScaleFactor: calc(var(--elWithBordersBase) / var(--elWidthBase));\n  --elBorderOffset: calc(var(--elBorder));\n\n  @keyframes pulseAnimation {\n    0% {\n      transform: scale(1);\n      fill: rgba(255, 255, 255, 1);\n    }\n    67% {\n      transform: scale(var(--elScaleFactor));\n      fill: rgba(255, 255, 255, 0.6);\n    }\n    100% {\n      transform: scale(var(--elScaleFactor));\n      fill: rgba(255, 255, 255, 0);\n    }\n  }\n\n  #pulsing-borders {\n    top: calc(var(--elBorderOffset) * -1);\n    left: calc(var(--elBorderOffset) * -1);\n    z-index: -1;\n    position: absolute;\n    fill: transparent;\n\n    opacity: ", ";\n    transition: opacity 0.24s ease;\n  }\n  #visible {\n    fill: white;\n  }\n\n  #invisible {\n    fill: black;\n  }\n\n  #pulse-rect {\n    fill: white;\n    transform-origin: center;\n    animation: ", ";\n  }\n\n  #border-rect {\n    fill: transparent;\n    stroke: white;\n    stroke-width: 1;\n  }\n\n  #pulsing-borders,\n  #visible,\n  #border-elements {\n    width: var(--elWithBorders);\n    height: var(--elWithBorders);\n    x: 0;\n    y: 0;\n  }\n\n  #invisible,\n  #pulse-rect,\n  #border-rect {\n    width: var(--elWidth);\n    height: var(--elWidth);\n    x: var(--elBorderOffset);\n    y: var(--elBorderOffset);\n  }\n"])), function (_ref) {
  var elWidth = _ref.elWidth;
  return elWidth;
}, function (_ref2) {
  var elBorder = _ref2.elBorder;
  return elBorder;
}, function (_ref3) {
  var animationDuration = _ref3.animationDuration;
  return "".concat(animationDuration, "s");
}, function (_ref4) {
  var hp = _ref4.hasPulse;
  return hp ? 1 : 0;
}, function (_ref5) {
  var hasPulse = _ref5.hasPulse;
  return hasPulse ? 'pulseAnimation var(--animationDuration) ease-out infinite' : 'none';
});
export var ExpandingBorderNudge = /*#__PURE__*/forwardRef(function (_ref6, ref) {
  var children = _ref6.children,
      hasPulse = _ref6.hasPulse,
      onClickCapture = _ref6.onClickCapture,
      onMouseEnter = _ref6.onMouseEnter;
  // Modify to suit your needs
  var elWidth = 32;
  var elBorder = 4;
  var totalWidth = elWidth + 2 * elBorder;
  var animationDuration = 1.5;
  var borderRadius = 3;
  var pulseBorderRadius = 5;
  return /*#__PURE__*/React.createElement(NudgePulse, {
    elWidth: elWidth,
    elBorder: elBorder,
    animationDuration: animationDuration,
    hasPulse: hasPulse,
    onClickCapture: onClickCapture,
    onMouseEnter: onMouseEnter,
    innerRef: ref
  }, children, /*#__PURE__*/React.createElement("svg", {
    id: "pulsing-borders",
    viewBox: "0 0 ".concat(totalWidth, " ").concat(totalWidth)
  }, /*#__PURE__*/React.createElement("mask", {
    id: "border-mask"
  }, /*#__PURE__*/React.createElement("rect", {
    id: "visible",
    rx: pulseBorderRadius
  }), /*#__PURE__*/React.createElement("rect", {
    id: "invisible",
    rx: borderRadius
  })), /*#__PURE__*/React.createElement("g", {
    id: "border-elements",
    mask: "url(#border-mask)"
  }, /*#__PURE__*/React.createElement("rect", {
    id: "pulse-rect",
    rx: pulseBorderRadius
  }), /*#__PURE__*/React.createElement("rect", {
    id: "border-rect",
    rx: borderRadius
  }))));
});