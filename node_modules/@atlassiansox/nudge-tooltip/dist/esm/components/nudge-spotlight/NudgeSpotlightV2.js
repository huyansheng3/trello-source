import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { Fragment, useRef, useCallback, useState, useMemo, useEffect } from 'react';
import { SpotlightCard } from '@atlaskit/onboarding';
import { DefaultNudge } from '../shared/DefaultNudge';
import Portal from '@atlaskit/portal';
import { Popper } from '@atlaskit/popper';
import { bind } from 'bind-event-listener';
import { withAnalyticsContext, withAnalyticsEvents } from '@atlaskit/analytics-next';
import { onRenderPayload, onShowPayload, onHidePayload, onClickPayload, onOutsideClickPayload } from './analyticPayloads';
import { SpotlightContainer } from './styled';

var RelayFuncToParent = function RelayFuncToParent(_ref) {
  var fn = _ref.fn,
      relay = _ref.relay;
  useEffect(function () {
    relay(function () {
      return fn;
    });
  }, [fn, relay]);
  return null;
};

export var NudgeSpotlight = function NudgeSpotlight(_ref2) {
  var externalHidden = _ref2.hidden,
      setHidden = _ref2.setHidden,
      _ref2$hideNudgeOnClic = _ref2.hideNudgeOnClick,
      hideNudgeOnClick = _ref2$hideNudgeOnClic === void 0 ? true : _ref2$hideNudgeOnClic,
      _ref2$hideSpotlightOn = _ref2.hideSpotlightOnOutsideClick,
      hideSpotlightOnOutsideClick = _ref2$hideSpotlightOn === void 0 ? true : _ref2$hideSpotlightOn,
      _ref2$concealSpotligh = _ref2.concealSpotlightOnReferenceHidden,
      concealSpotlightOnReferenceHidden = _ref2$concealSpotligh === void 0 ? false : _ref2$concealSpotligh,
      _ref2$autoShow = _ref2.autoShow,
      autoShow = _ref2$autoShow === void 0 ? true : _ref2$autoShow,
      children = _ref2.children,
      content = _ref2.content,
      _ref2$spotlight = _ref2.spotlight,
      Spotlight = _ref2$spotlight === void 0 ? SpotlightCard : _ref2$spotlight,
      _ref2$nudge = _ref2.nudge,
      Nudge = _ref2$nudge === void 0 ? DefaultNudge : _ref2$nudge,
      _ref2$position = _ref2.position,
      position = _ref2$position === void 0 ? 'bottom' : _ref2$position,
      offset = _ref2.offset,
      _ref2$zIndex = _ref2.zIndex,
      zIndex = _ref2$zIndex === void 0 ? 800 : _ref2$zIndex,
      onRender = _ref2.onRender,
      onShow = _ref2.onShow,
      onHide = _ref2.onHide,
      onClick = _ref2.onClick,
      onOutsideClick = _ref2.onOutsideClick,
      createAnalyticsEvent = _ref2.createAnalyticsEvent,
      pulseColor = _ref2.pulseColor,
      pulseShadowColor = _ref2.pulseShadowColor,
      pulseBorderRadius = _ref2.pulseBorderRadius,
      registerUpdateFn = _ref2.registerUpdateFn,
      registerToggleCardFn = _ref2.registerToggleCardFn,
      spotlightCardProps = _objectWithoutProperties(_ref2, ["hidden", "setHidden", "hideNudgeOnClick", "hideSpotlightOnOutsideClick", "concealSpotlightOnReferenceHidden", "autoShow", "children", "content", "spotlight", "nudge", "position", "offset", "zIndex", "onRender", "onShow", "onHide", "onClick", "onOutsideClick", "createAnalyticsEvent", "pulseColor", "pulseShadowColor", "pulseBorderRadius", "registerUpdateFn", "registerToggleCardFn"]);

  // Put all listeners inside a ref to avoid misfiring events
  // When the listener functions themselves change.
  var handlers = useRef();
  handlers.current = {
    onRender: onRender,
    onHide: onHide,
    onShow: onShow,
    onClick: onClick,
    onOutsideClick: onOutsideClick
  };
  var nudgeRef = useRef(null);
  var spotlightRef = useRef(null);
  var cardConfig = useMemo(function () {
    return Spotlight === SpotlightCard ? _objectSpread(_objectSpread({}, spotlightCardProps), {}, {
      children: content
    }) : {};
  }, [Spotlight, spotlightCardProps, content]);
  var showNudge = !externalHidden;

  var _useState = useState(autoShow),
      _useState2 = _slicedToArray(_useState, 2),
      canShowSpotlight = _useState2[0],
      setCanShowSpotlight = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      showSpotlight = _useState4[0],
      setShowSpotlight = _useState4[1];

  var markReadyToShow = useCallback(function () {
    return setCanShowSpotlight(true);
  }, []);
  var onTargetClick = useCallback(function (event) {
    if (!externalHidden) {
      var _handlers$current, _handlers$current$onC;

      if (hideNudgeOnClick) {
        setHidden(event);
      }

      (_handlers$current = handlers.current) === null || _handlers$current === void 0 ? void 0 : (_handlers$current$onC = _handlers$current.onClick) === null || _handlers$current$onC === void 0 ? void 0 : _handlers$current$onC.call(_handlers$current);
    }
  }, [externalHidden, hideNudgeOnClick, setHidden, handlers]); // Provide update position function to outside world if requested

  var _useState5 = useState(),
      _useState6 = _slicedToArray(_useState5, 2),
      updateFn = _useState6[0],
      setUpdateFn = _useState6[1];

  useEffect(function () {
    updateFn && (registerUpdateFn === null || registerUpdateFn === void 0 ? void 0 : registerUpdateFn(function () {
      return updateFn;
    }));
  }, [updateFn, registerUpdateFn]); // Provide toggle function to manually show/hide card when necessary

  useEffect(function () {
    setCanShowSpotlight && (registerToggleCardFn === null || registerToggleCardFn === void 0 ? void 0 : registerToggleCardFn(function () {
      return setCanShowSpotlight;
    }));
  }, [setCanShowSpotlight, registerToggleCardFn]); // Effect for show/hide the spotlight

  useEffect(function () {
    setShowSpotlight(showNudge && canShowSpotlight);
  }, [showNudge, canShowSpotlight]); // Effect for onRender and onHide

  useEffect(function () {
    if (!externalHidden) {
      var _handlers$current2, _handlers$current2$on;

      (_handlers$current2 = handlers.current) === null || _handlers$current2 === void 0 ? void 0 : (_handlers$current2$on = _handlers$current2.onRender) === null || _handlers$current2$on === void 0 ? void 0 : _handlers$current2$on.call(_handlers$current2);
      return function () {
        var _handlers$current3, _handlers$current3$on;

        return (_handlers$current3 = handlers.current) === null || _handlers$current3 === void 0 ? void 0 : (_handlers$current3$on = _handlers$current3.onHide) === null || _handlers$current3$on === void 0 ? void 0 : _handlers$current3$on.call(_handlers$current3);
      };
    }
  }, [externalHidden, handlers]); // Effect for onShow

  useEffect(function () {
    if (showSpotlight) {
      var _handlers$current4, _handlers$current4$on;

      (_handlers$current4 = handlers.current) === null || _handlers$current4 === void 0 ? void 0 : (_handlers$current4$on = _handlers$current4.onShow) === null || _handlers$current4$on === void 0 ? void 0 : _handlers$current4$on.call(_handlers$current4);
    }
  }, [showSpotlight, handlers]); // Effect to reset autoShow when hidden

  useEffect(function () {
    if (externalHidden) {
      setCanShowSpotlight(autoShow);
    }
  }, [externalHidden, autoShow]); // Effect to hide spotlight on outside click

  useEffect(function () {
    var unbind;
    var timeout;

    if (showSpotlight && hideSpotlightOnOutsideClick) {
      timeout = setTimeout(function () {
        unbind = bind(window, {
          type: 'click',
          listener: function listener(event) {
            if (nudgeRef.current && spotlightRef.current && event.target instanceof Node && !nudgeRef.current.contains(event.target) && !spotlightRef.current.contains(event.target)) {
              var _handlers$current5, _handlers$current5$on, _unbind;

              (_handlers$current5 = handlers.current) === null || _handlers$current5 === void 0 ? void 0 : (_handlers$current5$on = _handlers$current5.onOutsideClick) === null || _handlers$current5$on === void 0 ? void 0 : _handlers$current5$on.call(_handlers$current5);
              setCanShowSpotlight(false);
              (_unbind = unbind) === null || _unbind === void 0 ? void 0 : _unbind();
            }
          },
          options: {
            capture: true,
            passive: true
          }
        });
      });
    }

    return function () {
      var _unbind2;

      (_unbind2 = unbind) === null || _unbind2 === void 0 ? void 0 : _unbind2();
      clearTimeout(timeout);
    };
  }, [showSpotlight, hideSpotlightOnOutsideClick, setHidden, handlers]);
  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Nudge, {
    ref: nudgeRef,
    hasPulse: showNudge,
    onClickCapture: onTargetClick,
    onMouseEnter: markReadyToShow,
    pulseColor: pulseColor,
    pulseShadowColor: pulseShadowColor,
    pulseBorderRadius: pulseBorderRadius
  }, children), showSpotlight && /*#__PURE__*/React.createElement(Portal, {
    zIndex: zIndex
  }, /*#__PURE__*/React.createElement(Popper, {
    placement: position,
    referenceElement: nudgeRef.current || undefined,
    offset: offset
  }, function (_ref3) {
    var ref = _ref3.ref,
        style = _ref3.style,
        forceUpdate = _ref3.forceUpdate,
        isReferenceHidden = _ref3.isReferenceHidden;
    return /*#__PURE__*/React.createElement(SpotlightContainer, {
      innerRef: ref,
      style: _objectSpread(_objectSpread({}, style), concealSpotlightOnReferenceHidden && isReferenceHidden ? {
        display: 'none'
      } : {})
    }, /*#__PURE__*/React.createElement(RelayFuncToParent, {
      fn: forceUpdate,
      relay: setUpdateFn
    }), /*#__PURE__*/React.createElement(Spotlight, _extends({}, cardConfig, {
      ref: spotlightRef
    })));
  })));
};
export default withAnalyticsContext({
  componentName: 'NudgeSpotlight'
})(withAnalyticsEvents({
  onRender: _objectSpread({}, onRenderPayload),
  onShow: _objectSpread({}, onShowPayload),
  onHide: _objectSpread({}, onHidePayload),
  onClick: _objectSpread({}, onClickPayload),
  onOutsideClick: _objectSpread({}, onOutsideClickPayload)
})(NudgeSpotlight));