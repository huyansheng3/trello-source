import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useEffect, useState } from 'react';
import browserInteractionTime from 'browser-interaction-time';
export var useBrowserInteractionTime = function useBrowserInteractionTime(threshold) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      idle = _useState2[0],
      setIdle = _useState2[1];

  useEffect(function () {
    var timer = new browserInteractionTime({
      idleTimeoutMs: threshold,
      stopTimerOnTabchange: false,
      browserTabActiveCallbacks: [function () {
        setIdle(false);
      }],
      browserTabInactiveCallbacks: [function () {
        setIdle(true);
      }],
      idleCallbacks: [function () {
        setIdle(true);
      }],
      activeCallbacks: [function () {
        setIdle(false);
      }]
    });
    timer.startTimer();
  }, [threshold]);
  return {
    idle: idle
  };
};