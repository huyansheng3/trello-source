import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

function fetchRetry(_x) {
  return _fetchRetry.apply(this, arguments);
}

function _fetchRetry() {
  _fetchRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {
    var options,
        retries,
        backoff,
        retryCodes,
        response,
        _args2 = arguments;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
            retries = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 5;
            backoff = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : 300;
            retryCodes = [408, 500, 502, 503, 504, 522, 524];
            _context2.next = 6;
            return fetch(url, options);

          case 6:
            response = _context2.sent;

            if (!(response.ok || response.status === 401)) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt("return", response);

          case 9:
            if (retries > 0 && retryCodes.includes(response.status)) {
              setTimeout(function () {
                return fetchRetry(url, options, retries - 1, backoff * 2);
              }, backoff);
            }

            return _context2.abrupt("return", Promise.reject('retried for 5 times, stopped to call api'));

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _fetchRetry.apply(this, arguments);
}

export var postHeartbeat = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpoint, onAuthenticationFailed) {
    var response;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return fetchRetry(endpoint, {
              method: 'POST',
              credentials: 'include',
              headers: {
                'Content-Type': 'application/json'
              }
            });

          case 3:
            response = _context.sent;

            if (!(response && response.ok)) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", response.json());

          case 6:
            if (!(response.status === 401 && onAuthenticationFailed)) {
              _context.next = 9;
              break;
            }

            onAuthenticationFailed();
            return _context.abrupt("return");

          case 9:
            _context.next = 14;
            break;

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](0);
            console.warn(_context.t0);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 11]]);
  }));

  return function postHeartbeat(_x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();