import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { retryOnException } from './retry-operation';
export var FETCH_ERROR_NAME = 'FetchError';
export function enrichFetchError(error, status) {
  return {
    name: FETCH_ERROR_NAME,
    message: error.message,
    stack: error.stack,
    status: status
  };
}

var extraJsonFromResponse = function extraJsonFromResponse(response) {
  if (response.ok) {
    return response.json();
  }

  throw enrichFetchError(new Error("Unable to fetch ".concat(response.url, " ").concat(response.status, " ").concat(response.statusText)), response.status);
};

export var fetchJson = function fetchJson(url, init) {
  return fetch(url, _objectSpread({
    credentials: 'include'
  }, init)).then(extraJsonFromResponse);
};
export var fetchJsonWithNetworkRetries = function fetchJsonWithNetworkRetries(url, retryConfig, init) {
  return retryOnException(function () {
    return fetch(url, _objectSpread({
      credentials: 'include'
    }, init));
  }, retryConfig).then(extraJsonFromResponse);
};
export var postJson = function postJson(url, data) {
  return fetchJson(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  });
};