import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
export var wait = function wait(ms) {
  return new Promise(function (resolve) {
    setTimeout(resolve, ms);
  });
};
export var retryOnException = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(invokeOperation, config) {
    var nextMSInterval, error;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            nextMSInterval = 0;
            error = new Error('No calls made');

          case 2:
            if (!(nextMSInterval !== undefined)) {
              _context.next = 18;
              break;
            }

            _context.prev = 3;

            if (!(nextMSInterval > 0)) {
              _context.next = 7;
              break;
            }

            _context.next = 7;
            return wait(nextMSInterval);

          case 7:
            _context.next = 9;
            return invokeOperation();

          case 9:
            return _context.abrupt("return", _context.sent);

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](3);
            error = _context.t0;
            nextMSInterval = config.intervalsMS.shift();

          case 16:
            _context.next = 2;
            break;

          case 18:
            throw error;

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 12]]);
  }));

  return function retryOnException(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();