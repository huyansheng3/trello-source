import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { NavigationAnalyticsContext } from '@atlaskit/analytics-namespaced-context';
import { createAndFireEvent, withAnalyticsEvents, useAnalyticsEvents } from '@atlaskit/analytics-next';
import { UI_EVENT_TYPE, OPERATIONAL_EVENT_TYPE } from '@atlaskit/analytics-gas-types';
import { hasLoaded, Status } from '../../providers/as-data-provider';
import { UserSiteDataError } from '../errors/user-site-data-error';
import { getMetricBucket, RenderTrackerBuckets, ImageLoadTrackerBuckets } from '../get-metric-bucket';
import { performanceNow } from '../performance-now';
export var NAVIGATION_CHANNEL = 'navigation';
export var SWITCHER_SUBJECT = 'atlassianSwitcher';
export var SWITCHER_ITEM_SUBJECT = 'atlassianSwitcherItem';
export var SWITCHER_CHILD_ITEM_SUBJECT = 'atlassianSwitcherChildItem';
export var SWITCHER_ITEM_EXPAND_SUBJECT = 'atlassianSwitcherItemExpand';
export var SWITCHER_COMPONENT = 'atlassianSwitcher';
export var SWITCHER_SOURCE = 'atlassianSwitcher';
export var TRIGGER_COMPONENT = 'atlassianSwitcherPrefetch';
export var TRIGGER_SUBJECT = 'atlassianSwitcherPrefetch';
export var SWITCHER_TRELLO_SIGN_UP_TO_JOIN_SUBJECT = 'atlassianSwitcherTrelloSignUpToJoin';
export var SWITCHER_TRELLO_HAS_NEW_FRIENDS_SUBJECT = 'atlassianSwitcherTrelloHasNewFriends';
export var SWITCHER_TRELLO_HAS_NEW_FRIENDS_DISMISS_SUBJECT = 'atlassianSwitcherTrelloHasNewFriendsDismiss';
var SWITCHER_JOINABLE_SITES = 'atlassianSwitcherJoinableSites';
var SWITCHER_DISCOVER_SECTION = 'atlassianSwitcherDiscoverMore';
var SWITCHER_RECENT_CONTAINERS = 'atlassianSwitcherRecentContainers';
var SWITCHER_CUSTOM_LINKS = 'atlassianSwitcherCustomLinks';
var SWITCHER_REMOTE_ICON = 'atlassianSwitcherRemoteIcon';
var RENDERED_ACTION = 'rendered';
var NOT_RENDERED_ACTION = 'not_rendered';
var VIEWED_ACTION = 'viewed';
var LOADED_ACTION = 'loaded';
var NOT_LOADED_ACTION = 'not_loaded';
export var createAndFireNavigationEvent = createAndFireEvent(NAVIGATION_CHANNEL);
export var analyticsAttributes = function analyticsAttributes(attributes) {
  return {
    attributes: attributes
  };
};
export var withAnalyticsContextData = function withAnalyticsContextData(mapPropsToContext) {
  return function (WrappedComponent) {
    return function (props) {
      return /*#__PURE__*/React.createElement(NavigationAnalyticsContext, {
        data: mapPropsToContext(props)
      }, /*#__PURE__*/React.createElement(WrappedComponent, props));
    };
  };
};

var isValidDuration = function isValidDuration(duration) {
  return duration !== null && duration !== undefined && duration >= 0;
};

export var RenderTracker = withAnalyticsEvents({
  onRender: function onRender(createAnalyticsEvent, props) {
    var _props$data;

    var duration = (_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.duration;
    return createAnalyticsEvent({
      eventType: OPERATIONAL_EVENT_TYPE,
      action: RENDERED_ACTION,
      actionSubject: props.subject,
      attributes: _objectSpread(_objectSpread({}, props.data), isValidDuration(duration) && {
        bucket: getMetricBucket(duration, RenderTrackerBuckets)
      })
    }).fire(NAVIGATION_CHANNEL);
  }
})( /*#__PURE__*/function (_React$Component) {
  _inherits(_class, _React$Component);

  var _super = _createSuper(_class);

  function _class() {
    _classCallCheck(this, _class);

    return _super.apply(this, arguments);
  }

  _createClass(_class, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onRender();
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return _class;
}(React.Component));
export var NotRenderedTracker = withAnalyticsEvents({
  onRender: function onRender(createAnalyticsEvent, props) {
    return createAnalyticsEvent({
      eventType: OPERATIONAL_EVENT_TYPE,
      action: NOT_RENDERED_ACTION,
      actionSubject: props.subject,
      attributes: props.data
    }).fire(NAVIGATION_CHANNEL);
  }
})( /*#__PURE__*/function (_React$Component2) {
  _inherits(_class2, _React$Component2);

  var _super2 = _createSuper(_class2);

  function _class2() {
    _classCallCheck(this, _class2);

    return _super2.apply(this, arguments);
  }

  _createClass(_class2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onRender();
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return _class2;
}(React.Component));
export var ViewedTracker = withAnalyticsEvents({
  onRender: function onRender(createAnalyticsEvent, props) {
    return createAnalyticsEvent({
      eventType: UI_EVENT_TYPE,
      action: VIEWED_ACTION,
      actionSubject: props.subject,
      attributes: props.data
    }).fire(NAVIGATION_CHANNEL);
  }
})( /*#__PURE__*/function (_React$Component3) {
  _inherits(_class3, _React$Component3);

  var _super3 = _createSuper(_class3);

  function _class3() {
    _classCallCheck(this, _class3);

    return _super3.apply(this, arguments);
  }

  _createClass(_class3, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.onRender();
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return _class3;
}(React.Component));
export var ImageLoadedTracker = function ImageLoadedTracker(props) {
  var onLoad = props.onLoad,
      onError = props.onError,
      imgProps = _objectWithoutProperties(props, ["onLoad", "onError"]);

  var _useAnalyticsEvents = useAnalyticsEvents(),
      createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;

  var imageMountedAt = React.useRef(performanceNow());
  var analyticsHandler = React.useCallback(function (actionType, event, action) {
    var duration = performanceNow() - imageMountedAt.current;
    createAnalyticsEvent({
      action: actionType,
      actionSubject: SWITCHER_REMOTE_ICON,
      attributes: _objectSpread(_objectSpread({}, isValidDuration(duration) && {
        bucket: getMetricBucket(duration, ImageLoadTrackerBuckets),
        duration: duration
      }), {}, {
        src: imgProps.src
      }),
      eventType: OPERATIONAL_EVENT_TYPE
    }).fire(NAVIGATION_CHANNEL);

    if (action) {
      action(event);
    }
  }, [createAnalyticsEvent, imageMountedAt, imgProps.src]);
  var onErrorAnalyticsHandler = React.useCallback(function (errorEvent) {
    analyticsHandler(NOT_LOADED_ACTION, errorEvent, onError);
  }, [analyticsHandler, onError]);
  var onLoadAnalyticsHandler = React.useCallback(function (loadEvent) {
    analyticsHandler(LOADED_ACTION, loadEvent, onLoad);
  }, [analyticsHandler, onLoad]);
  return /*#__PURE__*/React.createElement("img", _extends({}, imgProps, {
    onError: onErrorAnalyticsHandler,
    onLoad: onLoadAnalyticsHandler
  }));
};

var renderTrackerWithReason = function renderTrackerWithReason(_ref) {
  var subject = _ref.subject,
      notRenderedReason = _ref.notRenderedReason,
      emptyRenderExpected = _ref.emptyRenderExpected,
      data = _ref.data;

  if (notRenderedReason) {
    return /*#__PURE__*/React.createElement(NotRenderedTracker, {
      subject: subject,
      data: _objectSpread(_objectSpread({}, data), {}, {
        notRenderedReason: notRenderedReason
      })
    });
  }

  return /*#__PURE__*/React.createElement(RenderTracker, {
    subject: subject,
    data: _objectSpread(_objectSpread({}, data), {}, {
      emptyRender: emptyRenderExpected
    })
  });
};

var renderTracker = function renderTracker(_ref2) {
  var subject = _ref2.subject,
      providerFailed = _ref2.providerFailed,
      emptyRenderExpected = _ref2.emptyRenderExpected,
      linksRendered = _ref2.linksRendered,
      data = _ref2.data;

  if (providerFailed || linksRendered.length === 0 && !emptyRenderExpected) {
    return /*#__PURE__*/React.createElement(NotRenderedTracker, {
      subject: subject,
      data: _objectSpread(_objectSpread({}, data), {}, {
        providerFailed: providerFailed
      })
    });
  }

  return /*#__PURE__*/React.createElement(RenderTracker, {
    subject: subject,
    data: _objectSpread(_objectSpread({}, data), {}, {
      emptyRender: emptyRenderExpected
    })
  });
};

export var getJoinableSitesRenderTracker = function getJoinableSitesRenderTracker(providerResult, joinableSiteLinks, data) {
  if (!hasLoaded(providerResult)) {
    return null;
  } // The render is considered failed when either the provider failed, or the provider returned a non-empty result but nothing was rendered


  var emptyRenderExpected = Boolean(providerResult.data && providerResult.data.sites.length === 0);
  return renderTracker({
    subject: SWITCHER_JOINABLE_SITES,
    providerFailed: providerResult.data === null,
    emptyRenderExpected: emptyRenderExpected,
    linksRendered: joinableSiteLinks,
    data: data
  });
};
export var getDiscoverSectionRenderTracker = function getDiscoverSectionRenderTracker(xflowProviderResult, provisionedProductsProviderResult, joinableSitesProviderResult, productRecommendationsProviderResult, suggestedProductLinks, data) {
  var hasProviderNotReturnedExpectedData = function hasProviderNotReturnedExpectedData(provider) {
    return provider.data === null || provider.status === Status.ERROR;
  };

  var collectResults = function collectResults(provider) {
    return {
      failed: hasProviderNotReturnedExpectedData(provider),
      loaded: hasLoaded(provider)
    };
  };

  var emptyRenderExpected = suggestedProductLinks.length === 0;
  var results = {
    xflow: collectResults(xflowProviderResult),
    provisionedProducts: collectResults(provisionedProductsProviderResult),
    joinableSites: collectResults(joinableSitesProviderResult),
    productRecommendations: collectResults(productRecommendationsProviderResult)
  };
  var providersLoaded = results.joinableSites.loaded && results.provisionedProducts.loaded && results.xflow.loaded && results.productRecommendations.loaded;

  if (!providersLoaded) {
    return null;
  }

  var didProviderFail = results.joinableSites.failed || results.provisionedProducts.failed || results.xflow.failed || results.productRecommendations.failed;
  /**
   * Stop tracking the SLO the moment one of the providers fail.
   */

  if (didProviderFail) {
    return renderTracker({
      subject: SWITCHER_DISCOVER_SECTION,
      providerFailed: true,
      emptyRenderExpected: emptyRenderExpected,
      linksRendered: suggestedProductLinks,
      data: _objectSpread(_objectSpread({}, data), {}, {
        providerResults: {
          joinableSites: joinableSitesProviderResult.status,
          joinableSitesFailed: results.joinableSites.failed,
          provisionedProducts: provisionedProductsProviderResult.status,
          provisionedProductsFailed: results.provisionedProducts.failed,
          xflow: xflowProviderResult.status,
          xflowFailed: results.xflow.failed,
          productRecommendations: productRecommendationsProviderResult.status,
          productRecommendationsFailed: results.productRecommendations.failed
        }
      })
    });
  }

  return renderTracker({
    subject: SWITCHER_DISCOVER_SECTION,
    providerFailed: false,
    emptyRenderExpected: emptyRenderExpected,
    linksRendered: suggestedProductLinks,
    data: data
  });
};
export var getRecentContainersRenderTracker = function getRecentContainersRenderTracker(isEnabled, cgRecentContainersProviderResult, userSiteDataProviderResult, recentLinks, data) {
  if (!isEnabled) {
    return null;
  }

  var providerFailed = cgRecentContainersProviderResult.data === null || userSiteDataProviderResult.data === null;
  var emptyRenderExpected = Boolean(cgRecentContainersProviderResult.data && cgRecentContainersProviderResult.data.collaborationGraphEntities && cgRecentContainersProviderResult.data.collaborationGraphEntities.length === 0);
  return renderTracker({
    subject: SWITCHER_RECENT_CONTAINERS,
    providerFailed: providerFailed,
    emptyRenderExpected: emptyRenderExpected,
    linksRendered: recentLinks,
    data: data
  });
};
export var getCustomLinksRenderTracker = function getCustomLinksRenderTracker(customLinksProviderResult, userSiteDataProviderResult, customLinks, data) {
  // The render is only considered failed when one of the providers failed, and empty render is a valid case
  if (!customLinksProviderResult) {
    return;
  }

  var emptyRenderExpected = customLinks.length === 0;

  function getNotRenderedReason() {
    if ((customLinksProviderResult === null || customLinksProviderResult === void 0 ? void 0 : customLinksProviderResult.status) === Status.ERROR) {
      return 'custom_links_api_error';
    }

    var error = userSiteDataProviderResult.error;

    if (!error) {
      return null;
    }

    if (error instanceof UserSiteDataError) {
      return error.reason;
    } else {
      return 'usd_unknown';
    }
  }

  var notRenderedReason = getNotRenderedReason();
  return renderTrackerWithReason({
    subject: SWITCHER_CUSTOM_LINKS,
    notRenderedReason: notRenderedReason,
    emptyRenderExpected: emptyRenderExpected,
    data: data
  });
};
/**
 *
 * ***IMPORTANT*** DO NOT send PD / PII or any sensitive data.
 * This function defines analytic event attributes.
 *
 * @param groupIndex
 * @param id
 * @param type
 * @param productType
 * @param extraAttributes
 */

export var getItemAnalyticsContext = function getItemAnalyticsContext(groupIndex, id, type, productType, extraAttributes) {
  return _objectSpread({}, analyticsAttributes(_objectSpread({
    groupIndex: groupIndex,
    itemId: id,
    itemType: type,
    productType: productType
  }, extraAttributes)));
};
export { withAnalyticsEvents, NavigationAnalyticsContext, OPERATIONAL_EVENT_TYPE, UI_EVENT_TYPE };