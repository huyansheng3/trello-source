import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { NAVIGATION_CHANNEL, OPERATIONAL_EVENT_TYPE, withAnalyticsEvents } from '../utils/analytics';
import { errorToReason } from '../utils/error-to-reason';
var DATA_PROVIDER_SUBJECT = 'atlassianSwitcherDataProvider';
export var Status;

(function (Status) {
  Status["LOADING"] = "loading";
  Status["COMPLETE"] = "complete";
  Status["ERROR"] = "error";
})(Status || (Status = {}));

export var createResultComplete = function createResultComplete(data) {
  return {
    status: Status.COMPLETE,
    data: data
  };
};
export var isComplete = function isComplete(result) {
  return result.status === Status.COMPLETE;
};
export var isError = function isError(result) {
  return result.status === Status.ERROR;
};
export var isLoading = function isLoading(result) {
  return result.status === Status.LOADING;
};
export var hasLoaded = function hasLoaded(result) {
  return result.status !== Status.LOADING;
};
export default function (name, mapPropsToPromise, mapPropsToInitialValue) {
  var getInitialState = function getInitialState(props) {
    if (mapPropsToInitialValue) {
      var initialValue = mapPropsToInitialValue(props);

      if (initialValue !== undefined) {
        return {
          status: Status.COMPLETE,
          data: initialValue
        };
      }
    }

    return {
      status: Status.LOADING,
      data: null
    };
  };

  var DataProvider = /*#__PURE__*/function (_React$Component) {
    _inherits(DataProvider, _React$Component);

    var _super = _createSuper(DataProvider);

    function DataProvider() {
      var _this;

      _classCallCheck(this, DataProvider);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "acceptResults", true);

      _defineProperty(_assertThisInitialized(_this), "state", getInitialState(_this.props));

      _defineProperty(_assertThisInitialized(_this), "fireOperationalEvent", function (payload) {
        if (_this.props.createAnalyticsEvent) {
          _this.props.createAnalyticsEvent(_objectSpread(_objectSpread({
            eventType: OPERATIONAL_EVENT_TYPE,
            actionSubject: DATA_PROVIDER_SUBJECT
          }, payload), {}, {
            attributes: _objectSpread(_objectSpread({}, payload.attributes), {}, {
              outdated: !_this.acceptResults
            })
          })).fire(NAVIGATION_CHANNEL);
        }
      });

      return _this;
    }

    _createClass(DataProvider, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        /**
         * Promise resolved after component is unmounted to be ignored
         */
        this.acceptResults = false;
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        mapPropsToPromise(this.props).then(function (result) {
          _this2.onResult(result);
        }).catch(function (error) {
          _this2.onError(error);
        });
      }
    }, {
      key: "onResult",
      value: function onResult(value) {
        if (this.acceptResults) {
          this.setState({
            data: value,
            status: Status.COMPLETE
          });
        }

        this.fireOperationalEvent({
          action: 'receivedResult',
          actionSubjectId: name,
          attributes: {
            provider: name
          }
        });
      }
    }, {
      key: "onError",
      value: function onError(error) {
        /**
         * Do not transition from "complete" state to "error"
         */
        if (this.acceptResults && !isComplete(this.state)) {
          this.setState({
            error: error,
            status: Status.ERROR,
            data: null
          });
        }

        this.fireOperationalEvent({
          action: 'failed',
          actionSubjectId: name,
          attributes: {
            provider: name,
            reason: errorToReason(error)
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children(this.state);
      }
    }]);

    return DataProvider;
  }(React.Component);

  _defineProperty(DataProvider, "displayName", "DataProvider(".concat(name, ")"));

  return withAnalyticsEvents()(DataProvider);
}