import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { createProviderWithCustomFetchData } from './create-data-provider';
import { createIcon, createRemoteIcon, createThemedImageIcon } from '../utils/icon-themes';
import { fetchJsonWithNetworkRetries } from '../utils/fetch';
import { AtlassianIcon, BitbucketIcon, CompassIcon, ConfluenceIcon, JiraServiceManagementIcon, JiraSoftwareIcon, JiraWorkManagementIcon, OpsgenieIcon, StatuspageIcon, TrelloIcon } from '@atlaskit/logo';
import messages from '../utils/messages';
import { FormattedMessage } from '../../ui/primitives';
export var PRODUCT_CONFIGURATION_MAP = {
  BITBUCKET: {
    label: 'Bitbucket',
    key: 'bitbucket',
    Icon: createIcon(BitbucketIcon, {
      size: 'small'
    }),
    href: '/dashboard/overview',
    ordinal: 6
  },
  CONFLUENCE: {
    label: 'Confluence',
    key: 'confluence.ondemand',
    Icon: createIcon(ConfluenceIcon, {
      size: 'small'
    }),
    href: '/wiki',
    ordinal: 3,
    description: /*#__PURE__*/React.createElement(FormattedMessage, messages.productDescriptionConfluence)
  },
  JIRA_BUSINESS: {
    label: 'Jira Core',
    key: 'jira-core.ondemand',
    Icon: createIcon(JiraWorkManagementIcon, {
      size: 'small'
    }),
    href: '/secure/BrowseProjects.jspa?selectedProjectType=business',
    ordinal: 2
  },
  JIRA_WORK_MANAGEMENT: {
    label: 'Jira Work Management',
    key: 'jira-core.ondemand',
    Icon: createIcon(JiraWorkManagementIcon, {
      size: 'small'
    }),
    href: '/secure/BrowseProjects.jspa?selectedProjectType=business',
    ordinal: 2
  },
  JIRA_SOFTWARE: {
    label: 'Jira Software',
    key: 'jira-software.ondemand',
    Icon: createIcon(JiraSoftwareIcon, {
      size: 'small'
    }),
    href: '/secure/BrowseProjects.jspa?selectedProjectType=software',
    ordinal: 0,
    description: /*#__PURE__*/React.createElement(FormattedMessage, messages.productDescriptionJiraSoftware)
  },
  JIRA_SERVICE_DESK: {
    label: 'Jira Service Management',
    key: 'jira-servicedesk.ondemand',
    Icon: createIcon(JiraServiceManagementIcon, {
      size: 'small'
    }),
    href: '/secure/BrowseProjects.jspa?selectedProjectType=service_desk',
    ordinal: 1,
    description: /*#__PURE__*/React.createElement(FormattedMessage, messages.productDescriptionJiraServiceManagement)
  },
  COMPASS: {
    label: 'Compass',
    key: 'compass',
    Icon: createIcon(CompassIcon, {
      size: 'small'
    }),
    href: '/compass',
    ordinal: 4,
    description: /*#__PURE__*/React.createElement(FormattedMessage, messages.productDescriptionCompass)
  },
  TEAM_CENTRAL: {
    label: 'Team Central (Beta)',
    key: 'townsquare',
    Icon: createIcon(AtlassianIcon, {
      size: 'small'
    }),
    href: 'https://team.atlassian.com',
    ordinal: 9
  },
  AVOCADO: {
    label: 'Avocado',
    key: 'avocado',
    Icon: createIcon(AtlassianIcon, {
      size: 'small'
    }),
    href: '',
    ordinal: 10
  },
  OPSGENIE: {
    label: 'Opsgenie',
    key: 'opsgenie',
    Icon: createIcon(OpsgenieIcon, {
      size: 'small'
    }),
    href: 'https://app.opsgenie.com',
    ordinal: 5,
    description: /*#__PURE__*/React.createElement(FormattedMessage, messages.productDescriptionOpsgenie)
  },
  STATUSPAGE: {
    label: 'Statuspage',
    key: 'statuspage',
    Icon: createIcon(StatuspageIcon, {
      size: 'small'
    }),
    href: 'https://statuspage.io',
    ordinal: 7
  },
  TRELLO: {
    label: 'Trello',
    key: 'trello',
    Icon: createIcon(TrelloIcon, {
      size: 'small'
    }),
    href: 'https://trello.com',
    ordinal: 8
  }
};

var defaultResponse = function defaultResponse() {
  return Promise.resolve({
    products: PRODUCT_CONFIGURATION_MAP,
    links: {}
  });
};

var formatLabel = function formatLabel(label) {
  return typeof label === 'string' ? label : /*#__PURE__*/React.createElement(FormattedMessage, label);
};

var formatDescription = function formatDescription(description) {
  return typeof description === 'string' ? description : description ? /*#__PURE__*/React.createElement(FormattedMessage, description) : null;
};

export var DEFAULT_PRODUCT_CONFIGURATION_ENDPOINT = '/gateway/api/available-products/api/product-configuration';
export var createProductConfigurationProvider = function createProductConfigurationProvider(_ref) {
  var _ref$url = _ref.url,
      url = _ref$url === void 0 ? DEFAULT_PRODUCT_CONFIGURATION_ENDPOINT : _ref$url,
      useRemoteProductConfiguration = _ref.useRemoteProductConfiguration;
  return createProviderWithCustomFetchData('productConfiguration', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var response;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!useRemoteProductConfiguration) {
              _context.next = 5;
              break;
            }

            _context.next = 3;
            return fetchJsonWithNetworkRetries(url, {
              intervalsMS: [50, 200, 1000]
            });

          case 3:
            response = _context.sent;
            return _context.abrupt("return", {
              links: Object.entries(response.links).reduce(function (acc, _ref3) {
                var _ref4 = _slicedToArray(_ref3, 2),
                    key = _ref4[0],
                    link = _ref4[1];

                return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, _objectSpread(_objectSpread({}, link), {}, {
                  label: formatLabel(link.label),
                  description: formatDescription(link.description),
                  Icon: createRemoteIcon(link.iconUrl, {
                    primaryColor: 'white'
                  })
                })));
              }, {}),
              products: Object.entries(response.products).reduce(function (acc, _ref5) {
                var _ref6 = _slicedToArray(_ref5, 2),
                    key = _ref6[0],
                    product = _ref6[1];

                return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, _objectSpread(_objectSpread({}, product), {}, {
                  label: formatLabel(product.label),
                  description: formatDescription(product.description),
                  Icon: createThemedImageIcon({
                    default: product.icons.blue,
                    product: product.icons.white
                  })
                })));
              }, {})
            });

          case 5:
            return _context.abrupt("return", defaultResponse());

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
};