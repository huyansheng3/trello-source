import React from 'react';
import { fetchJson, postJson } from '../utils/fetch';
import asDataProvider, { Status } from './as-data-provider';
import { Permissions } from '../../types';
import { withCached } from '../utils/with-cached';
import withHandleOptionalCloudId from './with-handle-optional-cloud-id';

var fetchCollaborationGraphRecentContainers = function fetchCollaborationGraphRecentContainers(_ref) {
  var cloudId = _ref.cloudId;
  return postJson('/gateway/api/collaboration/v1/collaborationgraph/user/container', {
    containerTypes: ['confluenceSpace', 'jiraProject'],
    context: {
      contextType: 'atlassianSwitcher',
      principalId: 'context',
      siteId: cloudId
    },
    expanded: true,
    maxNumberOfResults: 6,
    userId: 'context'
  });
};

var RealCollaborationGraphRecentContainersProvider = asDataProvider('collaborationGraphRecentContainers', fetchCollaborationGraphRecentContainers);
export var emptyCollaborationGraphRecentContainers = {
  status: Status.COMPLETE,
  data: {
    collaborationGraphEntities: []
  }
};
export var nullCollaborationGraphRecentContainers = {
  status: Status.COMPLETE,
  data: {
    collaborationGraphEntities: null
  }
};
export var CollaborationGraphRecentContainersProvider = withHandleOptionalCloudId(function (_ref2) {
  var cloudId = _ref2.cloudId,
      enableRecentContainers = _ref2.enableRecentContainers,
      children = _ref2.children;

  if (enableRecentContainers) {
    return /*#__PURE__*/React.createElement(RealCollaborationGraphRecentContainersProvider, {
      cloudId: cloudId
    }, children);
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, children(emptyCollaborationGraphRecentContainers));
}, emptyCollaborationGraphRecentContainers.data); // Permissions api

var fetchPermission = withCached(function (_ref3) {
  var cloudId = _ref3.cloudId,
      permissionId = _ref3.permissionId;
  return postJson("/gateway/api/permissions/permitted", {
    permissionId: permissionId,
    resourceId: "ari:cloud:platform::site/".concat(cloudId)
  }).then(function (permission) {
    return permission.permitted;
  });
});
export var UserPermissionProvider = withHandleOptionalCloudId(asDataProvider('permission', fetchPermission, fetchPermission.cached), false); // Xflow settings api

export var fetchXflowSettings = withCached(function (_ref4) {
  var cloudId = _ref4.cloudId;
  return fetchJson("/gateway/api/site/".concat(cloudId, "/setting/xflow")).then(function (xFlowSettings) {
    return xFlowSettings['product-suggestions-enabled'] !== undefined ? xFlowSettings['product-suggestions-enabled'] : true;
  });
});
export var XFlowSettingsProvider = withHandleOptionalCloudId(asDataProvider('xflowSettings', fetchXflowSettings, fetchXflowSettings.cached), true);
export var prefetchAll = function prefetchAll(_ref5) {
  var cloudId = _ref5.cloudId;
  fetchXflowSettings({
    cloudId: cloudId
  });
  fetchPermission({
    cloudId: cloudId,
    permissionId: Permissions.MANAGE
  });
};
export var resetAll = function resetAll() {
  fetchXflowSettings.reset();
  fetchPermission.reset();
};