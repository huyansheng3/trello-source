"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var promise_polyfill_1 = tslib_1.__importDefault(require("promise-polyfill"));
var domain_1 = require("../helpers/domain");
var Storage_1 = require("./Storage");
var __1 = require("..");
var TEST_HOST = '';
var DEV_HOST = 'xxid.dev.atl-paas.net';
var STG_HOST = 'xxid.staging.atl-paas.net';
var PROD_FALLBACK_HOST = 'xxid.atl-paas.net';
var PROD_HOST = 'xxid.atlassian.com';
var defaultTimeout = 3 * 1e3;
var XCGenerator = (function () {
    function XCGenerator() {
    }
    XCGenerator.getValue = function (env, timeout, isStorageEnabled) {
        if (timeout === void 0) { timeout = defaultTimeout; }
        if (isStorageEnabled === void 0) { isStorageEnabled = true; }
        var xxidHost = XCGenerator.getHost(env);
        var xxidOrigin = xxidHost ? "https://" + xxidHost : '';
        var iframeUrl = xxidOrigin ? xxidOrigin + "?t=" + new Date().getTime() : '';
        var frame = XCGenerator.addFrame(iframeUrl);
        return new promise_polyfill_1.default(function (resolve) {
            var listen = function (event) {
                if (event.data.type === "xcReady" && event.origin === xxidOrigin) {
                    var xc = XCGenerator.messageToXc(event);
                    if (isStorageEnabled) {
                        xc = Storage_1.Storage.updateXc(env, xc);
                    }
                    resolve(xc);
                    XCGenerator.removeFrame(frame, listen);
                }
            };
            window.addEventListener('message', listen);
            setTimeout(function () {
                resolve({
                    type: __1.XIDItemType.XC,
                    state: "TIMEOUT",
                });
                XCGenerator.removeFrame(frame, listen);
            }, timeout);
        });
    };
    XCGenerator.messageToXc = function (event) {
        var _a = event.data, xc = _a.xc, ts = _a.ts, state = _a.state;
        if (xc && !!Date.parse(ts) && state) {
            return {
                type: __1.XIDItemType.XC,
                value: xc,
                createdAt: ts,
                state: state,
            };
        }
        else {
            return {
                type: __1.XIDItemType.XC,
                state: state ? state : "MALFORMED",
            };
        }
    };
    XCGenerator.addFrame = function (url) {
        var frame = document.createElement('iframe');
        frame.id = "xc-" + new Date().getTime();
        frame.src = url;
        frame.style.display = 'none';
        frame.style.position = 'fixed';
        document.body.appendChild(frame);
        return frame;
    };
    XCGenerator.removeFrame = function (frame, listen) {
        if (document.body.contains(frame)) {
            document.body.removeChild(frame);
            window.removeEventListener('message', listen);
        }
    };
    XCGenerator.getHost = function (env) {
        switch (env) {
            case "stage":
                return STG_HOST;
            case "prod":
                return domain_1.isAtlassianComDomain() ? PROD_FALLBACK_HOST : PROD_HOST;
            case "test":
                return TEST_HOST;
            case "local":
            case "dev":
            default:
                return DEV_HOST;
        }
    };
    return XCGenerator;
}());
exports.XCGenerator = XCGenerator;
