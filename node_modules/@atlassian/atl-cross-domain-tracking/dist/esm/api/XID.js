"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var promise_polyfill_1 = tslib_1.__importDefault(require("promise-polyfill"));
var Storage_1 = require("../core/Storage");
var UIDGenerator_1 = require("../core/UIDGenerator");
var XCGenerator_1 = require("../core/XCGenerator");
var promiseWithTimer_1 = require("../helpers/promiseWithTimer");
var types_1 = require("./types");
exports.defaultTimeout = 5 * 1e3;
var delayUidGenerate = 1e3;
var nonProdMaxTimeout = 30 * 1e3;
var prodMaxTimeout = 10 * 1e3;
var minTimeout = 2 * 1e3;
var XID = (function () {
    function XID(env, timeout) {
        if (env === void 0) { env = "local"; }
        if (timeout === void 0) { timeout = exports.defaultTimeout; }
        this.storageEnabled = true;
        this.timeoutUid = { type: types_1.XIDItemType.UID, state: "TIMEOUT" };
        if (!env) {
            throw new Error('Missing env configuration');
        }
        this.env = env;
        var maxTimeout = this.env === "prod" ? prodMaxTimeout : nonProdMaxTimeout;
        if (timeout >= minTimeout && timeout <= maxTimeout) {
            this.timeout = timeout;
        }
        else {
            if (this.env !== "prod") {
                console.log("timeout configuration must be in the range of [" + minTimeout + ", " + maxTimeout + "] seconds");
            }
            this.timeout = exports.defaultTimeout;
        }
    }
    XID.prototype.getTimeoutPromise = function (timeoutXid) {
        var _this = this;
        return new promise_polyfill_1.default(function (resolve) {
            setTimeout(function () {
                resolve([timeoutXid]);
            }, (_this.timeout - delayUidGenerate) / 2);
        });
    };
    XID.prototype.getXcPromiseAndSave = function () {
        var _this = this;
        return new promise_polyfill_1.default(function (resolve) {
            _this.getXc()
                .then(function (xc) {
                if (_this.storageEnabled) {
                    Storage_1.Storage.saveXid([xc]);
                }
                resolve([xc]);
            });
        });
    };
    XID.prototype.getUidPromiseAndSave = function () {
        var _this = this;
        return new promise_polyfill_1.default(function (resolve) {
            var handleUid = function () {
                var cachedUids = [];
                if (_this.storageEnabled) {
                    cachedUids = Storage_1.Storage.getUids();
                }
                var uids = UIDGenerator_1.UIDGenerator.getValue(cachedUids);
                if (_this.storageEnabled) {
                    Storage_1.Storage.saveUids(uids);
                    Storage_1.Storage.saveXid(uids);
                }
                resolve(uids);
            };
            var requestIdleCallback = window.requestIdleCallback;
            requestIdleCallback ? requestIdleCallback(handleUid) : (setTimeout(handleUid, delayUidGenerate));
        });
    };
    XID.prototype.getXidPromiseInXcUidOnly = function () {
        var _this = this;
        return this.getXcPromiseAndSave().then(function (xc) {
            if (xc && xc.length > 0 && xc[0].createdAt && xc[0].value) {
                return xc;
            }
            else {
                return _this.getTimeoutPromise(_this.timeoutUid), _this.getUidPromiseAndSave().then(function (uid) {
                    return tslib_1.__spreadArrays(uid, xc);
                });
            }
        });
    };
    XID.prototype.getXidCallbackForPromise = function (mode, storageEnabled) {
        if (mode === void 0) { mode = types_1.XIDGenerateMode.CACHE_XC_UID; }
        if (storageEnabled === void 0) { storageEnabled = true; }
        var transformedXids;
        var transform = function (xids) {
            if (transformedXids) {
                return transformedXids;
            }
            transformedXids = xids.map(function (xid) {
                if (xid.state === "NEW" || xid.state === "CHANGED") {
                    return {
                        state: "EXISTING",
                        type: xid.type,
                        createdAt: xid.createdAt,
                        value: xid.value
                    };
                }
                return xid;
            });
            return xids;
        };
        return this.getXidPromise(mode, storageEnabled).then(function (xid) {
            return function () { return transform(xid); };
        });
    };
    XID.prototype.getXidPromise = function (mode, storageEnabled) {
        var _this = this;
        if (mode === void 0) { mode = types_1.XIDGenerateMode.CACHE_XC_UID; }
        if (storageEnabled === void 0) { storageEnabled = true; }
        this.storageEnabled = storageEnabled;
        var cachedXidValue = (mode === types_1.XIDGenerateMode.CACHE_ONLY ||
            mode === types_1.XIDGenerateMode.CACHE_XC_UID) ? Storage_1.Storage.getCachedXID() : [];
        switch (mode) {
            case types_1.XIDGenerateMode.XC_ONLY:
                return promiseWithTimer_1.promiseWithTimer(function () { return _this.getXcPromiseAndSave(); });
            case types_1.XIDGenerateMode.UID_ONLY:
                return promiseWithTimer_1.promiseWithTimer(function () { return promise_polyfill_1.default.race([_this.getTimeoutPromise(_this.timeoutUid), _this.getUidPromiseAndSave()]); });
            case types_1.XIDGenerateMode.XC_UID:
                return promiseWithTimer_1.promiseWithTimer(function () { return _this.getXidPromiseInXcUidOnly(); });
            case types_1.XIDGenerateMode.CACHE_ONLY:
                return promise_polyfill_1.default.resolve(cachedXidValue);
            case types_1.XIDGenerateMode.CACHE_XC_UID:
            default:
                return cachedXidValue.length > 0 ?
                    promise_polyfill_1.default.resolve(cachedXidValue)
                    : promiseWithTimer_1.promiseWithTimer(function () { return _this.getXidPromiseInXcUidOnly(); });
        }
    };
    XID.prototype.getXc = function () {
        return XCGenerator_1.XCGenerator.getValue(this.env, (this.timeout - delayUidGenerate) / 2, this.storageEnabled);
    };
    XID.prototype.getUidDetails = function () {
        return UIDGenerator_1.UIDGenerator.getDetails();
    };
    return XID;
}());
exports.XID = XID;
