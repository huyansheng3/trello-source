"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTokens = void 0;
const globals_1 = require("../globals");
const internal_1 = require("./internal");
function parseTokens(tokens, initial_symbol = 'COMMAND') {
    const stall_state = {
        tokens_left: Infinity,
        expecting: [],
        halt_message: undefined,
    };
    const parse_tree = internal_1.parser(tokens, initial_symbol, [], function (current_tokens, expecting, halt_message) {
        if (globals_1.DEBUG) {
            if (halt_message) {
                globals_1.Logger.info('!halt', { numTokens: current_tokens.length, message: halt_message });
            }
            else {
                globals_1.Logger.info('!stall', { numTokens: current_tokens.length, expecting });
            }
        }
        if (current_tokens.length < stall_state.tokens_left ||
            (current_tokens.length === stall_state.tokens_left && halt_message)) {
            stall_state.tokens_left = current_tokens.length;
            stall_state.expecting = expecting ? [expecting] : [];
            stall_state.halt_message = halt_message;
        }
        else if (current_tokens.length === stall_state.tokens_left &&
            expecting &&
            stall_state.expecting.indexOf(expecting) === -1) {
            stall_state.expecting.push(expecting);
        }
        return null;
    });
    if (!parse_tree) {
        return {
            parse: null,
            hint: {
                expecting: stall_state.expecting,
                tokens,
                at_token: tokens.length - stall_state.tokens_left,
            },
            halt_message: stall_state.halt_message,
        };
    }
    if (globals_1.DEBUG) {
        globals_1.Logger.info('parse_tree', { parse_tree });
    }
    const result = { parse: internal_1.flatten(parse_tree)[initial_symbol] };
    if (tokens.length) {
        result.extra_tokens = tokens;
    }
    return result;
}
exports.parseTokens = parseTokens;
