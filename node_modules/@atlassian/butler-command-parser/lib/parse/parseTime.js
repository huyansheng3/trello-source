"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseYear = exports.parseNumericDate = exports.getTimezoneName = exports.parseTimezone = exports.parseTime = void 0;
const tz_lookup_json_1 = __importDefault(require("./tz_lookup.json"));
const kHourNames = {
    one: 1,
    two: 2,
    three: 3,
    four: 4,
    five: 5,
    six: 6,
    seven: 7,
    eight: 8,
    nine: 9,
    ten: 10,
    eleven: 11,
    twelve: 12,
};
// Returns an array of Time objects instead of a single object for entry into `flatten`.
function parseTime(tokens) {
    let count = 0;
    let time_indication = false;
    if (tokens[0] === 'at' || tokens[0] === '@') {
        time_indication = true;
        ++count;
    }
    const time = [];
    const token = tokens[count] || '';
    const match = token.match(/^(@)?(0?[0-9]|1[0-9]|2[0-3])(:[0-5][0-9])?([ap]m)?$/) ||
        token.match(/^(@)?(0?[0-9]|1[0-9]|2[0-3])(\.[0-5][0-9])([ap]m)$/);
    if (match) {
        ++count;
        if (match[1]) {
            time_indication = true;
        }
        time.push({ HOUR: parseInt(match[2]) });
        if (match[3]) {
            time.push({ MINUTES: parseInt(match[3].slice(1)) });
            time_indication = true;
        }
        if (match[4] === 'am') {
            time.push({ AM: 'am' });
            time_indication = true;
        }
        else if (match[4] === 'pm') {
            time.push({ PM: 'pm' });
            time_indication = true;
        }
        else if (tokens[count] === 'am') {
            time.push({ AM: 'am' });
            time_indication = true;
            ++count;
        }
        else if (tokens[count] === 'pm') {
            time.push({ PM: 'pm' });
            time_indication = true;
            ++count;
        }
        if (!time_indication) {
            return null;
        } // Just an integer.
    }
    else if (token in kHourNames) {
        ++count;
        time.push({ HOUR: kHourNames[token] });
        if (tokens[count] === 'am') {
            time.push({ AM: 'am' });
            time_indication = true;
            ++count;
        }
        else if (tokens[count] === 'pm') {
            time.push({ PM: 'pm' });
            time_indication = true;
            ++count;
        }
        if (!time_indication) {
            return null;
        }
    }
    else {
        return null;
    }
    tokens.splice(0, count);
    const tz = parseTimezone(tokens);
    if (tz) {
        time.push({ TZ: tz });
    }
    return time;
}
exports.parseTime = parseTime;
function parseTimezone(tokens) {
    if (tokens.length) {
        let tz = tz_lookup_json_1.default[tokens[0]];
        if (tz) {
            tokens.shift();
            return tz;
        }
        if (tokens.length > 1) {
            tz = tz_lookup_json_1.default[`${tokens[0]}_${tokens[1]}`];
            if (tz) {
                tokens.splice(0, 2);
                return tz;
            }
        }
    }
    return null;
}
exports.parseTimezone = parseTimezone;
function getTimezoneName(abbr) {
    return tz_lookup_json_1.default[abbr.toLowerCase()];
}
exports.getTimezoneName = getTimezoneName;
function parseNumericDate(tokens) {
    const token = tokens[0] || '';
    let match = token.match(/^(0?[1-9]|1[0-9]|2[0-9]|3[0-1])[/.-](0?[1-9]|1[0-9]|2[0-9]|3[0-1])(?:[/.-]((?:19|20)?[0-9][0-9]))?$/);
    if (match) {
        const month = parseInt(match[1]);
        const day = parseInt(match[2]);
        let year = match[3] ? parseInt(match[3]) : undefined;
        if (month <= 12 || day <= 12) {
            tokens.shift();
            const date = [{ MONTH_OR_DAY: month }, { DAY_OR_MONTH: day }];
            if (year) {
                if (year < 100) {
                    year += 2000;
                }
                date.push({ YEAR: year });
            }
            return date;
        }
    }
    else {
        match = token.match(/^((?:19|20)[0-9][0-9])[/.-]([1-9]|0[1-9]|1[0-2])[/.-](0?[1-9]|1[0-9]|2[0-9]|3[0-1])$/);
        if (match) {
            tokens.shift();
            return [
                { YEAR: parseInt(match[1]) },
                { MONTH: parseInt(match[2]) },
                { DAY: parseInt(match[3]) },
            ];
        }
    }
    return null;
}
exports.parseNumericDate = parseNumericDate;
function parseYear(tokens) {
    const token = tokens[0] || '';
    const match = token.match(/^((?:19|20)?[0-9][0-9])?$/);
    if (match) {
        tokens.shift();
        let year = parseInt(match[1]);
        if (year < 100) {
            year += 2000;
        }
        return year;
    }
    return null;
}
exports.parseYear = parseYear;
