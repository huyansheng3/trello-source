"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenizeIndices = exports.tokenize = void 0;
const internal_1 = require("./internal");
const concatReducer = (acc, t) => acc.concat(t);
function tokenize(text) {
    if (!text) {
        return [];
    }
    // If updating this, remember to update tokenizeIndices below too.
    return text
        .replace(/\\"/g, '__QUOTE__')
        .replace(/\.(\d)/g, '__DECIMAL__$1')
        .split(/["“”]/)
        .map((segment, i) => {
        if (i % 2) {
            return [`"${segment}"`];
        }
        return splitKeep(segment, ',', '.', '(', ')')
            .map((subSegment) => subSegment
            .split(/\s/)
            .filter(Boolean)
            .map((t) => internal_1.isVariableNameValue(t) || internal_1.isAtMentionVariableValue(t) ? t : t.toLowerCase()))
            .reduce(concatReducer, []);
    })
        .reduce(concatReducer, [])
        .map((token) => token.replace(/__QUOTE__/gi, '"').replace(/__DECIMAL__/gi, '.'));
}
exports.tokenize = tokenize;
function tokenizeIndices(text) {
    let current_index = 0;
    return text
        .replace(/\\"/g, '__')
        .replace(/\.(\d)/g, '_$1')
        .split(/["“”]/)
        .map((segment, i) => {
        if (i % 2) {
            return { from: current_index, to: current_index += segment.length + 2 };
        }
        return splitKeep(segment, ',', '.', '(', ')')
            .map((subSegment) => {
            return subSegment
                .split(/\s/)
                .map((t, idx, a) => {
                const start_index = current_index;
                current_index += t.length + (idx !== a.length - 1 ? 1 : 0);
                return t.length ? { from: start_index, to: start_index + t.length } : null;
            })
                .filter(Boolean);
        })
            .reduce(concatReducer, []);
    })
        .reduce(concatReducer, []);
}
exports.tokenizeIndices = tokenizeIndices;
function splitKeep(text, ...delims) {
    let segments = [text];
    delims.forEach((delim) => {
        segments = Array.prototype.concat.apply([], segments.map((segment) => segment.split(delim).reduce((segmentsSoFar, subSegment, i) => {
            if (i) {
                segmentsSoFar.push(delim);
            }
            if (segment.length) {
                segmentsSoFar.push(subSegment);
            }
            return segmentsSoFar;
        }, [])));
    });
    return segments;
}
