"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalizationKeysForTrigger = void 0;
const LocalizationKeysError_1 = require("./LocalizationKeysError");
const conditions_1 = require("./conditions");
function getLocalizationKeysForTrigger(trigger) {
    var _a;
    const conditions = (_a = conditions_1.getTriggerConditions(trigger)) === null || _a === void 0 ? void 0 : _a.map(conditions_1.getLocalizationKeysForCondition);
    const triggerType = trigger.type;
    switch (triggerType) {
        case 'EVERY': {
            switch (trigger[triggerType].type) {
                case 'EVERY_DAY': {
                    return { key: 'every_day_trigger' };
                }
                case 'EVERY_WEEKDAY': {
                    return { key: 'every_weekday_trigger' };
                }
                case 'CERTAIN_DAYS': {
                    const { MONTH_WEEK_NUMBER, DAY, TIME } = trigger[triggerType].CERTAIN_DAYS;
                    return {
                        key: 'every_certain_days_trigger',
                        '*ORDINAL': MONTH_WEEK_NUMBER,
                        '*WEEKDAY': DAY,
                        time: TIME
                            ? {
                                key: 'at time',
                                // `time` key is unused, but needed to maintain interface.
                                '*TIME': Object.assign({ key: 'time' }, TIME),
                            }
                            : undefined,
                    };
                }
            }
            break;
        }
        case 'ON_DUE_DATE': {
            switch (trigger[triggerType].type) {
                case 'DAYS_BEFORE': {
                    const DAYS_BEFORE = trigger[triggerType].DAYS_BEFORE;
                    return {
                        key: 'on_due_date_days_before_trigger',
                        $X: DAYS_BEFORE,
                        conditions,
                    };
                }
                case 'USE_DUE_TIME': {
                    if (trigger[triggerType].USE_DUE_TIME) {
                        return { key: 'on_due_date_use_due_time_trigger' };
                    }
                    break;
                }
            }
            break;
        }
        case 'WHEN': {
            switch (trigger[triggerType].type) {
                case 'CARD_INTO_LIST': {
                    const { $LIST } = trigger[triggerType].CARD_INTO_LIST;
                    return {
                        key: 'when_card_into_list_trigger',
                        list: { key: 'the list', title: { key: 'title', $TITLE: $LIST } },
                        conditions,
                    };
                }
                case 'START_DATE_ADDED':
                case 'DUE_DATE_ADDED': {
                    return {
                        key: 'when_date_added_trigger',
                        date_type: {
                            key: trigger[triggerType].type === 'START_DATE_ADDED' ? 'start date' : 'due date',
                        },
                    };
                }
            }
            break;
        }
    }
    throw new LocalizationKeysError_1.LocalizationKeysError(trigger[triggerType].type);
}
exports.getLocalizationKeysForTrigger = getLocalizationKeysForTrigger;
