"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.l10nizeRemoveFromCardAction = void 0;
const MaybeArray_1 = require("../../types/MaybeArray");
const l10nizeTitle_1 = require("../l10nizeTitle");
function l10nizeRemoveFromCardAction({ REMOVE_FROM_CARD_ACTION: data, }) {
    const fields = [];
    if (data.LABEL) {
        for (const { COLOR, $TITLE } of MaybeArray_1.normalizeArray(data.LABEL)) {
            fields.push({
                key: 'the label',
                '*COLOR': COLOR !== null && COLOR !== void 0 ? COLOR : undefined,
                title: l10nizeTitle_1.l10nizeTitle($TITLE),
            });
        }
    }
    if (data.MEMBER) {
        for (const member of MaybeArray_1.normalizeArray(data.MEMBER)) {
            if (member['@MEMBER_USERNAME']) {
                fields.push({ key: 'member username', '@MEMBER_USERNAME': member['@MEMBER_USERNAME'] });
            }
            else if (member.$MEMBER_FULLNAME) {
                fields.push(l10nizeTitle_1.l10nizeTitle(member.$MEMBER_FULLNAME));
            }
            else if (member.MEMBER_ME) {
                fields.push('me');
            }
            else if (member.MEMBER_ANYONE) {
                fields.push('anyone');
            }
        }
    }
    if (data.REMOVE_ATTACHMENT) {
        for (const attachment of MaybeArray_1.normalizeArray(data.REMOVE_ATTACHMENT)) {
            if (attachment.$ATTACHMENT_LINK) {
                fields.push({ key: 'the link', title: l10nizeTitle_1.l10nizeTitle(attachment.$ATTACHMENT_LINK) });
            }
            else {
                fields.push({
                    key: 'the attachment',
                    title: l10nizeTitle_1.l10nizeTitle(attachment.$ATTACHMENT_NAME),
                });
            }
        }
    }
    if (data.REMOVE_CHECKLIST) {
        for (const { $CHECKLIST_NAME } of MaybeArray_1.normalizeArray(data.REMOVE_CHECKLIST)) {
            fields.push({
                key: 'the checklist',
                title: l10nizeTitle_1.l10nizeTitle($CHECKLIST_NAME),
            });
        }
    }
    if (data.STICKER_TYPE) {
        for (const stickerType of MaybeArray_1.normalizeArray(data.STICKER_TYPE)) {
            fields.push({ key: 'the sticker', '*STICKER': stickerType });
        }
    }
    if (data.REMOVE_COVER) {
        fields.push('the cover');
    }
    if (data.REMOVE_DUE_DATE) {
        fields.push('the due date');
    }
    if (data.REMOVE_START_DATE) {
        fields.push('the start date');
    }
    if (data.THE_LABEL) {
        fields.push('the label');
    }
    if (data.REMOVE_ALL_CHECKLISTS) {
        fields.push('all checklists');
    }
    if (data.REMOVE_ALL_LABELS) {
        fields.push('all labels');
    }
    if (data.REMOVE_ALL_MEMBERS) {
        fields.push('all members');
    }
    if (data.REMOVE_ALL_STICKERS) {
        fields.push('all stickers');
    }
    let location;
    if (data.ALL_CARDS_IN_LIST) {
        location = {
            key: 'all the cards in list',
            list: {
                key: 'the list',
                title: l10nizeTitle_1.l10nizeTitle(data.ALL_CARDS_IN_LIST.$LIST),
            },
        };
    }
    else if (data.ALL_ARCHIVED_CARDS) {
        location = 'all archived cards';
    }
    else {
        location = 'the card';
    }
    return {
        key: 'remove_from_card_action',
        fields,
        location,
    };
}
exports.l10nizeRemoveFromCardAction = l10nizeRemoveFromCardAction;
