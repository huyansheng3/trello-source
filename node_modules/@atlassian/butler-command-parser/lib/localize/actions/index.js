"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalizationKeysForAction = void 0;
const LocalizationKeysError_1 = require("../LocalizationKeysError");
const l10nizeTitle_1 = require("../l10nizeTitle");
const l10nizeAddDateAction_1 = require("./l10nizeAddDateAction");
const l10nizeRemoveFromCardAction_1 = require("./l10nizeRemoveFromCardAction");
const conditions_1 = require("../conditions");
function getLocalizationKeysForAction(action) {
    var _a;
    const conditions = (_a = conditions_1.getActionConditions(action)) === null || _a === void 0 ? void 0 : _a.map(conditions_1.getLocalizationKeysForCondition);
    switch (action.type) {
        case 'CREATE_REPORT_ACTION': {
            const { $REPORT_VAR, $ITEM_PATTERN, REPORT_GROUP_BY, } = action.CREATE_REPORT_ACTION;
            let report_var;
            if ($REPORT_VAR) {
                report_var = { key: 'in variable', title: l10nizeTitle_1.l10nizeTitle($REPORT_VAR) };
            }
            let item_pattern;
            if ($ITEM_PATTERN) {
                item_pattern = { key: 'item pattern', title: l10nizeTitle_1.l10nizeTitle($ITEM_PATTERN) };
            }
            let grouped_by;
            if (REPORT_GROUP_BY === 'THE_LIST') {
                grouped_by = { key: 'grouped by', group: 'list' };
            }
            if (REPORT_GROUP_BY === 'THE_DUE_DATE') {
                grouped_by = { key: 'grouped by', group: 'due date' };
            }
            return {
                key: 'create_report_action',
                report_var,
                conditions,
                item_pattern,
                grouped_by,
            };
        }
        case 'MOVE_CARD_ACTION': {
            const { $LIST, $BOARD } = action.MOVE_CARD_ACTION.DESTINATION;
            const position = {
                key: action.MOVE_CARD_ACTION.DESTINATION.POSITION_TOP ||
                    action.MOVE_CARD_ACTION.DESTINATION.POSITION_BOTTOM,
            };
            let board;
            if ($BOARD) {
                board = { key: 'on board', title: { key: 'title', $TITLE: $BOARD } };
            }
            let list;
            if ($LIST) {
                list = { key: 'of the list', title: { key: 'title', $TITLE: $LIST } };
            }
            else {
                list = { key: 'of the list' };
            }
            return { key: 'move_card_action', position, list, board };
        }
        case 'COPY_CARD_ACTION': {
            const { $LIST, $BOARD } = action.COPY_CARD_ACTION.DESTINATION;
            const position = {
                key: action.COPY_CARD_ACTION.DESTINATION.POSITION_TOP ||
                    action.COPY_CARD_ACTION.DESTINATION.POSITION_BOTTOM,
            };
            let board;
            if ($BOARD) {
                board = { key: 'on board', title: { key: 'title', $TITLE: $BOARD } };
            }
            let list;
            if ($LIST) {
                list = { key: 'of the list', title: { key: 'title', $TITLE: $LIST } };
            }
            else {
                list = { key: 'of the list' };
            }
            let comments;
            if (action.COPY_CARD_ACTION.WITHOUT_COMMENTS) {
                comments = { key: 'without comments' };
            }
            return { key: 'copy_card_action', position, list, board, comments };
        }
        case 'ADD_COMMENT_ACTION': {
            return {
                key: 'add_comment_action',
                title: { key: 'title', $TITLE: action.ADD_COMMENT_ACTION.$COMMENT },
            };
        }
        case 'ADD_LABEL_ACTION': {
            const { LABEL: { COLOR, $TITLE }, ALL_CARDS_IN_LIST, } = action.ADD_LABEL_ACTION;
            return {
                key: 'add_label_action',
                label: {
                    key: 'the label',
                    '*COLOR': COLOR,
                    title: $TITLE ? { key: 'title', $TITLE } : undefined,
                },
                target: ALL_CARDS_IN_LIST
                    ? {
                        key: 'all the cards in list',
                        list: {
                            key: 'the list',
                            title: { key: 'title', $TITLE: ALL_CARDS_IN_LIST.$LIST },
                        },
                    }
                    : { key: 'the card' },
            };
        }
        case 'ADD_MEMBER_ACTION': {
            if (action.ADD_MEMBER_ACTION.MEMBER['@MEMBER_USERNAME']) {
                return {
                    key: 'add_member_action',
                    member: {
                        key: 'member username',
                        '@MEMBER_USERNAME': action.ADD_MEMBER_ACTION.MEMBER['@MEMBER_USERNAME'],
                    },
                };
            }
            return { key: 'join_card_action' };
        }
        case 'REMOVE_FROM_CARD_ACTION': {
            return l10nizeRemoveFromCardAction_1.l10nizeRemoveFromCardAction(action);
        }
        case 'MARK_DUE_COMPLETE_ACTION': {
            return { key: 'mark_due_date_complete_action', field: { key: 'complete' } };
        }
        case 'UNMARK_DUE_COMPLETE_ACTION': {
            return { key: 'mark_due_date_complete_action', field: { key: 'incomplete' } };
        }
        case 'JOIN_CARD_ACTION': {
            return { key: 'join_card_action' };
        }
        case 'LEAVE_CARD_ACTION': {
            return { key: 'leave_card_action' };
        }
        case 'ADD_CHECKLIST_ACTION': {
            const { $CHECKLIST_NAME, $NEW_CHECKLIST_NAME, $FROM_CARD } = action.ADD_CHECKLIST_ACTION;
            const fields = { title: { key: 'title', $TITLE: $CHECKLIST_NAME } };
            if ($FROM_CARD) {
                fields.from = {
                    key: 'from card',
                    title: { key: 'title', $TITLE: $FROM_CARD },
                };
            }
            if ($NEW_CHECKLIST_NAME) {
                fields.new_name = {
                    key: 'with name',
                    title: { key: 'title', $TITLE: $NEW_CHECKLIST_NAME },
                };
            }
            return Object.assign({ key: `add_checklist_action` }, fields);
        }
        case 'SORT_LIST_ACTION': {
            const _b = action.SORT_LIST_ACTION, { SORT_DESCENDING, $LIST, SECONDARY_SORT } = _b, rest = __rest(_b, ["SORT_DESCENDING", "$LIST", "SECONDARY_SORT"]);
            const parseSortField = (data) => {
                if (data.SORT_BY_CUSTOM_FIELD) {
                    return {
                        key: 'custom field',
                        title: { key: 'title', $TITLE: data.SORT_BY_CUSTOM_FIELD.$CUSTOM_FIELD_NAME },
                    };
                }
                if (data.SORT_BY_LABEL) {
                    const { SORT_LABEL } = data.SORT_BY_LABEL;
                    const labels = Array.isArray(SORT_LABEL) ? SORT_LABEL : [SORT_LABEL];
                    return labels.map(({ COLOR, $TITLE }) => ({
                        key: 'the label',
                        '*COLOR': COLOR,
                        title: $TITLE ? { key: 'title', $TITLE } : undefined,
                    }));
                }
                if (data.SORT_BY_DUE_DATE) {
                    return 'due date';
                }
                if (data.SORT_BY_START_DATE) {
                    return 'start date';
                }
                if (data.SORT_BY_VOTES) {
                    return 'votes';
                }
                if (data.SORT_BY_TIME_IN_LIST) {
                    return 'time in list';
                }
                if (data.SORT_BY_AGE) {
                    return 'age';
                }
                if (data.SORT_BY_DATE_IN_TITLE) {
                    return 'date in title';
                }
                if (data.SORT_BY_TITLE) {
                    return 'name';
                }
                return undefined;
            };
            const result = {
                key: 'sort_list_action',
                list: {
                    key: 'the list',
                    title: $LIST ? { key: 'title', $TITLE: $LIST } : undefined,
                },
                field: parseSortField(rest),
                direction: SORT_DESCENDING ? 'descending' : 'ascending',
            };
            if (SECONDARY_SORT) {
                result.secondary_sort = {
                    key: 'secondary sort',
                    field: parseSortField(SECONDARY_SORT),
                    direction: SECONDARY_SORT.SORT_DESCENDING ? 'ascending' : 'descending',
                };
            }
            return result;
        }
        case 'SEND_EMAIL_ACTION': {
            const { $ADDRESS, $SUBJECT, $MESSAGE } = action.SEND_EMAIL_ACTION;
            const fields = {
                subject: { key: 'with subject', title: { key: 'title', $TITLE: $SUBJECT } },
                message: { key: 'with message', title: { key: 'title', $TITLE: $MESSAGE } },
            };
            if ($ADDRESS) {
                fields.$ADDRESS = `"${$ADDRESS}"`;
            }
            if (action.SEND_EMAIL_ACTION.ALL_MEMBERS_ON_BOARD) {
                fields.$ADDRESS = '@board';
            }
            if (action.SEND_EMAIL_ACTION.ALL_MEMBERS_ON_CARD) {
                fields.$ADDRESS = '@card';
            }
            return Object.assign({ key: 'send_email_to_recipient_action' }, fields);
        }
        case 'SET_CUSTOM_FIELD_ACTION': {
            const data = action.SET_CUSTOM_FIELD_ACTION;
            let fields = { title: { key: 'title', $TITLE: data.$FIELD_NAME } };
            if (data.$TEXT_VALUE) {
                fields = Object.assign({ verb: { key: 'set' }, to_value: { key: 'to value', $VALUE: `"${data.$TEXT_VALUE}"` } }, fields);
                return Object.assign({ key: 'verb_custom_field_to_value_action' }, fields);
            }
            if (data.NUMERIC_VALUE) {
                fields = Object.assign({ verb: { key: 'set' }, to_value: { key: 'to value', $VALUE: data.NUMERIC_VALUE } }, fields);
                return Object.assign({ key: 'verb_custom_field_to_value_action' }, fields);
            }
            if (data.VARIABLE_VALUE) {
                fields = Object.assign({ verb: { key: 'set' }, to_value: { key: 'to value', $VALUE: data.VARIABLE_VALUE } }, fields);
                return Object.assign({ key: 'verb_custom_field_to_value_action' }, fields);
            }
            if (data.INCREASE_FIELD) {
                fields = Object.assign({ verb: { key: 'increase' }, $AMOUNT: data.AMOUNT || 1 }, fields);
                return Object.assign({ key: 'increment_custom_field_action' }, fields);
            }
            if (data.DECREASE_FIELD) {
                fields = Object.assign({ verb: { key: 'decrease' }, $AMOUNT: data.AMOUNT || 1 }, fields);
                return Object.assign({ key: 'increment_custom_field_action' }, fields);
            }
            if (data.CLEAR_FIELD) {
                fields = Object.assign({ verb: { key: 'clear' } }, fields);
            }
            else if (data.CHECK_FIELD) {
                fields = Object.assign({ verb: { key: 'check' } }, fields);
            }
            else if (data.UNCHECK_FIELD) {
                fields = Object.assign({ verb: { key: 'uncheck' } }, fields);
            }
            return Object.assign({ key: 'verb_custom_field_action' }, fields);
        }
        case 'ADD_START_DATE_ACTION':
        case 'ADD_DUE_DATE_ACTION': {
            return l10nizeAddDateAction_1.l10nizeAddDateAction(action);
        }
        case 'COUNT_CARDS_ACTION': {
            return { key: 'count_cards_action', conditions };
        }
        default:
            throw new LocalizationKeysError_1.LocalizationKeysError(action.type);
    }
}
exports.getLocalizationKeysForAction = getLocalizationKeysForAction;
