"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getActionConditions = exports.getTriggerConditions = exports.getLocalizationKeysForCondition = void 0;
const LocalizationKeysError_1 = require("./LocalizationKeysError");
function getLocalizationKeysForCondition(condition) {
    switch (condition.type) {
        case 'WITH_NO_LABELS': {
            return 'with no labels';
        }
        case 'WITHOUT_DUE_DATE': {
            return 'without due date';
        }
        case 'WITH_OVERDUE_DATE': {
            return { key: 'overdue' };
        }
        case 'ASSIGNED_TO': {
            let member;
            if (condition.ASSIGNED_TO.MEMBER['@MEMBER_USERNAME']) {
                member = {
                    key: 'member username',
                    '@MEMBER_USERNAME': condition.ASSIGNED_TO.MEMBER['@MEMBER_USERNAME'],
                };
            }
            else if (condition.ASSIGNED_TO.MEMBER.MEMBER_ME) {
                member = 'me';
            }
            return {
                key: 'assigned to member',
                member,
            };
        }
        case 'DUE_DATE_CONDITION': {
            let keys = {};
            const { DUE_IN_LESS_THAN_DAYS, DUE_IN_MORE_THAN_DAYS, DUE_IN_EXACTLY_DAYS, DUE_IN_BETWEEN, DUE_TODAY, DUE_TOMORROW, DUE_THIS_WEEK, DUE_NEXT_WEEK, DUE_THIS_MONTH, DUE_NEXT_MONTH, WORKING_DAYS, } = condition.DUE_DATE_CONDITION;
            if (DUE_IN_LESS_THAN_DAYS) {
                keys = {
                    key: 'due in comparison days',
                    $NUM_DAYS: DUE_IN_LESS_THAN_DAYS,
                    operator: 'less than',
                };
            }
            if (DUE_IN_MORE_THAN_DAYS) {
                keys = {
                    key: 'due in comparison days',
                    $NUM_DAYS: DUE_IN_MORE_THAN_DAYS,
                    operator: 'more than',
                };
            }
            if (DUE_IN_EXACTLY_DAYS) {
                keys = {
                    key: 'due in comparison days',
                    $NUM_DAYS: DUE_IN_EXACTLY_DAYS,
                    operator: 'exactly',
                };
            }
            if (DUE_IN_BETWEEN) {
                keys = {
                    key: 'due in between days',
                    $MIN_DAYS: DUE_IN_BETWEEN.MIN_DAYS,
                    $MAX_DAYS: DUE_IN_BETWEEN.MAX_DAYS,
                };
            }
            if (DUE_TODAY) {
                keys = { key: 'due when', when: 'today' };
            }
            else if (DUE_TOMORROW) {
                keys = { key: 'due when', when: 'tomorrow' };
            }
            else if (DUE_THIS_WEEK) {
                keys = { key: 'due when', when: 'this week' };
            }
            else if (DUE_NEXT_WEEK) {
                keys = { key: 'due when', when: 'next week' };
            }
            else if (DUE_THIS_MONTH) {
                keys = { key: 'due when', when: 'this month' };
            }
            else if (DUE_NEXT_MONTH) {
                keys = { key: 'due when', when: 'next month' };
            }
            else {
                if (WORKING_DAYS) {
                    keys.days = 'working days';
                }
                else {
                    keys.days = 'days';
                }
            }
            return keys;
        }
    }
    throw new LocalizationKeysError_1.LocalizationKeysError(condition.type);
}
exports.getLocalizationKeysForCondition = getLocalizationKeysForCondition;
function getTriggerConditions(trigger) {
    var _a, _b, _c, _d;
    const triggerType = trigger.type;
    const triggerSubtype = (_a = trigger[triggerType]) === null || _a === void 0 ? void 0 : _a.type;
    return ((_b = trigger[triggerType]) === null || _b === void 0 ? void 0 : _b.CONDITION) || ((_d = (_c = trigger[triggerType]) === null || _c === void 0 ? void 0 : _c[triggerSubtype]) === null || _d === void 0 ? void 0 : _d.CONDITION) || [];
}
exports.getTriggerConditions = getTriggerConditions;
function getActionConditions(action) {
    var _a;
    const actionType = action.type;
    return ((_a = action[actionType]) === null || _a === void 0 ? void 0 : _a.CONDITION) || [];
}
exports.getActionConditions = getActionConditions;
