import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useRef, useState, useEffect } from 'react';
import { useInView } from './hooks';
import { browser, getIEVersion } from './utils';

var emptySubscribe = function emptySubscribe() {
  return function () {};
};

var _React$createContext = /*#__PURE__*/React.createContext({
  subscribe: null
}),
    IframeWrapperConsumer = _React$createContext.Consumer,
    IframeWrapperProvider = _React$createContext.Provider;

function ObjectIframe(props) {
  var onResize = props.onResize;
  var ref = useRef(null);
  useEffect(function () {
    if (!ref || !ref.current) {
      return;
    }

    var iframe = ref.current;

    if (!iframe.contentDocument || !iframe.contentDocument.defaultView) {
      return;
    }

    var iframeWindow = iframe.contentDocument.defaultView;
    iframeWindow.addEventListener('resize', onResize);
    return function () {
      iframeWindow.removeEventListener('resize', onResize);
    };
  }, [ref, onResize]);
  return /*#__PURE__*/React.createElement("object", {
    ref: ref,
    data: "about:blank",
    type: "text/html",
    style: {
      position: 'absolute',
      height: '0',
      width: '100%'
    },
    "aria-hidden": true,
    tabIndex: -1
  });
}
/**
 * IE11 requires IFrame with src to avoid Access Denied error.
 *
 * https://stackoverflow.com/questions/1886547/access-is-denied-javascript-error-when-trying-to-access-the-document-object-of
 **/


function NativeIframe(props) {
  var onResize = props.onResize;
  var ref = useRef(null);
  var onLoad = React.useCallback(function () {
    if (!ref || !ref.current) {
      return;
    }

    var iframe = ref.current;

    if (!iframe.contentDocument || !iframe.contentDocument.defaultView) {
      return;
    }

    var iframeWindow = iframe.contentDocument.defaultView;
    iframeWindow.addEventListener('resize', onResize);
  }, [onResize]);
  return /*#__PURE__*/React.createElement("iframe", {
    ref: ref,
    src: "about:blank",
    frameBorder: "0",
    style: {
      position: 'absolute',
      height: '0',
      width: '100%'
    },
    onLoad: onLoad,
    "aria-hidden": true,
    tabIndex: -1
  });
}

function Iframe(props) {
  if (getIEVersion() === 11) {
    return /*#__PURE__*/React.createElement(NativeIframe, props);
  }

  return /*#__PURE__*/React.createElement(ObjectIframe, props);
}

var IframeWrapper = function IframeWrapper(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/React.createElement("div", {
    style: {
      position: 'absolute',
      height: '0',
      width: '100%'
    }
  }, children);
};

var emptySubscription = function emptySubscription() {
  return function () {};
};

var SubscribeIframeResize = /*#__PURE__*/React.memo(function (_ref2) {
  var subscribe = _ref2.subscribe,
      setWidth = _ref2.setWidth;
  var ref = React.useRef(null);
  useEffect(function () {
    if (ref && ref.current) {
      var target = ref.current;
      var width = target.offsetWidth;
      setWidth(width);
    }

    var unsubscribe = subscribe(function () {
      if (ref && ref.current) {
        var _target = ref.current;
        var _width = _target.offsetWidth;
        setWidth(_width);
      }
    });
    return unsubscribe;
  }, [ref, subscribe, setWidth]);
  return /*#__PURE__*/React.createElement("div", {
    ref: ref
  });
});
var SubscribeIframeResizeWhenVisible = /*#__PURE__*/React.memo(function (_ref3) {
  var subscribe = _ref3.subscribe,
      setWidth = _ref3.setWidth;

  var _useInView = useInView({
    /* Optional options */
    threshold: 0
  }),
      _useInView2 = _slicedToArray(_useInView, 4),
      inViewRef = _useInView2[0],
      inView = _useInView2[1],
      target = _useInView2[2],
      entry = _useInView2[3];

  useEffect(function () {
    if (inView && entry && entry.target instanceof HTMLElement) {
      var boundingClientRect = entry.boundingClientRect;
      var width = boundingClientRect.width;
      setWidth(width);
    }

    var unsubscribe = subscribe(function () {
      // The first time the component is mounted will need to
      // get this information from the HTMLElement
      if (inView && target instanceof HTMLElement) {
        var _width2 = target.offsetWidth;
        setWidth(_width2);
      }
    });
    return unsubscribe;
  }, [inView, entry, setWidth, subscribe, target]);
  return /*#__PURE__*/React.createElement("div", {
    style: {
      position: 'absolute',
      height: '0',
      width: '100%'
    },
    ref: inViewRef
  });
});

function getSubscribeIframe(useIntersectionObserver) {
  if (useIntersectionObserver) {
    return SubscribeIframeResizeWhenVisible;
  }

  return SubscribeIframeResize;
}
/**
 * This component is responsible for creating an iframe using HTMLObjectElement.
 * It will provide a context object with a `subscribe` function as a callback,
 * so other components can subscribe to know when the iframe was resized.
 */


var IframeWidthObserverFallback = /*#__PURE__*/React.memo(function (props) {
  var _useState = useState(new Map()),
      _useState2 = _slicedToArray(_useState, 1),
      listeners = _useState2[0];

  var subscribe = React.useCallback(function (cb) {
    listeners.set(cb, null);
    return function () {
      listeners.delete(cb);
    };
  }, [listeners]);
  var onResize = React.useCallback(function () {
    listeners.forEach(function (_, cb) {
      return cb();
    });
  }, [listeners]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IframeWrapper, null, /*#__PURE__*/React.createElement(Iframe, {
    onResize: onResize
  })), /*#__PURE__*/React.createElement(IframeWrapperProvider, {
    value: {
      subscribe: subscribe
    }
  }, props.children));
});
var NonIframeWidthObserverFallback = /*#__PURE__*/React.memo(function (props) {
  return /*#__PURE__*/React.createElement(IframeWrapperProvider, {
    value: {
      subscribe: emptySubscribe
    }
  }, props.children);
});
export { IframeWrapperConsumer, IframeWrapperProvider, IframeWidthObserverFallback, SubscribeIframeResizeWhenVisible, SubscribeIframeResize };
export var IframeWidthObserver = /*#__PURE__*/React.memo(function (_ref4) {
  var setWidth = _ref4.setWidth,
      useIntersectionObserver = _ref4.useIntersectionObserver;
  var Component = getSubscribeIframe(useIntersectionObserver);
  return /*#__PURE__*/React.createElement(IframeWrapperConsumer, null, function (_ref5) {
    var subscribe = _ref5.subscribe;
    return /*#__PURE__*/React.createElement(Component, {
      setWidth: setWidth,
      subscribe: subscribe || emptySubscription
    });
  });
});
export var IframeWidthObserverFallbackWrapper = /*#__PURE__*/React.memo(function (props) {
  var supportsResizeObserver = browser.supportsResizeObserver,
      supportsIntersectionObserver = browser.supportsIntersectionObserver;

  if (supportsResizeObserver && supportsIntersectionObserver) {
    return /*#__PURE__*/React.createElement(NonIframeWidthObserverFallback, null, props.children);
  }

  return /*#__PURE__*/React.createElement(IframeWidthObserverFallback, null, props.children);
});