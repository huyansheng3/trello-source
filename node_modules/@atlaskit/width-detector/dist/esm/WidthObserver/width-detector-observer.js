import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React from 'react';
import { useInView } from './hooks';
import { browser } from './utils';
export var WidthDetectorObserver = /*#__PURE__*/React.memo(function (_ref) {
  var setWidth = _ref.setWidth,
      offscreen = _ref.offscreen;
  var supportsResizeObserver = browser.supportsResizeObserver;

  var _useInView = useInView({
    /* Optional options */
    threshold: 0
  }),
      _useInView2 = _slicedToArray(_useInView, 3),
      inViewRef = _useInView2[0],
      inView = _useInView2[1],
      target = _useInView2[2];

  var observer = React.useRef(function () {
    if (typeof window === 'undefined' || !supportsResizeObserver) {
      return null;
    } // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40909
    // @ts-ignore


    return new ResizeObserver(function (entries) {
      if (!Array.isArray(entries) || !entries.length) {
        return;
      }

      var width = entries[0].contentRect.width;
      setWidth(Math.round(width));
    });
  });
  React.useEffect(function () {
    var currentObserver = observer.current;
    var resizeObserver = currentObserver();

    if (resizeObserver === null) {
      return;
    }

    if (target) {
      if (inView || offscreen) {
        resizeObserver.observe(target);
      } else {
        resizeObserver.unobserve(target);
      }
    }

    return function () {
      resizeObserver.disconnect();
    };
  }, [target, inView, offscreen]);
  return /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'block',
      width: '100%',
      position: 'absolute'
    },
    ref: inViewRef
  });
});