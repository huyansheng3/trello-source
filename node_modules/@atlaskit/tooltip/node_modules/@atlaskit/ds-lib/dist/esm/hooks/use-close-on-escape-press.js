import { useCallback, useRef } from 'react';
import { ESCAPE } from '../utils/keycodes';
import useDocumentEvent from './use-document-event';

/**
 * Calls back when the escape key is pressed.
 * To be used exclusively for closing layered components.
 * Use the `isDisabled` argument to ignore closing events.
 *
 * ```js
 * useCloseOnEscapePress({
 *   onClose: () => {},
 *   isDisabled: false,
 * });
 * ```
 */
export default function useCloseOnEscapePress(_ref) {
  var onClose = _ref.onClose,
      isDisabled = _ref.isDisabled;
  var escapePressed = useRef(false);
  var onKeyDown = useCallback(function (e) {
    if (isDisabled || escapePressed.current || e.key !== ESCAPE) {
      // We're either already handling the key down event or it's not escape.
      // Bail early!
      return;
    }

    escapePressed.current = true;
    onClose(e);
  }, [onClose, isDisabled]);
  var onKeyUp = useCallback(function () {
    escapePressed.current = false;
  }, []);
  useDocumentEvent('keydown', onKeyDown, false);
  useDocumentEvent('keyup', onKeyUp, false);
}