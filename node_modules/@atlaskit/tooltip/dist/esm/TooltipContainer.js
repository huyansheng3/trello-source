import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";

var _templateObject, _templateObject2, _templateObject3;

/** @jsx jsx */
import { forwardRef } from 'react';
import { css, jsx } from '@emotion/core';
import { DN0, DN600, N0, N800 } from '@atlaskit/theme/colors';
import GlobalTheme from '@atlaskit/theme/components';
import { borderRadius } from '@atlaskit/theme/constants';
import { token } from '@atlaskit/tokens';
import TooltipPrimitive from './TooltipPrimitive';
var baseCss = css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  border-radius: ", "px;\n  box-sizing: border-box;\n  font-size: 12px;\n  left: 0;\n  line-height: 1.3;\n  max-width: 240px;\n  padding: 2px 6px;\n  top: 0;\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n"])), borderRadius());
var truncateCss = css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  max-width: 420px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n"])));
var TooltipContainer = /*#__PURE__*/forwardRef(function TooltipContainer(_ref, ref) {
  var style = _ref.style,
      className = _ref.className,
      children = _ref.children,
      truncate = _ref.truncate,
      placement = _ref.placement,
      testId = _ref.testId,
      onMouseOut = _ref.onMouseOut,
      onMouseOver = _ref.onMouseOver;
  return jsx(GlobalTheme.Consumer, null, function (_ref2) {
    var mode = _ref2.mode;
    return (// eslint-disable-next-line jsx-a11y/mouse-events-have-key-events
      jsx(TooltipPrimitive, {
        ref: ref,
        style: style,
        className: className,
        placement: placement,
        testId: testId,
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOver,
        css: [baseCss, truncate ? truncateCss : null, css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n                background-color: ", ";\n                color: ", ";\n              "])), mode === 'light' ? token('color.background.boldNeutral.resting', N800) : token('color.background.boldNeutral.resting', DN0), mode === 'light' ? token('color.text.onBold', N0) : token('color.text.onBold', DN600))]
      }, children)
    );
  });
});
TooltipContainer.displayName = 'TooltipContainer';
export default TooltipContainer;