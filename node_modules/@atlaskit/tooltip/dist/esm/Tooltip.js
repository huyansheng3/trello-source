import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @jsx jsx */
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { jsx } from '@emotion/core';
import { bind } from 'bind-event-listener';
import { usePlatformLeafSyntheticEventHandler } from '@atlaskit/analytics-next';
import useCloseOnEscapePress from '@atlaskit/ds-lib/use-close-on-escape-press';
import { ExitingPersistence, FadeIn } from '@atlaskit/motion';
import { Popper } from '@atlaskit/popper';
import Portal from '@atlaskit/portal';
import { layers } from '@atlaskit/theme/constants';
import { show } from './internal/tooltip-manager';
import TooltipContainer from './TooltipContainer';
import { getMousePosition } from './utilities';
var tooltipZIndex = layers.tooltip();
var analyticsAttributes = {
  componentName: 'tooltip',
  packageName: "@atlaskit/tooltip",
  packageVersion: "17.4.1"
};

function noop() {}

function Tooltip(_ref) {
  var children = _ref.children,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'bottom' : _ref$position,
      _ref$mousePosition = _ref.mousePosition,
      mousePosition = _ref$mousePosition === void 0 ? 'bottom' : _ref$mousePosition,
      content = _ref.content,
      _ref$truncate = _ref.truncate,
      truncate = _ref$truncate === void 0 ? false : _ref$truncate,
      _ref$component = _ref.component,
      Container = _ref$component === void 0 ? TooltipContainer : _ref$component,
      _ref$tag = _ref.tag,
      TargetContainer = _ref$tag === void 0 ? 'div' : _ref$tag,
      testId = _ref.testId,
      _ref$delay = _ref.delay,
      delay = _ref$delay === void 0 ? 300 : _ref$delay,
      _ref$onShow = _ref.onShow,
      onShow = _ref$onShow === void 0 ? noop : _ref$onShow,
      _ref$onHide = _ref.onHide,
      onHide = _ref$onHide === void 0 ? noop : _ref$onHide,
      _ref$hideTooltipOnCli = _ref.hideTooltipOnClick,
      hideTooltipOnClick = _ref$hideTooltipOnCli === void 0 ? false : _ref$hideTooltipOnCli,
      _ref$hideTooltipOnMou = _ref.hideTooltipOnMouseDown,
      hideTooltipOnMouseDown = _ref$hideTooltipOnMou === void 0 ? false : _ref$hideTooltipOnMou,
      analyticsContext = _ref.analyticsContext,
      _ref$strategy = _ref.strategy,
      strategy = _ref$strategy === void 0 ? 'fixed' : _ref$strategy;
  var tooltipPosition = position === 'mouse' ? mousePosition : position;
  var onShowHandler = usePlatformLeafSyntheticEventHandler(_objectSpread({
    fn: onShow,
    action: 'displayed',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var onHideHandler = usePlatformLeafSyntheticEventHandler(_objectSpread({
    fn: onHide,
    action: 'hidden',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var apiRef = useRef(null);

  var _useState = useState('hide'),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var targetRef = useRef(null);
  var containerRef = useRef(null);
  var setRef = useCallback(function (node) {
    if (!node || node.firstChild === null) {
      return;
    } // @ts-ignore - React Ref typing is too strict for this use case


    containerRef.current = node; // @ts-ignore - React Ref typing is too strict for this use case

    targetRef.current = node.firstChild;
  }, []); // Putting a few things into refs so that we don't have to break memoization

  var lastState = useRef(state);
  var lastDelay = useRef(delay);
  var lastHandlers = useRef({
    onShowHandler: onShowHandler,
    onHideHandler: onHideHandler
  });
  var hasCalledShowHandler = useRef(false);
  useEffect(function () {
    lastState.current = state;
    lastDelay.current = delay;
    lastHandlers.current = {
      onShowHandler: onShowHandler,
      onHideHandler: onHideHandler
    };
  }, [delay, onHideHandler, onShowHandler, state]);
  var start = useCallback(function (api) {
    // @ts-ignore
    apiRef.current = api;
    hasCalledShowHandler.current = false;
  }, []);
  var done = useCallback(function () {
    if (!apiRef.current) {
      return;
    } // Only call onHideHandler if we have called onShowHandler


    if (hasCalledShowHandler.current) {
      lastHandlers.current.onHideHandler();
    } // @ts-ignore


    apiRef.current = null; // @ts-ignore

    hasCalledShowHandler.current = false; // just in case

    setState('hide');
  }, []);
  var abort = useCallback(function () {
    if (!apiRef.current) {
      return;
    }

    apiRef.current.abort(); // Only call onHideHandler if we have called onShowHandler

    if (hasCalledShowHandler.current) {
      lastHandlers.current.onHideHandler();
    } // @ts-ignore


    apiRef.current = null;
  }, []);
  useEffect(function mount() {
    return function unmount() {
      if (apiRef.current) {
        abort();
      }
    };
  }, [abort]);
  var showTooltip = useCallback(function (source) {
    if (apiRef.current && !apiRef.current.isActive()) {
      abort();
    } // Tell the tooltip to keep showing


    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }

    var entry = {
      source: source,
      delay: lastDelay.current,
      show: function show(_ref2) {
        var isImmediate = _ref2.isImmediate;

        // Call the onShow handler if it hasn't been called yet
        if (!hasCalledShowHandler.current) {
          hasCalledShowHandler.current = true;
          lastHandlers.current.onShowHandler();
        }

        setState(isImmediate ? 'show-immediate' : 'show-fade-in');
      },
      hide: function hide(_ref3) {
        var isImmediate = _ref3.isImmediate;
        setState(function (current) {
          if (current !== 'hide') {
            return isImmediate ? 'hide' : 'fade-out';
          }

          return current;
        });
      },
      done: done
    };
    var api = show(entry);
    start(api);
  }, [abort, done, start]);
  var hideTooltipOnEsc = useCallback(function () {
    var _apiRef$current;

    (_apiRef$current = apiRef.current) === null || _apiRef$current === void 0 ? void 0 : _apiRef$current.requestHide({
      isImmediate: true
    });
  }, [apiRef]);
  useCloseOnEscapePress({
    onClose: hideTooltipOnEsc,
    isDisabled: state === 'hide' || state === 'fade-out'
  });
  useEffect(function () {
    if (state === 'hide') {
      return noop;
    }

    var unbind = bind(window, {
      type: 'scroll',
      listener: function listener() {
        if (apiRef.current) {
          apiRef.current.requestHide({
            isImmediate: true
          });
        }
      },
      options: {
        capture: true,
        passive: true,
        once: true
      }
    });
    return unbind;
  }, [state]);
  var onMouseDown = useCallback(function () {
    if (hideTooltipOnMouseDown && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnMouseDown]);
  var onClick = useCallback(function () {
    if (hideTooltipOnClick && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnClick]); // Ideally we would be using onMouseEnter here, but
  // because we are binding the event to the target parent
  // we need to listen for the mouseover of all sub elements
  // This means when moving along a tooltip we are quickly toggling
  // between api.requestHide and api.keep. This it not ideal

  var onMouseOver = useCallback(function (event) {
    // Ignoring events from the container ref
    if (event.target === containerRef.current) {
      return;
    } // Using prevent default as a signal that parent tooltips


    if (event.defaultPrevented) {
      return;
    }

    event.preventDefault();
    var source = position === 'mouse' ? {
      type: 'mouse',
      // TODO: ideally not recalculating this object each time
      mouse: getMousePosition({
        left: event.clientX,
        top: event.clientY
      })
    } : {
      type: 'keyboard'
    };
    showTooltip(source);
  }, [position, showTooltip]); // Ideally we would be using onMouseEnter here, but
  // because we are binding the event to the target parent
  // we need to listen for the mouseout of all sub elements
  // This means when moving along a tooltip we are quickly toggling
  // between api.requestHide and api.keep. This it not ideal

  var onMouseOut = useCallback(function (event) {
    // Ignoring events from the container ref
    if (event.target === containerRef.current) {
      return;
    } // Using prevent default as a signal that parent tooltips


    if (event.defaultPrevented) {
      return;
    }

    event.preventDefault();

    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onMouseOverTooltip = useCallback(function () {
    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }
  }, []);
  var onFocus = useCallback(function () {
    showTooltip({
      type: 'keyboard'
    });
  }, [showTooltip]);
  var onBlur = useCallback(function () {
    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onAnimationFinished = useCallback(function (transition) {
    // Using lastState here because motion is not picking up the latest value
    if (transition === 'exiting' && lastState.current === 'fade-out' && apiRef.current) {
      // @ts-ignore: refs are writeable
      apiRef.current.finishHideAnimation();
    }
  }, []); // Doing a cast because typescript is struggling to narrow the type

  var CastTargetContainer = TargetContainer;
  var shouldRenderTooltipContainer = state !== 'hide' && Boolean(content);
  var shouldRenderTooltipChildren = state === 'show-immediate' || state === 'show-fade-in';

  var getReferentElement = function getReferentElement() {
    // Use the initial mouse position if appropriate, or the target element
    var api = apiRef.current;
    var initialMouse = api ? api.getInitialMouse() : null;

    if (position === 'mouse' && initialMouse) {
      return initialMouse;
    }

    return targetRef.current || undefined;
  };

  return jsx(React.Fragment, null, jsx(CastTargetContainer, {
    onMouseOver: onMouseOver,
    onMouseOut: onMouseOut,
    onClick: onClick,
    onMouseDown: onMouseDown,
    onFocus: onFocus,
    onBlur: onBlur,
    ref: setRef,
    "data-testid": testId ? "".concat(testId, "--container") : undefined,
    role: "presentation"
  }, children), shouldRenderTooltipContainer ? jsx(Portal, {
    zIndex: tooltipZIndex
  }, jsx(Popper, {
    placement: tooltipPosition,
    referenceElement: getReferentElement(),
    strategy: strategy
  }, function (_ref4) {
    var ref = _ref4.ref,
        style = _ref4.style,
        update = _ref4.update;
    return jsx(ExitingPersistence, {
      appear: true
    }, shouldRenderTooltipChildren && jsx(FadeIn, {
      onFinish: onAnimationFinished,
      duration: state === 'show-immediate' ? 0 : undefined
    }, function (_ref5) {
      var className = _ref5.className;
      return (// eslint-disable-next-line jsx-a11y/mouse-events-have-key-events
        jsx(Container, {
          ref: ref,
          className: "Tooltip ".concat(className),
          style: style,
          truncate: truncate,
          placement: tooltipPosition,
          testId: testId,
          onMouseOut: onMouseOut,
          onMouseOver: onMouseOverTooltip
        }, typeof content === 'function' ? content({
          update: update
        }) : content)
      );
    }));
  })) : null);
}

Tooltip.displayName = 'Tooltip';
export default Tooltip;