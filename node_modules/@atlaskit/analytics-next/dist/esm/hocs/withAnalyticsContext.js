import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { forwardRef, useMemo } from 'react';
import AnalyticsContext from '../components/AnalyticsContext';

var withAnalyticsContext = function withAnalyticsContext(defaultData) {
  return function (WrappedComponent) {
    var WithAnalyticsContext = /*#__PURE__*/forwardRef(function (_ref, ref) {
      var analyticsContext = _ref.analyticsContext,
          rest = _objectWithoutProperties(_ref, ["analyticsContext"]);

      var analyticsData = useMemo(function () {
        return _objectSpread(_objectSpread({}, defaultData), analyticsContext);
      }, [analyticsContext]);
      return /*#__PURE__*/React.createElement(AnalyticsContext, {
        data: analyticsData
      }, /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, rest, {
        ref: ref
      })));
    }); // @ts-ignore

    WithAnalyticsContext.displayName = "WithAnalyticsContext(".concat( // @ts-ignore disneyName doesn't exist on type
    WrappedComponent.displayName || WrappedComponent.name, ")");
    return WithAnalyticsContext;
  };
};

export default withAnalyticsContext;