import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { default as AnalyticsReactContext } from '@atlaskit/analytics-next-stable-react-context';
var ContextTypes = {
  getAtlaskitAnalyticsEventHandlers: PropTypes.func,
  getAtlaskitAnalyticsContext: PropTypes.func
};

var noop = function noop() {
  return [];
}; // eslint-disable-next-line @repo/internal/react/no-class-components


var AnalyticsListener = /*#__PURE__*/function (_Component) {
  _inherits(AnalyticsListener, _Component);

  var _super = _createSuper(AnalyticsListener);

  function AnalyticsListener(props) {
    var _this;

    _classCallCheck(this, AnalyticsListener);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "getChildContext", function () {
      return {
        getAtlaskitAnalyticsEventHandlers: _this.getAnalyticsEventHandlers,
        getAtlaskitAnalyticsContext: _this.getAtlaskitAnalyticsContext
      };
    });

    _defineProperty(_assertThisInitialized(_this), "getAnalyticsEventHandlers", function () {
      var _this$props = _this.props,
          channel = _this$props.channel,
          onEvent = _this$props.onEvent;
      var _this$context$getAtla = _this.context.getAtlaskitAnalyticsEventHandlers,
          getAtlaskitAnalyticsEventHandlers = _this$context$getAtla === void 0 ? noop : _this$context$getAtla;

      var handler = function handler(event, eventChannel) {
        if (channel === '*' || channel === eventChannel) {
          onEvent(event, eventChannel);
        }
      };

      return [handler].concat(_toConsumableArray(getAtlaskitAnalyticsEventHandlers()));
    });

    _defineProperty(_assertThisInitialized(_this), "getAtlaskitAnalyticsContext", function () {
      var _this$context$getAtla2 = _this.context.getAtlaskitAnalyticsContext,
          getAtlaskitAnalyticsContext = _this$context$getAtla2 === void 0 ? noop : _this$context$getAtla2;
      return getAtlaskitAnalyticsContext();
    });

    _this.contextValue = {
      getAtlaskitAnalyticsContext: _this.getAtlaskitAnalyticsContext,
      getAtlaskitAnalyticsEventHandlers: _this.getAnalyticsEventHandlers
    };
    return _this;
  }

  _createClass(AnalyticsListener, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      return /*#__PURE__*/React.createElement(AnalyticsReactContext.Provider, {
        value: this.contextValue
      }, children);
    }
  }]);

  return AnalyticsListener;
}(Component);

_defineProperty(AnalyticsListener, "contextTypes", ContextTypes);

_defineProperty(AnalyticsListener, "childContextTypes", ContextTypes);

export default AnalyticsListener;