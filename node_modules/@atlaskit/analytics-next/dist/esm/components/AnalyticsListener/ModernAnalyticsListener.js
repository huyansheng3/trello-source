import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import React, { useCallback, useMemo } from 'react';
import { default as AnalyticsReactContext } from '@atlaskit/analytics-next-stable-react-context';
import { useAnalyticsContext } from '../../hooks/useAnalyticsContext';
import { useTrackedRef } from '../../hooks/useTrackedRef';

var AnalyticsListener = function AnalyticsListener(_ref) {
  var children = _ref.children,
      channel = _ref.channel,
      onEvent = _ref.onEvent;
  var analyticsContext = useAnalyticsContext();
  var onEventRef = useTrackedRef(onEvent);
  var channelRef = useTrackedRef(channel);
  var getAtlaskitAnalyticsEventHandlers = useCallback(function () {
    var thisHandler = function thisHandler(event, eventChannel) {
      if (channelRef.current === '*' || channelRef.current === eventChannel) {
        onEventRef.current(event, eventChannel);
      }
    };

    return [].concat(_toConsumableArray(analyticsContext.getAtlaskitAnalyticsEventHandlers()), [thisHandler]);
  }, [analyticsContext, channelRef, onEventRef]);
  var value = useMemo(function () {
    return {
      getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers,
      getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext
    };
  }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);
  return /*#__PURE__*/React.createElement(AnalyticsReactContext.Provider, {
    value: value
  }, children);
};

export default AnalyticsListener;