import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { useContext, useMemo } from 'react';
import { createStore } from 'redux';
import { cardReducer } from '../reducers';
import { SmartCardContext } from '.';
import { MAX_RELOAD_DELAY, MAX_LOADING_DELAY } from '../actions/constants';
import CardClient from '../../client';
import { extractPreview } from '../../extractors/common/preview';
import { getUrl } from '../helpers';
export function SmartCardProvider(_ref) {
  var storeOptions = _ref.storeOptions,
      customClient = _ref.client,
      customCacheOptions = _ref.cacheOptions,
      customAuthFlow = _ref.authFlow,
      children = _ref.children,
      renderers = _ref.renderers;
  var parentContext = useContext(SmartCardContext);
  var providerValue = useMemo(function () {
    var _ref2 = storeOptions || {
      initialState: {}
    },
        initialState = _ref2.initialState;

    var client = customClient || new CardClient();
    var store = createStore(cardReducer, initialState);
    var authFlow = customAuthFlow || 'oauth2';
    var cacheOptions = customCacheOptions || {
      maxAge: MAX_RELOAD_DELAY,
      maxLoadingDelay: MAX_LOADING_DELAY
    };

    var getPreview = function getPreview(url, platform) {
      var cardState = getUrl(store, url);
      return cardState.details ? extractPreview(cardState.details.data, platform) : undefined;
    };

    return {
      renderers: renderers,
      store: store,
      prefetchStore: {},
      connections: {
        client: client
      },
      config: _objectSpread(_objectSpread({}, cacheOptions), {}, {
        authFlow: authFlow
      }),
      extractors: {
        getPreview: getPreview
      }
    };
  }, [customClient, customCacheOptions, customAuthFlow, storeOptions, renderers]);
  return /*#__PURE__*/React.createElement(SmartCardContext.Provider, {
    value: parentContext || providerValue
  }, children);
}
export default SmartCardProvider;