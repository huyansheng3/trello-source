import { extractVisitUrl } from '../extractors/common/primitives/extractVisitUrl';
export var getByDefinitionId = function getByDefinitionId(definitionId, store) {
  var urls = Object.keys(store);
  return urls.filter(function (url) {
    var details = store[url].details;
    return details && details.meta.definitionId === definitionId;
  });
};
export var getUrl = function getUrl(store, url) {
  return store.getState()[url] || {
    status: 'pending',
    lastUpdatedAt: Date.now()
  };
};
export var getClickUrl = function getClickUrl(url, jsonLd) {
  if (jsonLd && jsonLd.data) {
    var visitUrl = extractVisitUrl(jsonLd.data);

    if (visitUrl) {
      return visitUrl;
    }
  }

  return url;
};
export var getDefinitionId = function getDefinitionId(details) {
  return details && details.meta && details.meta.definitionId;
};
export var getExtensionKey = function getExtensionKey(details) {
  return details && details.meta && details.meta.key;
};
export var getResourceType = function getResourceType(details) {
  return details && details.meta && details.meta.resourceType;
};
export var getServices = function getServices(details) {
  return details && details.meta.auth || [];
};
export var hasResolved = function hasResolved(details) {
  return details && isAccessible(details) && isVisible(details);
};
export var isAccessible = function isAccessible(_ref) {
  var access = _ref.meta.access;
  return access === 'granted';
};
export var isVisible = function isVisible(_ref2) {
  var visibility = _ref2.meta.visibility;
  return visibility === 'restricted' || visibility === 'public';
};
export var getStatus = function getStatus(_ref3) {
  var meta = _ref3.meta;
  var access = meta.access,
      visibility = meta.visibility;

  switch (access) {
    case 'forbidden':
      if (visibility === 'not_found') {
        return 'not_found';
      } else {
        return 'forbidden';
      }

    case 'unauthorized':
      return 'unauthorized';

    default:
      return 'resolved';
  }
};
export var isFinalState = function isFinalState(status) {
  return ['unauthorized', 'forbidden', 'errored', 'resolved', 'not_found'].indexOf(status) > -1;
};