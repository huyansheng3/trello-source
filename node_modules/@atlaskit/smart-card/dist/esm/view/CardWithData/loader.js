import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
export var CardWithDataRenderer = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(CardWithDataRenderer, _React$PureComponent);

  var _super = _createSuper(CardWithDataRenderer);

  function CardWithDataRenderer() {
    _classCallCheck(this, CardWithDataRenderer);

    return _super.apply(this, arguments);
  }

  _createClass(CardWithDataRenderer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (CardWithDataRenderer.CardContent === null) {
        (this.props.importer || CardWithDataRenderer.moduleImporter)(this);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          appearance = _this$props.appearance,
          data = _this$props.data,
          isSelected = _this$props.isSelected,
          onClick = _this$props.onClick,
          onResolve = _this$props.onResolve,
          testId = _this$props.testId,
          showActions = _this$props.showActions,
          inlinePreloaderStyle = _this$props.inlinePreloaderStyle;

      if (!data) {
        throw new Error('@atlaskit/smart-cards: you are trying to render a card with data, but does not provide any');
      }

      if (CardWithDataRenderer.CardContent) {
        return /*#__PURE__*/React.createElement(CardWithDataRenderer.CardContent, {
          inlinePreloaderStyle: inlinePreloaderStyle,
          appearance: appearance,
          data: data,
          isSelected: isSelected,
          onClick: onClick,
          onResolve: onResolve,
          testId: testId,
          showActions: showActions
        });
      }

      return /*#__PURE__*/React.createElement("div", {
        "data-card-with-data": true
      });
    }
  }], [{
    key: "moduleImporter",
    value: function moduleImporter(target) {
      import(
      /* webpackChunkName: "@atlaskit-internal_smartcard-datacardcontent" */
      './component').then(function (module) {
        CardWithDataRenderer.CardContent = module.CardWithDataContent;
        target.forceUpdate();
      });
    }
  }]);

  return CardWithDataRenderer;
}(React.PureComponent);

_defineProperty(CardWithDataRenderer, "CardContent", null);