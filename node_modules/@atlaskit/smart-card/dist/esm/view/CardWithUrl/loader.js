import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import uuid from 'uuid';
import { CardLinkView } from '@atlaskit/media-ui';
import { uiRenderFailedEvent, fireSmartLinkEvent } from '../../utils/analytics';
import { clearMarks, clearMeasures } from '../../utils/performance';
export var CardWithURLRenderer = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(CardWithURLRenderer, _React$PureComponent);

  var _super = _createSuper(CardWithURLRenderer);

  function CardWithURLRenderer(props) {
    var _this;

    _classCallCheck(this, CardWithURLRenderer);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "dispatchAnalytics", function (analyticsPayload) {
      var _this$props = _this.props,
          appearance = _this$props.appearance,
          createAnalyticsEvent = _this$props.createAnalyticsEvent;

      if (analyticsPayload && analyticsPayload.attributes) {
        // Update if we haven't already set the display - possible
        // in the case of `preview` which is rendered differently.
        if (!analyticsPayload.attributes.display) {
          analyticsPayload.attributes.display = appearance;
        }
      }

      fireSmartLinkEvent(analyticsPayload, createAnalyticsEvent);
    });

    _this.state = {
      id: uuid()
    };
    return _this;
  }

  _createClass(CardWithURLRenderer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (CardWithURLRenderer.CardContent === null) {
        (this.props.importer || CardWithURLRenderer.moduleImporter)(this);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var id = this.state.id;
      clearMarks(id);
      clearMeasures(id);
    }
  }, {
    key: "componentDidCatch",
    value: function componentDidCatch(error, errorInfo) {
      var appearance = this.props.appearance; // NB: APIErrors are thrown in response to Object Resolver Service.
      // In these cases, control is handed back to the Editor. We do not
      // fire an event for these, as they do not cover failed UI render events.

      if (error.name === 'APIError') {
        throw error;
      } // NB: the rest of the errors caught here are unexpected, and correlate
      // to the reliability of the smart-card front-end components. We instrument
      // these in order to measure our front-end reliability.
      else {
          this.dispatchAnalytics(uiRenderFailedEvent(appearance, error, errorInfo));
        }
    } // Wrapper around analytics.

  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          url = _this$props2.url,
          appearance = _this$props2.appearance,
          isSelected = _this$props2.isSelected,
          isFrameVisible = _this$props2.isFrameVisible,
          onClick = _this$props2.onClick,
          container = _this$props2.container,
          onResolve = _this$props2.onResolve,
          testId = _this$props2.testId,
          showActions = _this$props2.showActions,
          inheritDimensions = _this$props2.inheritDimensions,
          platform = _this$props2.platform,
          embedIframeRef = _this$props2.embedIframeRef,
          inlinePreloaderStyle = _this$props2.inlinePreloaderStyle;

      if (!url) {
        throw new Error('@atlaskit/smart-card: url property is missing.');
      }

      return CardWithURLRenderer.CardContent !== null ? /*#__PURE__*/React.createElement(CardWithURLRenderer.CardContent, {
        id: this.state.id,
        url: url,
        appearance: appearance,
        onClick: onClick,
        isSelected: isSelected,
        isFrameVisible: isFrameVisible,
        dispatchAnalytics: this.dispatchAnalytics,
        container: container,
        onResolve: onResolve,
        testId: testId,
        showActions: showActions,
        inheritDimensions: inheritDimensions,
        platform: platform,
        embedIframeRef: embedIframeRef,
        inlinePreloaderStyle: inlinePreloaderStyle
      }) : /*#__PURE__*/React.createElement(CardLinkView, {
        key: 'chunk-placeholder',
        link: url
      });
    }
  }], [{
    key: "moduleImporter",
    value: function moduleImporter(target) {
      import(
      /* webpackChunkName: "@atlaskit-internal_smartcard-urlcardcontent" */
      './component-lazy/index').then(function (module) {
        CardWithURLRenderer.CardContent = module.LazyCardWithUrlContent;
        target.forceUpdate();
      });
    }
  }]);

  return CardWithURLRenderer;
}(React.PureComponent);

_defineProperty(CardWithURLRenderer, "CardContent", null);