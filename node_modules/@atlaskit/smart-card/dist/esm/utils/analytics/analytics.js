import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { name as packageName, version as packageVersion } from '../../version.json';
import { getMeasure } from '../performance';
export var ANALYTICS_CHANNEL = 'media';
export var context = {
  componentName: 'smart-cards',
  packageName: packageName,
  packageVersion: packageVersion
};
export var fireSmartLinkEvent = function fireSmartLinkEvent(payload, createAnalyticsEvent) {
  if (createAnalyticsEvent) {
    createAnalyticsEvent(payload).fire(ANALYTICS_CHANNEL);
  }
};
export var resolvedEvent = function resolvedEvent(id, definitionId, extensionKey, resourceType) {
  return {
    action: 'resolved',
    actionSubject: 'smartLink',
    eventType: 'operational',
    attributes: _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      id: id
    }, context), definitionId ? {
      definitionId: definitionId
    } : {}), extensionKey ? {
      extensionKey: extensionKey
    } : {}), resourceType ? {
      resourceType: resourceType
    } : {})
  };
};
export var unresolvedEvent = function unresolvedEvent(id, status, definitionId, extensionKey, resourceType, error) {
  return {
    action: 'unresolved',
    actionSubject: 'smartLink',
    eventType: 'operational',
    attributes: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
      id: id
    }, context), definitionId ? {
      definitionId: definitionId
    } : {}), extensionKey ? {
      extensionKey: extensionKey
    } : {}), resourceType ? {
      resourceType: resourceType
    } : {}), {}, {
      reason: status,
      error: error ? {
        message: error.message,
        kind: error.kind,
        type: error.type
      } : undefined
    })
  };
};
export var invokeSucceededEvent = function invokeSucceededEvent(id, providerKey, actionType, display) {
  var measure = getMeasure(id, 'resolved') || {
    duration: undefined
  };
  return {
    action: 'resolved',
    actionSubject: 'smartLinkAction',
    eventType: 'operational',
    attributes: _objectSpread(_objectSpread({}, context), {}, {
      id: id,
      actionType: actionType,
      display: display,
      definitionId: providerKey,
      duration: measure.duration
    })
  };
};
export var invokeFailedEvent = function invokeFailedEvent(id, providerKey, actionType, display, reason) {
  var measure = getMeasure(id, 'errored') || {
    duration: undefined
  };
  return {
    action: 'unresolved',
    actionSubject: 'smartLinkAction',
    eventType: 'operational',
    attributes: _objectSpread(_objectSpread({}, context), {}, {
      id: id,
      actionType: actionType,
      display: display,
      definitionId: providerKey,
      duration: measure.duration,
      reason: reason
    })
  };
};
export var connectSucceededEvent = function connectSucceededEvent(definitionId, extensionKey) {
  return {
    action: 'connectSucceeded',
    actionSubject: 'smartLink',
    eventType: 'operational',
    attributes: _objectSpread(_objectSpread(_objectSpread({}, context), definitionId ? {
      definitionId: definitionId
    } : {}), extensionKey ? {
      extensionKey: extensionKey
    } : {})
  };
};
export var connectFailedEvent = function connectFailedEvent(definitionId, extensionKey, reason) {
  return {
    action: 'connectFailed',
    actionSubject: 'smartLink',
    actionSubjectId: reason,
    eventType: 'operational',
    attributes: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, context), reason ? {
      reason: reason
    } : {}), definitionId ? {
      definitionId: definitionId
    } : {}), extensionKey ? {
      extensionKey: extensionKey
    } : {})
  };
};
export var trackAppAccountConnected = function trackAppAccountConnected(definitionId, extensionKey) {
  return {
    action: 'connected',
    actionSubject: 'applicationAccount',
    eventType: 'track',
    attributes: _objectSpread(_objectSpread(_objectSpread({}, context), definitionId ? {
      definitionId: definitionId
    } : {}), extensionKey ? {
      extensionKey: extensionKey
    } : {})
  };
};
export var uiAuthEvent = function uiAuthEvent(display, definitionId, extensionKey) {
  return {
    action: 'clicked',
    actionSubject: 'button',
    actionSubjectId: 'connectAccount',
    eventType: 'ui',
    attributes: _objectSpread(_objectSpread({}, context), {}, {
      definitionId: definitionId || '',
      extensionKey: extensionKey || '',
      display: display
    })
  };
};
export var uiAuthAlternateAccountEvent = function uiAuthAlternateAccountEvent(display, definitionId, extensionKey) {
  return {
    action: 'clicked',
    actionSubject: 'smartLink',
    actionSubjectId: 'tryAnotherAccount',
    eventType: 'ui',
    attributes: _objectSpread(_objectSpread({}, context), {}, {
      definitionId: definitionId || '',
      extensionKey: extensionKey || '',
      display: display
    })
  };
};
export var uiCardClickedEvent = function uiCardClickedEvent(display, definitionId, extensionKey) {
  return {
    action: 'clicked',
    actionSubject: 'smartLink',
    eventType: 'ui',
    attributes: _objectSpread(_objectSpread({}, context), {}, {
      definitionId: definitionId || '',
      extensionKey: extensionKey || '',
      display: display
    })
  };
};
export var uiActionClickedEvent = function uiActionClickedEvent(providerKey, actionType, display) {
  return {
    action: 'clicked',
    actionSubject: 'smartLinkAction',
    eventType: 'ui',
    attributes: _objectSpread(_objectSpread({}, context), {}, {
      display: display,
      definitionId: providerKey,
      actionType: actionType
    })
  };
};
export var uiClosedAuthEvent = function uiClosedAuthEvent(display, definitionId, extensionKey) {
  return {
    action: 'closed',
    actionSubject: 'consentModal',
    eventType: 'ui',
    attributes: _objectSpread(_objectSpread({}, context), {}, {
      definitionId: definitionId || '',
      extensionKey: extensionKey || '',
      display: display
    })
  };
};
export var screenAuthPopupEvent = function screenAuthPopupEvent(definitionId, extensionKey) {
  return {
    actionSubject: 'consentModal',
    eventType: 'screen',
    attributes: _objectSpread(_objectSpread({}, context), {}, {
      definitionId: definitionId || '',
      extensionKey: extensionKey || ''
    })
  };
};
export var uiRenderSuccessEvent = function uiRenderSuccessEvent(display, definitionId, extensionKey) {
  return {
    action: 'renderSuccess',
    actionSubject: 'smartLink',
    eventType: 'ui',
    attributes: _objectSpread(_objectSpread({}, context), {}, {
      definitionId: definitionId || '',
      extensionKey: extensionKey || '',
      display: display
    })
  };
};
export var uiRenderFailedEvent = function uiRenderFailedEvent(display, error, errorInfo) {
  return {
    actionSubject: 'smartLink',
    action: 'renderFailed',
    eventType: 'ui',
    attributes: {
      error: error,
      errorInfo: errorInfo,
      display: display
    }
  };
};