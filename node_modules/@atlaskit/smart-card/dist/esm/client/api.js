import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ALLOWED_RESPONSE_STATUS_CODES = [200, 401, 404];
export var NetworkError = /*#__PURE__*/function (_Error) {
  _inherits(NetworkError, _Error);

  var _super = _createSuper(NetworkError);

  function NetworkError(error) {
    _classCallCheck(this, NetworkError);

    return _super.call(this, error);
  }

  return NetworkError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
export function request(_x, _x2, _x3, _x4) {
  return _request.apply(this, arguments);
}

function _request() {
  _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, url, data, headers) {
    var requestConfig, response;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            requestConfig = _objectSpread({
              method: method,
              credentials: 'include',
              headers: _objectSpread({
                Accept: 'application/json',
                'Cache-Control': 'no-cache',
                'Content-Type': 'application/json'
              }, headers)
            }, data ? {
              body: JSON.stringify(data)
            } : {});
            _context.prev = 1;
            _context.next = 4;
            return fetch(url, requestConfig);

          case 4:
            response = _context.sent;

            if (!(response.ok || ALLOWED_RESPONSE_STATUS_CODES.includes(response.status))) {
              _context.next = 9;
              break;
            }

            _context.next = 8;
            return response.json();

          case 8:
            return _context.abrupt("return", _context.sent);

          case 9:
            throw response;

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](1);

            if (!(typeof _context.t0 === 'string' || _context.t0 instanceof TypeError)) {
              _context.next = 16;
              break;
            }

            throw new NetworkError(_context.t0);

          case 16:
            throw _context.t0;

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 12]]);
  }));
  return _request.apply(this, arguments);
}