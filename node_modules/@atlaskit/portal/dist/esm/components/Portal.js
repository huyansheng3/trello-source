import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { canUseDOM } from 'exenv';
import ReactDOM from 'react-dom';
import invariant from 'tiny-invariant';
import { layers } from '@atlaskit/theme/constants';
import { PORTAL_MOUNT_EVENT, PORTAL_UNMOUNT_EVENT } from '../constants';

var createContainer = function createContainer(zIndex) {
  var container = document.createElement('div');
  container.setAttribute('class', 'atlaskit-portal');
  container.setAttribute('style', "z-index: ".concat(zIndex, ";"));
  return container;
};

var getBody = function getBody() {
  invariant(document && document.body, 'cannot find document.body');
  return document.body;
};
/**
 * Reverses the name: zIndex object so we can quickly access it using the zIndex value as the key.
 */


var zIndexToName = Object.keys(layers).reduce(function (acc, name) {
  var layerName = name;
  var value = layers[layerName]();
  acc[value] = layerName;
  return acc;
}, {});

var getLayerName = function getLayerName(zIndex) {
  return Object.prototype.hasOwnProperty.call(zIndexToName, zIndex) ? zIndexToName[zIndex] : null;
};

var getEvent = function getEvent(eventName, zIndex) {
  var detail = {
    layer: getLayerName(Number(zIndex)),
    zIndex: zIndex
  }; // In ie11 the CustomEvent object exists, but it cannot be used as a constructor

  if (typeof CustomEvent === 'function') {
    return new CustomEvent(eventName, {
      detail: detail
    });
  } // CustomEvent constructor API not supported (ie11)
  // Using `new Event` or `new CustomEvent` does not work in ie11


  var event = document.createEvent('CustomEvent');
  var params = {
    bubbles: true,
    cancellable: true,
    detail: detail
  };
  event.initCustomEvent(eventName, params.bubbles, params.cancellable, params.detail);
  return event;
};

var firePortalEvent = function firePortalEvent(eventName, zIndex) {
  var event = getEvent(eventName, zIndex);
  window.dispatchEvent(event);
};

var getPortalParent = function getPortalParent() {
  var parentElement = document.querySelector('body > .atlaskit-portal-container');

  if (!parentElement) {
    var parent = document.createElement('div');
    parent.setAttribute('class', 'atlaskit-portal-container');
    parent.setAttribute('style', "display: flex;");
    getBody().appendChild(parent);
    return parent;
  }

  return parentElement;
}; // This is a generic component does two things:
// 1. Portals it's children using React.createPortal
// 2. Creates the DOM node container for the portal based on props
// 3. Ensures DOM the container creates it's own stacking context


var Portal = /*#__PURE__*/function (_React$Component) {
  _inherits(Portal, _React$Component);

  var _super = _createSuper(Portal);

  function Portal() {
    var _this;

    _classCallCheck(this, Portal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      container: canUseDOM ? createContainer(_this.props.zIndex) : undefined,
      portalIsMounted: false
    });

    return _this;
  }

  _createClass(Portal, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var container = this.state.container;
      var zIndex = this.props.zIndex;

      if (container && prevProps.zIndex !== zIndex) {
        var newContainer = createContainer(zIndex);
        getPortalParent().replaceChild(container, newContainer); // eslint-disable-next-line react/no-did-update-set-state

        this.setState({
          container: newContainer
        });
      } else if (!prevState.container && container) {
        // SSR path
        getPortalParent().appendChild(container);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var container = this.state.container;
      var zIndex = this.props.zIndex;

      if (container) {
        getPortalParent().appendChild(container);
      } else {
        // SSR path
        var newContainer = createContainer(zIndex); // eslint-disable-next-line react/no-did-mount-set-state

        this.setState({
          container: newContainer
        });
      } // eslint-disable-next-line react/no-did-mount-set-state


      this.setState({
        portalIsMounted: true
      });
      firePortalEvent(PORTAL_MOUNT_EVENT, Number(zIndex));
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var container = this.state.container;
      var zIndex = this.props.zIndex;

      if (container) {
        getPortalParent().removeChild(container); // clean up parent element if there are no more portals

        var portals = !!document.querySelector('body > .atlaskit-portal-container > .atlaskit-portal');

        if (!portals) {
          getBody().removeChild(getPortalParent());
        }
      }

      firePortalEvent(PORTAL_UNMOUNT_EVENT, Number(zIndex));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          container = _this$state.container,
          portalIsMounted = _this$state.portalIsMounted;
      return container && portalIsMounted ? /*#__PURE__*/ReactDOM.createPortal(this.props.children, container) : null;
    }
  }]);

  return Portal;
}(React.Component);

_defineProperty(Portal, "defaultProps", {
  zIndex: 0
});

export default Portal;