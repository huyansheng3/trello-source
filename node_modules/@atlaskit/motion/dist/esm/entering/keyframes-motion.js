import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useEffect, useState } from 'react';
import { ClassNames, keyframes } from '@emotion/core';
import { prefersReducedMotion } from '../utils/accessibility';
import { largeDurationMs } from '../utils/durations';
import { useSetTimeout } from '../utils/timer-hooks';
import { useExitingPersistence } from './exiting-persistence';
import { useStaggeredEntrance } from './staggered-entrance';

/**
 * Used to multiply the initial duration for exiting motions.
 */
var EXITING_MOTION_MULTIPLIER = 0.5;
/**
 * This is the base INTERNAL component used for all other entering motions.
 * This does not need Javascript to execute on the client so it will run immediately
 * for any SSR rendered React apps before the JS has executed.
 */

var EnteringMotion = function EnteringMotion(_ref) {
  var children = _ref.children,
      animationTimingFunction = _ref.animationTimingFunction,
      enteringAnimation = _ref.enteringAnimation,
      exitingAnimation = _ref.exitingAnimation,
      isPaused = _ref.isPaused,
      onFinishMotion = _ref.onFinish,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? largeDurationMs : _ref$duration;
  var staggered = useStaggeredEntrance();

  var _useExitingPersistenc = useExitingPersistence(),
      isExiting = _useExitingPersistenc.isExiting,
      onExitFinished = _useExitingPersistenc.onFinish,
      appear = _useExitingPersistenc.appear;

  var setTimeout = useSetTimeout();
  var paused = isPaused || !staggered.isReady;
  var delay = isExiting ? 0 : staggered.delay;
  var state = isExiting ? 'exiting' : 'entering';

  var _useState = useState(appear),
      _useState2 = _slicedToArray(_useState, 2),
      hasAnimationStyles = _useState2[0],
      setHasAnimationStyles = _useState2[1];

  useEffect(function () {
    // Tracking this to prevent changing state on an unmounted component
    var isCancelled = false;

    if (paused) {
      return;
    } // On initial mount if elements aren't set to animate on appear, we return early and callback


    if (!appear) {
      onFinishMotion && onFinishMotion(state);
      return;
    } // Elements may need animation styles back after initial mount (they could animate out)


    setHasAnimationStyles(true);
    setTimeout(function () {
      if (state === 'exiting') {
        onExitFinished && onExitFinished();
      }

      if (!isCancelled) {
        setHasAnimationStyles(false);
      }

      onFinishMotion && onFinishMotion(state);
    }, isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration + delay);
    return function () {
      isCancelled = true;
    }; // We ignore this for onFinishMotion as consumers could potentially inline the function
    // which would then trigger this effect every re-render.
    // We want to make it easier for consumers so we go down this path unfortunately.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout]);
  return /*#__PURE__*/React.createElement(ClassNames, null, function (_ref2) {
    var css = _ref2.css;
    return children({
      ref: staggered.ref,
      className: hasAnimationStyles ? css(_objectSpread({
        animationName: "".concat(keyframes(isExiting ? exitingAnimation || enteringAnimation : enteringAnimation)),
        animationTimingFunction: animationTimingFunction(state),
        animationDelay: "".concat(delay, "ms"),
        animationFillMode: isExiting ? 'forwards' : 'backwards',
        animationDuration: "".concat(isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration, "ms"),
        animationPlayState: paused ? 'paused' : 'running'
      }, prefersReducedMotion())) : ''
    }, state);
  });
};

export default EnteringMotion;