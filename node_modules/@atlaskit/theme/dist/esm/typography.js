import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { token } from '@atlaskit/tokens';
import * as colors from './colors';
import { gridSize, fontSize } from './constants';

var baseHeading = function baseHeading(size, lineHeight) {
  return {
    fontSize: "".concat(size / fontSize(), "em"),
    fontStyle: 'inherit',
    lineHeight: lineHeight / size
  };
};

export var headingSizes = {
  h900: {
    size: 35,
    lineHeight: 40
  },
  h800: {
    size: 29,
    lineHeight: 32
  },
  h700: {
    size: 24,
    lineHeight: 28
  },
  h600: {
    size: 20,
    lineHeight: 24
  },
  h500: {
    size: 16,
    lineHeight: 20
  },
  h400: {
    size: 14,
    lineHeight: 16
  },
  h300: {
    size: 12,
    lineHeight: 16
  },
  h200: {
    size: 12,
    lineHeight: 16
  },
  h100: {
    size: 11,
    lineHeight: 16
  }
};
export var h900 = function h900() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h900.size, headingSizes.h900.lineHeight)), {}, {
    color: token('color.text.highEmphasis', colors.heading(props)),
    fontWeight: 500,
    letterSpacing: "-0.01em",
    marginTop: "".concat(gridSize() * 6.5, "px")
  });
};
export var h800 = function h800() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h800.size, headingSizes.h800.lineHeight)), {}, {
    color: token('color.text.highEmphasis', colors.heading(props)),
    fontWeight: 600,
    letterSpacing: "-0.01em",
    marginTop: "".concat(gridSize() * 5, "px")
  });
};
export var h700 = function h700() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h700.size, headingSizes.h700.lineHeight)), {}, {
    color: token('color.text.highEmphasis', colors.heading(props)),
    fontWeight: 500,
    letterSpacing: "-0.01em",
    marginTop: "".concat(gridSize() * 5, "px")
  });
};
export var h600 = function h600() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h600.size, headingSizes.h600.lineHeight)), {}, {
    color: token('color.text.highEmphasis', colors.heading(props)),
    fontWeight: 500,
    letterSpacing: "-0.008em",
    marginTop: "".concat(gridSize() * 3.5, "px")
  });
};
export var h500 = function h500() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h500.size, headingSizes.h500.lineHeight)), {}, {
    color: token('color.text.highEmphasis', colors.heading(props)),
    fontWeight: 600,
    letterSpacing: "-0.006em",
    marginTop: "".concat(gridSize() * 3, "px")
  });
};
export var h400 = function h400() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h400.size, headingSizes.h400.lineHeight)), {}, {
    color: token('color.text.highEmphasis', colors.heading(props)),
    fontWeight: 600,
    letterSpacing: "-0.003em",
    marginTop: "".concat(gridSize() * 2, "px")
  });
};
export var h300 = function h300() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h300.size, headingSizes.h300.lineHeight)), {}, {
    color: token('color.text.highEmphasis', colors.heading(props)),
    fontWeight: 600,
    marginTop: "".concat(gridSize() * 2.5, "px"),
    textTransform: "uppercase"
  });
};
export var h200 = function h200() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h200.size, headingSizes.h200.lineHeight)), {}, {
    color: token('color.text.lowEmphasis', colors.subtleHeading(props)),
    fontWeight: 600,
    marginTop: "".concat(gridSize() * 2, "px")
  });
};
export var h100 = function h100() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread({}, baseHeading(headingSizes.h100.size, headingSizes.h100.lineHeight)), {}, {
    color: token('color.text.lowEmphasis', colors.subtleHeading(props)),
    fontWeight: 700,
    marginTop: "".concat(gridSize() * 2, "px")
  });
};