import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import SpotlightInner from './SpotlightInner';
import { SpotlightConsumer } from './SpotlightManager';

var Spotlight = /*#__PURE__*/function (_React$Component) {
  _inherits(Spotlight, _React$Component);

  var _super = _createSuper(Spotlight);

  function Spotlight() {
    _classCallCheck(this, Spotlight);

    return _super.apply(this, arguments);
  }

  _createClass(Spotlight, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          targetNode = _this$props.targetNode,
          target = _this$props.target,
          _this$props$testId = _this$props.testId,
          testId = _this$props$testId === void 0 ? 'spotlight' : _this$props$testId,
          rest = _objectWithoutProperties(_this$props, ["targetNode", "target", "testId"]);

      return /*#__PURE__*/React.createElement(SpotlightConsumer, null, function (_ref) {
        var opened = _ref.opened,
            closed = _ref.closed,
            targets = _ref.targets;
        // use the targetNode prop or try get the target from context targets using name
        var actualTargetNode = targetNode || (typeof target === 'string' ? targets[target] : undefined);
        return actualTargetNode ? /*#__PURE__*/React.createElement(SpotlightInner, _extends({}, rest, {
          targetNode: actualTargetNode,
          target: target,
          onOpened: opened,
          onClosed: closed,
          testId: testId
        })) : null;
      });
    }
  }]);

  return Spotlight;
}(React.Component);

_defineProperty(Spotlight, "defaultProps", {
  dialogWidth: 400,
  pulse: true
});

export default Spotlight;