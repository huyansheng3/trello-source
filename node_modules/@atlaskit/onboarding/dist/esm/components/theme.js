import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _typeof from "@babel/runtime/helpers/typeof";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import * as colors from '@atlaskit/theme/colors';
var spotlightTheme = {
  default: {
    background: {
      default: {
        light: colors.P400,
        dark: colors.P400
      },
      hover: {
        light: colors.P200,
        dark: colors.P200
      },
      active: {
        light: colors.P500,
        dark: colors.P500
      },
      disabled: {
        light: colors.P400,
        dark: colors.P400
      },
      selected: {
        light: colors.R500,
        dark: colors.R500
      },
      focus: {
        light: colors.P400,
        dark: colors.P400
      }
    },
    boxShadow: {
      focus: {
        light: "".concat(colors.P100, " 0 0 0 2px"),
        dark: "".concat(colors.P100, " 0 0 0 2px")
      }
    },
    color: {
      default: {
        light: colors.N0,
        dark: colors.N0
      },
      hover: {
        light: colors.N0,
        dark: colors.N0
      },
      active: {
        light: colors.N0,
        dark: colors.N0
      },
      disabled: {
        light: colors.N0,
        dark: colors.DN30
      },
      selected: {
        light: colors.N0,
        dark: colors.N0
      },
      focus: {
        light: colors.N0,
        dark: colors.N0
      }
    },
    outline: {
      focus: {
        light: 'none',
        dark: 'none'
      }
    }
  },
  subtle: {
    background: {
      default: {
        light: 'none',
        dark: 'none'
      },
      hover: {
        light: colors.P200,
        dark: colors.P200
      },
      active: {
        light: colors.P500,
        dark: colors.P500
      },
      disabled: {
        light: 'none',
        dark: 'none'
      },
      selected: {
        light: colors.N700,
        dark: colors.DN0
      },
      focusSelected: {
        light: colors.N700,
        dark: colors.DN0
      }
    },
    boxShadow: {
      focus: {
        light: "".concat(colors.P100, " 0 0 0 2px"),
        dark: "".concat(colors.P100, " 0 0 0 2px")
      }
    },
    color: {
      default: {
        light: colors.N0,
        dark: colors.N0
      },
      hover: {
        light: colors.N0,
        dark: colors.N0
      },
      active: {
        light: colors.N0,
        dark: colors.N0
      },
      disabled: {
        light: colors.N0,
        dark: colors.N0
      },
      selected: {
        light: colors.N0,
        dark: colors.N0
      },
      focus: {
        light: colors.N0,
        dark: colors.N0
      }
    },
    outline: {
      focus: {
        light: 'none',
        dark: 'none'
      }
    }
  },
  'subtle-link': {
    textDecoration: {
      hover: {
        light: "underline ".concat(colors.P75),
        dark: "underline ".concat(colors.P75)
      }
    },
    textDecorationLine: {
      active: {
        light: 'none',
        dark: 'none'
      }
    },
    boxShadow: {
      focus: {
        light: "".concat(colors.P100, " 0 0 0 2px"),
        dark: "".concat(colors.P100, " 0 0 0 2px")
      }
    },
    color: {
      default: {
        light: colors.N0,
        dark: colors.N0
      },
      hover: {
        light: colors.P75,
        dark: colors.P75
      },
      active: {
        light: colors.P100,
        dark: colors.P100
      },
      disabled: {
        light: colors.P500,
        dark: colors.P500
      },
      selected: {
        light: colors.N0,
        dark: colors.N0
      },
      focus: {
        light: colors.N0,
        dark: colors.N0
      }
    }
  }
};
var modalTheme = {
  primary: {
    background: {
      default: {
        light: colors.P400,
        dark: colors.P400
      },
      hover: {
        light: colors.P200,
        dark: colors.P200
      },
      active: {
        light: colors.P500,
        dark: colors.P500
      },
      disabled: {
        light: colors.N30,
        dark: colors.DN70
      },
      selected: {
        light: colors.R500,
        dark: colors.R500
      },
      focus: {
        light: colors.P400,
        dark: colors.P400
      }
    },
    boxShadow: {
      focus: {
        light: "".concat(colors.P100, " 0 0 0 2px"),
        dark: "".concat(colors.P100, " 0 0 0 2px")
      }
    },
    color: {
      default: {
        light: colors.N0,
        dark: colors.N0
      },
      disabled: {
        light: colors.N0,
        dark: colors.DN30
      },
      selected: {
        light: colors.N0,
        dark: colors.N0
      },
      focus: {
        light: colors.N0,
        dark: colors.N0
      }
    }
  }
};

function extract(newTheme, _ref) {
  var mode = _ref.mode,
      appearance = _ref.appearance,
      state = _ref.state;

  if (!newTheme[appearance]) {
    return undefined;
  }

  var root = newTheme[appearance];
  return Object.keys(root).reduce(function (acc, val) {
    var node = root;
    [val, state, mode].forEach(function (item) {
      if (!node[item]) {
        return undefined;
      }

      if (_typeof(node[item]) !== 'object') {
        acc[val] = node[item];
        return undefined;
      }

      node = node[item];
      return undefined;
    });
    return acc;
  }, {});
}

export var spotlightButtonTheme = function spotlightButtonTheme(current, themeProps) {
  var _current = current(themeProps),
      buttonStyles = _current.buttonStyles,
      rest = _objectWithoutProperties(_current, ["buttonStyles"]);

  return _objectSpread({
    buttonStyles: _objectSpread(_objectSpread({}, buttonStyles), extract(spotlightTheme, themeProps))
  }, rest);
};
export var modalButtonTheme = function modalButtonTheme(current, themeProps) {
  var _current2 = current(themeProps),
      buttonStyles = _current2.buttonStyles,
      rest = _objectWithoutProperties(_current2, ["buttonStyles"]);

  return _objectSpread({
    buttonStyles: _objectSpread(_objectSpread({}, buttonStyles), extract(modalTheme, themeProps))
  }, rest);
};