import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { canUseDOM } from 'exenv';
import NodeResovler from 'react-node-resolver';
import ScrollLock from 'react-scrolllock';
import scrollIntoView from 'scroll-into-view-if-needed';
import Portal from '@atlaskit/portal';
import { layers } from '@atlaskit/theme/constants';
import { ElementBox } from '../utils/use-element-box';
import { Fade } from './Animation';
import Clone from './Clone';
import SpotlightDialog from './SpotlightDialog';
import { SpotlightTransitionConsumer } from './SpotlightTransition';

var SpotlightInner = /*#__PURE__*/function (_React$Component) {
  _inherits(SpotlightInner, _React$Component);

  var _super = _createSuper(SpotlightInner);

  function SpotlightInner() {
    var _this;

    _classCallCheck(this, SpotlightInner);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      // This is only used when targetReplacement is specified.
      // In this case, we have to render the targetReplacement component,
      // get a dom reference from that component, then render again passing
      // that reference into SpotlightDialog (Popper).
      replacementElement: null
    });

    _defineProperty(_assertThisInitialized(_this), "getTargetNodeStyle", function (box) {
      if (!canUseDOM) {
        return {};
      }

      return _objectSpread(_objectSpread({}, box), {}, {
        position: 'fixed'
      });
    });

    return _this;
  }

  _createClass(SpotlightInner, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.targetNode !== this.props.targetNode) {
        scrollIntoView(this.props.targetNode, {
          scrollMode: 'if-needed'
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      scrollIntoView(this.props.targetNode, {
        scrollMode: 'if-needed'
      });
      this.props.onOpened();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.onClosed();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          pulse = _this$props.pulse,
          target = _this$props.target,
          targetNode = _this$props.targetNode,
          targetBgColor = _this$props.targetBgColor,
          targetOnClick = _this$props.targetOnClick,
          targetRadius = _this$props.targetRadius,
          testId = _this$props.testId,
          TargetReplacement = _this$props.targetReplacement;
      var replacementElement = this.state.replacementElement;
      return /*#__PURE__*/React.createElement(SpotlightTransitionConsumer, null, function (_ref) {
        var isOpen = _ref.isOpen,
            onExited = _ref.onExited;
        return /*#__PURE__*/React.createElement(Portal, {
          zIndex: layers.spotlight() + 1
        }, TargetReplacement ? /*#__PURE__*/React.createElement(NodeResovler, {
          innerRef: function innerRef(elem) {
            return _this2.setState({
              replacementElement: elem
            });
          }
        }, /*#__PURE__*/React.createElement(ElementBox, {
          element: targetNode
        }, function (box) {
          return /*#__PURE__*/React.createElement(TargetReplacement, _extends({
            "data-testid": "".concat(testId, "--target")
          }, _this2.getTargetNodeStyle(box)));
        })) : /*#__PURE__*/React.createElement(ElementBox, {
          element: targetNode
        }, function (box) {
          return /*#__PURE__*/React.createElement(Clone, {
            testId: "".concat(testId, "--target"),
            pulse: pulse,
            target: target,
            style: _this2.getTargetNodeStyle(box),
            targetBgColor: targetBgColor,
            targetNode: targetNode,
            targetOnClick: targetOnClick,
            targetRadius: targetRadius
          });
        }), TargetReplacement && !replacementElement ? null : /*#__PURE__*/React.createElement(Fade, {
          in: isOpen,
          onExited: onExited
        }, function (animationStyles) {
          return /*#__PURE__*/React.createElement(SpotlightDialog, {
            testId: "".concat(testId, "--dialog"),
            actions: _this2.props.actions,
            actionsBeforeElement: _this2.props.actionsBeforeElement,
            children: _this2.props.children,
            dialogPlacement: _this2.props.dialogPlacement,
            dialogWidth: _this2.props.dialogWidth,
            footer: _this2.props.footer,
            header: _this2.props.header,
            heading: _this2.props.heading,
            headingAfterElement: _this2.props.headingAfterElement,
            image: _this2.props.image,
            targetNode: replacementElement || targetNode,
            animationStyles: animationStyles
          });
        }), /*#__PURE__*/React.createElement(ScrollLock, null));
      });
    }
  }]);

  return SpotlightInner;
}(React.Component);

_defineProperty(SpotlightInner, "defaultProps", {
  dialogWidth: 400,
  pulse: true
});

export default SpotlightInner;