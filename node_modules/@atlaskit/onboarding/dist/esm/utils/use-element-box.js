import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useEffect, useLayoutEffect, useState } from 'react';

var getElementRect = function getElementRect(element) {
  var _element$getBoundingC = element.getBoundingClientRect(),
      height = _element$getBoundingC.height,
      left = _element$getBoundingC.left,
      top = _element$getBoundingC.top,
      width = _element$getBoundingC.width;

  return {
    height: height,
    left: left,
    top: top,
    width: width
  };
};
/**
 * Will listen to the document resizing to see if an element has moved positions.
 * Not using ResizeObserver because of IE11 support.
 * @param element HTMLElement to watch when resizing.
 */


export var useElementBox = function useElementBox(element) {
  var _useState = useState({
    width: 0,
    height: 0,
    left: 0,
    top: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      box = _useState2[0],
      setBox = _useState2[1];

  useLayoutEffect(function () {
    setBox(getElementRect(element));
  }, [element]);
  useEffect(function () {
    var onResize = function onResize() {
      requestAnimationFrame(function () {
        setBox(getElementRect(element));
      });
    };

    window.addEventListener('resize', onResize);
    return function () {
      window.removeEventListener('resize', onResize);
    };
  }, [element]);
  return box;
};
export var ElementBox = function ElementBox(props) {
  var box = useElementBox(props.element);
  return props.children(box);
};