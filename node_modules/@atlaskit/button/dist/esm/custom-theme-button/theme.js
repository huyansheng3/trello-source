import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { createTheme } from '@atlaskit/theme/components';
import { getCss } from '../shared/css';
var stateToSelectorMap = {
  focus: '&:focus',
  focusSelected: '&:focus',
  hover: '&:hover',
  active: '&:active',
  disabled: '&[disabled]'
}; // Mapping the new clean css back to the legacy theme format.
// The legacy theme format has all styles at the top level (no nested selectors)
// and uses `getSpecifiers()` to apply the style to all psudeo states

export function getCustomCss(_ref) {
  var _ref$appearance = _ref.appearance,
      appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
      _ref$spacing = _ref.spacing,
      spacing = _ref$spacing === void 0 ? 'default' : _ref$spacing,
      _ref$mode = _ref.mode,
      mode = _ref$mode === void 0 ? 'light' : _ref$mode,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      _ref$shouldFitContain = _ref.shouldFitContainer,
      shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain,
      _ref$iconIsOnlyChild = _ref.iconIsOnlyChild,
      iconIsOnlyChild = _ref$iconIsOnlyChild === void 0 ? false : _ref$iconIsOnlyChild,
      _ref$isLoading = _ref.isLoading,
      isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,
      state = _ref.state;
  var result = getCss({
    appearance: appearance,
    spacing: spacing,
    mode: mode,
    isSelected: isSelected,
    shouldFitContainer: shouldFitContainer,
    isOnlySingleIcon: iconIsOnlyChild
  }); // we need to disable the default browser focus styles always
  // this is because we are not expressing that we can have two pesduo states at a time

  result.outline = 'none'; // Pulling relevant styles up to the top level

  var selector = stateToSelectorMap[state];

  if (selector) {
    result = _objectSpread(_objectSpread({}, result), result[selector]);
  }

  if (isLoading) {
    result = _objectSpread(_objectSpread({}, result), result['&[data-has-overlay="true"]']);
  } // Delete all selectors and just keep root styles


  Object.keys(result).forEach(function (key) {
    // want to keep this one
    if (key === '&::-moz-focus-inner') {
      return;
    } // Not using .startsWith for ie11


    if (key.indexOf('&') === 0) {
      delete result[key];
    }
  });
  return result;
} // This styling approach works by generating a 'style' and applying with maximum specificity
// To do this we are overwriting all psuedo selectors

export function getSpecifiers(styles) {
  return {
    '&, &:hover, &:active, &:focus, &:visited, &:disabled, &[disabled]': styles
  };
}
export function defaultThemeFn(current, values) {
  return current(values);
}
var Theme = createTheme(function (themeProps) {
  return {
    buttonStyles: getCustomCss(themeProps),
    // No styles being applied directly to spinner by default
    // Keeping this for legacy compat. We could remove it, but given
    // that we are changing theme soon there is no point
    spinnerStyles: {}
  };
});
export default Theme;