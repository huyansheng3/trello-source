import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Inspired by analytics-web-react
 */
import last from 'lodash/last';
import merge from 'lodash/merge';
import { DEFAULT_SOURCE, UI_EVENT_TYPE, SCREEN_EVENT_TYPE, TRACK_EVENT_TYPE, OPERATIONAL_EVENT_TYPE } from '@atlaskit/analytics-gas-types';
import { getSources, getActionSubject, getExtraAttributes, getPackageInfo, getPackageHierarchy, getComponents } from './extract-data-from-event';
import { version as listenerVersion } from '../version.json';
var ATLASKIT_TAG = 'atlaskit';
/**
 * This util exists to convert the Atlaskit event format into the analytics platform format.
 *
 * Atlaskit event format:
 * event {
 *      payload: {
 *          ...attributesFromLowestPointInTheTree
 *      },
 *      context: [{
 *          ...attributesFromHighestPointInTheTree
 *      }, {
 *          ...attributesFromSecondHighestPointInTheTree
 *      }]
 * }
 *
 * Analytics platform event format:
 *  event {
 *      type: @atlaskit/analytics-gas-types.EventType
 *      payload {
 *          ...mandatoryAttributesBasedOnEventType
 *          attributes: {
 *              ...arbitraryAttributes
 *          }
 *      }
 *  }
 */

export default (function (event, logger) {
  var sources = getSources(event);
  var source = last(sources) || DEFAULT_SOURCE;
  var extraAttributes = getExtraAttributes(event);
  var components = getComponents(event);

  var _ref = last(getPackageInfo(event)) || {},
      packageName = _ref.packageName,
      packageVersion = _ref.packageVersion;

  var _event$payload = event.payload,
      _event$payload$eventT = _event$payload.eventType,
      eventType = _event$payload$eventT === void 0 ? UI_EVENT_TYPE : _event$payload$eventT,
      action = _event$payload.action,
      actionSubjectId = _event$payload.actionSubjectId,
      payloadAttributes = _event$payload.attributes,
      containerId = _event$payload.containerId;

  var attributes = _objectSpread(_objectSpread({
    listenerVersion: listenerVersion,
    sourceHierarchy: sources.join('.') || undefined,
    componentHierarchy: components.join('.') || undefined,
    packageHierarchy: getPackageHierarchy(event) || undefined
  }, {
    packageName: packageName,
    packageVersion: packageVersion
  }), merge(extraAttributes, payloadAttributes)); // Ensure atlaskit tag is not duplicated by using Set


  var tags = new Set(event.payload.tags || []);
  tags.add(ATLASKIT_TAG);

  if (event.payload) {
    if (eventType === UI_EVENT_TYPE) {
      return {
        eventType: eventType,
        source: source,
        actionSubject: getActionSubject(event),
        action: action,
        actionSubjectId: actionSubjectId,
        attributes: attributes,
        containerId: containerId,
        tags: Array.from(tags)
      };
    }

    if (eventType === TRACK_EVENT_TYPE || eventType === OPERATIONAL_EVENT_TYPE || eventType === SCREEN_EVENT_TYPE) {
      logger.error('Track, screen and operational events are currently not supported for atlaskit events');
    } else {
      logger.error('Invalid event type', eventType);
    }
  }

  return null;
});