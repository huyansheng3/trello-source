import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { AnalyticsListener } from '@atlaskit/analytics-next';
import { sendEvent } from './analytics-web-client-wrapper';

var GenericAnalyticsListener = /*#__PURE__*/function (_React$Component) {
  _inherits(GenericAnalyticsListener, _React$Component);

  var _super = _createSuper(GenericAnalyticsListener);

  function GenericAnalyticsListener() {
    var _this;

    _classCallCheck(this, GenericAnalyticsListener);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "listenerHandler", function (event) {
      var _this$props = _this.props,
          client = _this$props.client,
          logger = _this$props.logger,
          channel = _this$props.channel,
          processEvent = _this$props.processEvent;

      if (!event.payload) {
        return;
      }

      logger.debug("Received ".concat(channel, " event"), event);
      var payload = processEvent(event, logger);
      logger.debug("Processed ".concat(channel, " event"), payload);

      if (payload) {
        sendEvent(logger, client)(payload);
      }
    });

    return _this;
  }

  _createClass(GenericAnalyticsListener, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(AnalyticsListener, {
        onEvent: this.listenerHandler,
        channel: this.props.channel
      }, this.props.children);
    }
  }]);

  return GenericAnalyticsListener;
}(React.Component);

export { GenericAnalyticsListener as default };