import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

/* eslint-disable no-console */
export var LOG_LEVEL = {
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  OFF: 4
};

var Logger = /*#__PURE__*/function () {
  function Logger() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        logLevel = _ref.logLevel;

    _classCallCheck(this, Logger);

    _defineProperty(this, "logLevel", LOG_LEVEL.OFF);

    if (typeof logLevel === 'number') {
      this.setLogLevel(logLevel);
    }
  }

  _createClass(Logger, [{
    key: "setLogLevel",
    value: function setLogLevel(logLevel) {
      if (logLevel >= LOG_LEVEL.DEBUG && logLevel <= LOG_LEVEL.OFF) {
        this.logLevel = +logLevel;
      } else {
        this.logLevel = LOG_LEVEL.OFF;
      }
    }
  }, {
    key: "logMessage",
    value: function logMessage(level, type) {
      if (level >= this.logLevel) {
        var _console;

        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        (_console = console)[type].apply(_console, args);
      }
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this.logMessage.apply(this, [LOG_LEVEL.DEBUG, 'log'].concat(args));
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this.logMessage.apply(this, [LOG_LEVEL.INFO, 'info'].concat(args));
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this.logMessage.apply(this, [LOG_LEVEL.WARN, 'warn'].concat(args));
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      this.logMessage.apply(this, [LOG_LEVEL.ERROR, 'error'].concat(args));
    }
  }]);

  return Logger;
}();

export { Logger as default };