import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { AnalyticsListener } from '@atlaskit/analytics-next';
import { FabricChannel } from '../types';
import { handleEvent } from './handle-event';
export var ELEMENTS_TAG = 'fabricElements';

var FabricElementsListener = /*#__PURE__*/function (_React$Component) {
  _inherits(FabricElementsListener, _React$Component);

  var _super = _createSuper(FabricElementsListener);

  function FabricElementsListener() {
    var _this;

    _classCallCheck(this, FabricElementsListener);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "handleEventWrapper", function (event) {
      handleEvent(event, ELEMENTS_TAG, _this.props.logger, _this.props.client);
    });

    return _this;
  }

  _createClass(FabricElementsListener, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(AnalyticsListener, {
        onEvent: this.handleEventWrapper,
        channel: FabricChannel.elements
      }, this.props.children);
    }
  }]);

  return FabricElementsListener;
}(React.Component);

export { FabricElementsListener as default };