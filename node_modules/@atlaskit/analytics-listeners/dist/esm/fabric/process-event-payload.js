import _typeof from "@babel/runtime/helpers/typeof";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { DEFAULT_SOURCE } from '@atlaskit/analytics-gas-types';
import { ELEMENTS_CONTEXT, EDITOR_CONTEXT } from '@atlaskit/analytics-namespaced-context';
import merge from 'lodash/merge';
import { ELEMENTS_TAG } from './FabricElementsListener';
import { EDITOR_TAG } from './FabricEditorListener';

var extractFieldsFromContext = function extractFieldsFromContext(fieldsToPick) {
  return function (contexts) {
    return contexts.map(function (ctx) {
      return fieldsToPick.reduce(function (result, key) {
        return ctx[key] ? merge(result, _defineProperty({}, key, ctx[key])) : result;
      }, {});
    }).reduce(function (result, item) {
      return merge(result, item);
    }, {});
  };
};

var fieldExtractor = function fieldExtractor(contextKey) {
  return extractFieldsFromContext(['source', 'objectType', 'objectId', 'containerType', 'containerId', contextKey]);
};

var getContextKey = function getContextKey(tag) {
  switch (tag) {
    case ELEMENTS_TAG:
      return ELEMENTS_CONTEXT;

    case EDITOR_TAG:
      return EDITOR_CONTEXT;

    default:
      return '';
  }
};

var updatePayloadWithContext = function updatePayloadWithContext(primaryTag, event) {
  if (event.context.length === 0) {
    return _objectSpread({
      source: DEFAULT_SOURCE
    }, event.payload);
  }

  var contextKey = getContextKey(primaryTag) || 'attributes';

  var _fieldExtractor = fieldExtractor(contextKey)(event.context),
      attributes = _fieldExtractor[contextKey],
      fields = _objectWithoutProperties(_fieldExtractor, [contextKey].map(_toPropertyKey));

  if (attributes) {
    event.payload.attributes = merge(attributes, event.payload.attributes || {});
  }

  return _objectSpread(_objectSpread({
    source: DEFAULT_SOURCE
  }, fields), event.payload);
};

var addTags = function addTags(tags) {
  var originalTags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var mergedTags = new Set([].concat(_toConsumableArray(originalTags), _toConsumableArray(tags)));
  return Array.from(mergedTags);
};
/**
 * The primary tag is used for matching the analytics event payload
 * with its context.
 */


function getPrimaryTag(tags) {
  if (typeof tags === 'string') {
    return tags;
  }

  if (!tags.length) {
    throw new Error('Empty tags string array. Unable to match analytics event payload with context');
  }

  return tags[0];
}

export var processEventPayload = function processEventPayload(event, tags) {
  var primaryTag = getPrimaryTag(tags);
  var tagsArray = typeof tags === 'string' ? [tags] : tags;
  return _objectSpread(_objectSpread({}, updatePayloadWithContext(primaryTag, event)), {}, {
    tags: addTags(tagsArray, event.payload.tags)
  });
};