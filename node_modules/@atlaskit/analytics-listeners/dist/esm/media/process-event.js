import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { DEFAULT_SOURCE } from '@atlaskit/analytics-gas-types';
import { MEDIA_CONTEXT } from '@atlaskit/analytics-namespaced-context';
import merge from 'lodash/merge';
import last from 'lodash/last';
import { getPackageHierarchy, getSources, getPackageInfo, getComponents, extractFromEventContext, getExtraAttributes } from '../atlaskit/extract-data-from-event';
import { version as listenerVersion } from '../version.json';

function getMediaContexts(event) {
  return extractFromEventContext(MEDIA_CONTEXT, event);
}

function getMediaRegion() {
  try {
    return window && window.sessionStorage && window.sessionStorage.getItem('media-api-region');
  } catch (e) {
    return;
  }
}

export function processEvent(event) {
  var sources = getSources(event);

  var _ref = last(getPackageInfo(event)) || {},
      packageName = _ref.packageName,
      packageVersion = _ref.packageVersion;

  var extraAttributes = getExtraAttributes(event);
  var mediaContexts = getMediaContexts(event) || [];
  var mediaAttributes = merge.apply(void 0, [{}].concat(_toConsumableArray(mediaContexts)));
  var tags = new Set(event.payload.tags || []);
  tags.add('media');
  var components = getComponents(event);
  var mediaRegion = getMediaRegion();
  var payload = {
    source: last(sources) || DEFAULT_SOURCE,
    actionSubject: event.payload.actionSubject,
    action: event.payload.action,
    eventType: event.payload.eventType,
    actionSubjectId: event.payload.actionSubjectId,
    // for backward compatibilty
    name: event.payload.name,
    tags: Array.from(tags),
    attributes: _objectSpread(_objectSpread({
      packageName: packageName,
      packageVersion: packageVersion
    }, merge({}, extraAttributes, mediaAttributes, event.payload.attributes)), {}, {
      componentHierarchy: components.join('.') || undefined,
      packageHierarchy: getPackageHierarchy(event),
      sourceHierarchy: sources.join('.') || undefined,
      listenerVersion: listenerVersion
    }, mediaRegion ? {
      mediaRegion: mediaRegion
    } : undefined)
  };
  return payload;
}