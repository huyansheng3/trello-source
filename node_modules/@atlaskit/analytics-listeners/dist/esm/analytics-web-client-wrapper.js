import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var isPromise = function isPromise(c) {
  return typeof c.then === 'function';
};

export var sendEvent = function sendEvent(logger, client) {
  return function (event) {
    if (client) {
      var gasEvent = _objectSpread({}, event);

      delete gasEvent.eventType;

      var withClient = function withClient(cb) {
        if (isPromise(client)) {
          client.then(cb).catch(function (e) {
            return logger.warn('There was an error sending the event', e);
          });
        } else {
          try {
            cb(client);
          } catch (e) {
            logger.warn('There was an error sending the event', e);
          }
        }
      };

      switch (event.eventType) {
        case 'ui':
          logger.debug('Sending UI Event via analytics client', gasEvent);
          withClient(function (client) {
            return client.sendUIEvent(gasEvent);
          });
          break;

        case 'operational':
          logger.debug('Sending Operational Event via analytics client', gasEvent);
          withClient(function (client) {
            return client.sendOperationalEvent(gasEvent);
          });
          break;

        case 'track':
          logger.debug('Sending Track Event via analytics client', gasEvent);
          withClient(function (client) {
            return client.sendTrackEvent(gasEvent);
          });
          break;

        case 'screen':
          logger.debug('Sending Screen Event via analytics client', gasEvent);
          withClient(function (client) {
            return client.sendScreenEvent(gasEvent);
          });
          break;

        default:
          logger.error("cannot map eventType ".concat(event.eventType, " to an analytics-web-client function"));
      }
    } else {
      logger.warn('AnalyticsWebClient instance is not provided');
    }
  };
};