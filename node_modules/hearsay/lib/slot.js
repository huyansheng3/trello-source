var ContinuousSignal, Slot, uniqueKey,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

uniqueKey = require('./utils/uniqueKey');

ContinuousSignal = require('./continuous-signal');

module.exports = Slot = (function(superClass) {
  extend(Slot, superClass);

  function Slot(val) {
    Slot.__super__.constructor.call(this, (function(_this) {
      return function(_send) {
        _this._send = _send;
        return _this._send(val);
      };
    })(this));
  }

  Slot.prototype.set = function(val) {
    this._send(val);
    return val;
  };

  Slot.prototype.update = function(fn) {
    return this.set(fn(this.get()));
  };

  return Slot;

})(ContinuousSignal);
