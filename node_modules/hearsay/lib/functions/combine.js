var ContinuousSignal, Signal, all, isContinuous, shallowClone,
  slice = [].slice;

Signal = require('../signal');

ContinuousSignal = require('../continuous-signal');

all = require('../utils/all');

shallowClone = function(array) {
  return array.slice();
};

isContinuous = function(signal) {
  return signal instanceof ContinuousSignal;
};

module.exports = function() {
  var generator, sent, signals, vals;
  signals = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  sent = new Array(signals.length);
  vals = new Array(signals.length);
  generator = function(send) {
    var subscriptions;
    subscriptions = signals.map(function(signal, index) {
      return signal.subscribe(function(val) {
        sent[index] = true;
        vals[index] = val;
        if (all(sent)) {
          return send(shallowClone(vals));
        }
      });
    });
    return function() {
      subscriptions.forEach(function(unsubscribe) {
        return unsubscribe();
      });
    };
  };
  if (all(signals, isContinuous)) {
    return new ContinuousSignal(generator);
  } else {
    return new Signal(generator);
  }
};
