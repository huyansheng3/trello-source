var allowFirst, finalObservation, guarded, intermediateObservation, newObservation,
  slice = [].slice;

guarded = function(fn, pred) {
  return function() {
    if (pred()) {
      fn.apply(this, arguments);
    }
  };
};

allowFirst = function(pred) {
  var first;
  first = true;
  return function() {
    if (first) {
      first = false;
      return true;
    } else {
      return pred();
    }
  };
};

newObservation = function(target, path, callback, context, pred) {
  var remove, removed;
  remove = path.length === 1 ? finalObservation(target, path[0], callback, context, pred) : intermediateObservation(target, path, callback, context, pred);
  removed = false;
  return function() {
    if (removed) {
      throw new Error("Observation already removed!");
    } else {
      remove();
    }
    removed = true;
  };
};

finalObservation = function(target, key, callback, context, pred) {
  var guardedCallback, remove, slot;
  slot = target[key];
  guardedCallback = guarded(callback, allowFirst(function() {
    return pred(slot);
  }));
  remove = slot.subscribe(guardedCallback, context);
  return remove;
};

intermediateObservation = function(target, arg, callback, context, pred) {
  var guardedCallback, head, intermediateCallback, remove, removeNext, slot, tail;
  head = arg[0], tail = 2 <= arg.length ? slice.call(arg, 1) : [];
  removeNext = function() {};
  slot = target[head];
  intermediateCallback = function(val) {
    removeNext();
    removeNext = newObservation(val, tail, callback, context, function(otherSlot) {
      return slot !== otherSlot && pred(otherSlot);
    });
  };
  guardedCallback = guarded(intermediateCallback, allowFirst(function() {
    return pred(slot);
  }));
  remove = slot.subscribe(guardedCallback, context);
  return function() {
    remove();
    removeNext();
  };
};

module.exports = function(target, path, callback, context) {
  if (typeof path === 'string') {
    path = path.split('.');
  }
  if (path.length === 0) {
    throw new Error("No path to observe!");
  }
  return newObservation(target, path, callback, context, function() {
    return true;
  });
};
