var Hearsay, Signal, methodify, register, schedulerRef,
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

Signal = require('./signal');

schedulerRef = require('./scheduler-ref');

register = function(target, map) {
  var method, name;
  for (name in map) {
    if (!hasProp.call(map, name)) continue;
    method = map[name];
    if (name.indexOf('_') === 0) {
      throw new Error("You can't register methods that begin with an underscore!");
    }
    if (name in target) {
      throw new Error(name + " is already defined!");
    }
    target[name] = method;
  }
};

methodify = function(fn) {
  return function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return fn.apply(null, [this].concat(slice.call(args)));
  };
};

Hearsay = {
  Signal: Signal,
  ContinuousSignal: require('./continuous-signal'),
  Emitter: require('./emitter'),
  Slot: require('./slot'),
  watch: require('./watch'),
  mixin: require('./mixin'),
  setScheduler: function(scheduler) {
    return schedulerRef.schedule = scheduler;
  },
  registerMethods: function(map) {
    return register(Signal.prototype, map);
  },
  registerFunctions: function(map) {
    return register(Hearsay, map);
  },
  registerHybrids: function(map) {
    var key, methodMap, value;
    Hearsay.registerFunctions(map);
    methodMap = {};
    for (key in map) {
      value = map[key];
      methodMap[key] = methodify(value);
    }
    return Hearsay.registerMethods(methodMap);
  }
};

Hearsay.registerMethods({
  map: require('./methods/map'),
  filter: require('./methods/filter'),
  latest: require('./methods/latest'),
  distinct: require('./methods/distinct'),
  changes: require('./methods/changes'),
  and: require('./methods/and'),
  or: require('./methods/or'),
  not: require('./methods/not'),
  spread: require('./methods/spread'),
  subscribeChanges: require('./methods/subscribe-changes')
});

Hearsay.registerFunctions({
  "const": require('./functions/const')
});

Hearsay.registerHybrids({
  "if": require('./functions/if'),
  combine: require('./functions/combine'),
  merge: require('./functions/merge')
});

module.exports = Hearsay;
