var ContinuousSignal, Signal, magicInitialValue,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Signal = require('./signal');

magicInitialValue = {};

module.exports = ContinuousSignal = (function(superClass) {
  extend(ContinuousSignal, superClass);

  function ContinuousSignal(source) {
    this._val = magicInitialValue;
    ContinuousSignal.__super__.constructor.call(this, (function(_this) {
      return function(actuallySend) {
        return source(function(val) {
          _this._val = val;
          return actuallySend(val);
        });
      };
    })(this));
    if (this._val === magicInitialValue) {
      throw new Error("The callback passed to ContinuousSignal must synchronously invoke its send function!");
    }
  }

  ContinuousSignal.prototype.get = function() {
    return this._val;
  };

  ContinuousSignal.prototype.subscribe = function(fn, context) {
    fn.call(context, this.get());
    return ContinuousSignal.__super__.subscribe.apply(this, arguments);
  };

  ContinuousSignal.prototype._dispose = function() {
    delete this._val;
    return ContinuousSignal.__super__._dispose.apply(this, arguments);
  };

  ContinuousSignal.prototype.derivedType = ContinuousSignal;

  return ContinuousSignal;

})(Signal);
