import React, { ReactElement } from 'react';
import AKIcon from '@atlaskit/icon';
import { TestId } from '@trello/test-ids';
import cx from 'classnames';
import {
  GLOBAL_NAMESPACE_PREFIX,
  ComponentSizeXs as XSMALL,
  ComponentSizeS as SMALL,
  ComponentSizeM as MEDIUM,
  ComponentSizeL as LARGE,
  IconClassnameBase,
  IconDefaultColor,
  IconLightColor,
  IconDarkColor,
  IconDisabledColor,
  IconQuietColor,
  IconRedColor,
  IconGreenColor,
  IconYellowColor,
  IconBlueColor,
  IconPurpleColor,
  IconDarkPurpleColor,
  IconPinkColor,
} from '../../../tokens';
import {
  IconColorMap as IconColorMapType,
  IconColor,
  IconSize,
} from './Icon.types';
import styles from './Icon.less';

export const IconClasses = {
  BASE: `${GLOBAL_NAMESPACE_PREFIX}${IconClassnameBase}`,
  xsmall: `${GLOBAL_NAMESPACE_PREFIX}${IconClassnameBase}--${XSMALL}`,
  small: `${GLOBAL_NAMESPACE_PREFIX}${IconClassnameBase}--${SMALL}`,
  medium: `${GLOBAL_NAMESPACE_PREFIX}${IconClassnameBase}--${MEDIUM}`,
  large: `${GLOBAL_NAMESPACE_PREFIX}${IconClassnameBase}--${LARGE}`,
  BLOCK: `${GLOBAL_NAMESPACE_PREFIX}${IconClassnameBase}--block`,
};

export const IconColorMap: IconColorMapType = {
  light: IconLightColor,
  dark: IconDarkColor,
  disabled: IconDisabledColor,
  quiet: IconQuietColor,
  red: IconRedColor,
  green: IconGreenColor,
  yellow: IconYellowColor,
  blue: IconBlueColor,
  purple: IconPurpleColor,
  pink: IconPinkColor,
  gray: IconDefaultColor,
  darkpurple: IconDarkPurpleColor,
};

export interface IconProps {
  /**
   * The color that the Icon should be rendered as.
   * @default @icon-default-color (#42526E)
   */
  color?: IconColor;
  /**
   * A string that is applied as an aria attribute on the icon. Usually it
   * matches up with the display name of the icon
   * @default ''
   */
  label?: string;
  /**
   * The name of the glyph which to render as the Icon. This must be provided.
   */
  glyph: () => ReactElement;
  /**
   * The size to render the icon.
   * @default "medium"
   */
  size?: IconSize;
  /**
   * A string that gets placed as a data attribute (data-test-id) onto the
   * Icon wrapper so that our
   * smoketest can properly target and test the component
   * @default undefined
   */
  testId?: TestId;
  // Escape hatches
  /**
   * ⚠️ DO NOT USE THIS PROP UNLESS YOU REALLY REALLY HAVE TO.
   *
   * Places a class name on the Icon (more specifically, the svg itself). This
   * is placed in addition to the classes already placed on the Icon. This is
   * placed directly onto the SVG via the glyph templates that are
   * generated by IconGlyph.template.js
   *
   * Please refrain from using this unless absolutely necessary.
   * @default undefined
   */
  dangerous_className?: string;
  /**
   * The switch for the icon to be centered in the dedicated space with padding around it.
   * Designed for cases when icon is not inline.
   */
  block?: boolean;
}

export const Icon: React.FunctionComponent<IconProps> = (props) => {
  const {
    color,
    testId,
    size = MEDIUM,
    glyph: Glyph,
    label,
    dangerous_className,
    block,
  } = props;

  const iconClassName = cx(
    {
      [IconClasses.BASE]: true,
      [styles[IconClasses.BASE]]: true,
      [styles[IconClasses[size]]]: !!size,
      [styles[`${IconClasses[size]}-block`]]: block,
    },
    dangerous_className,
  );

  return (
    <span className={iconClassName} data-test-id={testId}>
      <AKIcon
        testId={testId}
        secondaryColor="inherit"
        label={label || ''}
        primaryColor={color ? IconColorMap[color] : IconDefaultColor}
        // eslint-disable-next-line react/jsx-no-bind
        glyph={() => <Glyph />}
      />
    </span>
  );
};
