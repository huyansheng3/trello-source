// this component was automatically generated by IconGlyph.template.js
import React from 'react';
import { TestId } from '@trello/test-ids';

import { Icon, IconColor, IconSize } from '../src/components/Icon';

export interface GlyphProps {
  /**
   * A string that is applied as an aria attribute on the icon. Usually it
   * matches up with the display name of the icon
   * @default If no label is provided, it will fallback to the name of the icon
   */
  label?: string;
  /**
   * The color that the Icon should be rendered as.
   * @default @icon-default-color (#42526E)
   */
  color?: IconColor;
  /**
   * The size to render the Icon size.
   * @default "medium"
   */
  size?: IconSize;
  /**
   * A string that gets placed as a data attribute (data-test-id) onto the
   * Icon wrapper so that our
   * smoketest can properly target and test the component
   * @default undefined
   */
  testId?: TestId;
  // Escape hatches
  /**
   * ⚠️ DO NOT USE THIS PROP UNLESS YOU REALLY REALLY HAVE TO.
   *
   * Places a class name on the Icon (more specifically, the svg itself). This
   * is placed in addition to the classes already placed on the Icon. This is
   * placed directly onto the SVG via the glyph templates that are
   * generated by IconGlyph.template.js
   *
   * Please refrain from using this unless absolutely necessary.
   * @default undefined
   */
  dangerous_className?: string;
  /**
   * The switch for the icon to be centered in the dedicated space with padding around it.
   * Designed for cases when icon is not inline.
   */
  block?: boolean;
}

const DownloadIconGlyph = () => {
  return (
    <svg
      width="24"
      height="24"
      role="presentation"
      focusable="false"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M16.062 5.48029C16.318 5.43913 16.578 5.41804 16.839 5.41804C19.644 5.41904 22 7.62002 22 10.4988C22 13.4076 19.615 16.0002 16.9 16.0002H14.019V14.0071H16.9C18.557 14.0071 20.015 12.3443 20.015 10.4988C20.015 8.7205 18.546 7.41217 16.911 7.41217H16.899C16.51 7.41217 16.213 7.46338 15.929 7.56278L15.759 7.62504C15.154 7.87305 14.884 7.37904 14.884 7.37904L14.734 7.11195C14.004 5.76546 12.533 5.0164 11.018 4.99331C8.936 5.02745 7.221 6.54062 6.949 8.63716L6.903 8.97755C6.903 8.97755 6.832 9.50169 6.238 9.50169C6.23123 9.50169 6.22826 9.50332 6.22541 9.50489C6.22279 9.50633 6.22027 9.50771 6.215 9.50771H5.961C4.825 9.50771 3.985 10.4656 3.985 11.6655C3.985 12.8714 4.972 14.0071 6.055 14.0071H10.019V16.0002H6.055C3.895 16.0002 2 13.9548 2 11.6655C2 9.66536 3.312 8.00157 5.138 7.5909C5.845 4.88386 8.191 3.03934 11.024 3.00018C12.999 3.02127 14.925 3.90085 16.062 5.48029Z"
        fill="currentColor"
      />
      <path
        d="M9.2897 17.2914C9.67569 16.9027 10.3013 16.9029 10.6871 17.2917L11.0009 17.6079L11.0001 10.0065C11 9.45069 11.4477 9.00004 12 8.99998C12.5523 8.99993 13 9.45049 13.0001 10.0063L13.0009 17.653L13.3132 17.3383C13.6991 16.9496 14.3248 16.9496 14.7107 17.3383C15.0966 17.7271 15.0966 18.3574 14.7107 18.7461L12.7917 20.6793C12.5767 20.8959 12.2938 21.0028 12.0118 20.9999C12.0083 21 12.0047 21 12.0012 21C11.8291 21 11.6671 20.9563 11.5257 20.8792C11.4277 20.8285 11.3358 20.7618 11.2538 20.6791L9.28934 18.6992C8.90355 18.3103 8.90371 17.68 9.2897 17.2914Z"
        fill="currentColor"
      />
    </svg>
  );
};

export const DownloadIcon: React.FunctionComponent<GlyphProps> = (props) => {
  const { testId, dangerous_className, size, color, label, block } = props;
  return (
    <Icon
      testId={testId}
      size={size}
      dangerous_className={dangerous_className}
      color={color}
      block={block}
      label={label || 'DownloadIcon'}
      glyph={DownloadIconGlyph}
    />
  );
};
