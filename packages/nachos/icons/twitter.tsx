// this component was automatically generated by IconGlyph.template.js
import React from 'react';
import { TestId } from '@trello/test-ids';

import { Icon, IconColor, IconSize } from '../src/components/Icon';

export interface GlyphProps {
  /**
   * A string that is applied as an aria attribute on the icon. Usually it
   * matches up with the display name of the icon
   * @default If no label is provided, it will fallback to the name of the icon
   */
  label?: string;
  /**
   * The color that the Icon should be rendered as.
   * @default @icon-default-color (#42526E)
   */
  color?: IconColor;
  /**
   * The size to render the Icon size.
   * @default "medium"
   */
  size?: IconSize;
  /**
   * A string that gets placed as a data attribute (data-test-id) onto the
   * Icon wrapper so that our
   * smoketest can properly target and test the component
   * @default undefined
   */
  testId?: TestId;
  // Escape hatches
  /**
   * ⚠️ DO NOT USE THIS PROP UNLESS YOU REALLY REALLY HAVE TO.
   *
   * Places a class name on the Icon (more specifically, the svg itself). This
   * is placed in addition to the classes already placed on the Icon. This is
   * placed directly onto the SVG via the glyph templates that are
   * generated by IconGlyph.template.js
   *
   * Please refrain from using this unless absolutely necessary.
   * @default undefined
   */
  dangerous_className?: string;
  /**
   * The switch for the icon to be centered in the dedicated space with padding around it.
   * Designed for cases when icon is not inline.
   */
  block?: boolean;
}

const TwitterIconGlyph = () => {
  return (
    <svg
      width="24"
      height="24"
      role="presentation"
      focusable="false"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M8.66086 19.6288C15.4536 19.6288 19.1682 14.0012 19.1682 9.12142C19.1682 8.96151 19.165 8.80239 19.1577 8.64399C19.8787 8.12278 20.5055 7.47241 21 6.73189C20.3382 7.02586 19.6262 7.22394 18.8792 7.31329C19.6416 6.85616 20.227 6.1327 20.5031 5.27043C19.7894 5.69343 18.9993 6.00116 18.1582 6.16683C17.4842 5.44899 16.5246 5 15.4625 5C13.4229 5 11.769 6.65398 11.769 8.69274C11.769 8.98261 11.8014 9.26434 11.8648 9.53478C8.79564 9.38048 6.07397 7.91089 4.2528 5.67637C3.93535 6.22198 3.75262 6.85616 3.75262 7.53253C3.75262 8.81377 4.40465 9.94482 5.39602 10.6065C4.79028 10.5878 4.22112 10.4214 3.72338 10.1445C3.72259 10.16 3.72259 10.1754 3.72259 10.1916C3.72259 11.9803 4.99577 13.4735 6.68539 13.8121C6.37522 13.8965 6.04884 13.942 5.71188 13.942C5.47399 13.942 5.24258 13.9184 5.01766 13.8754C5.48774 15.3426 6.85106 16.4103 8.46761 16.4404C7.20343 17.4309 5.61122 18.0212 3.88092 18.0212C3.58298 18.0212 3.28901 18.0041 3 17.97C4.6344 19.0175 6.57494 19.6288 8.66086 19.6288Z"
        fill="currentColor"
      />
    </svg>
  );
};

export const TwitterIcon: React.FunctionComponent<GlyphProps> = (props) => {
  const { testId, dangerous_className, size, color, label, block } = props;
  return (
    <Icon
      testId={testId}
      size={size}
      dangerous_className={dangerous_className}
      color={color}
      block={block}
      label={label || 'TwitterIcon'}
      glyph={TwitterIconGlyph}
    />
  );
};
