// this component was automatically generated by IconGlyph.template.js
import React from 'react';
import { TestId } from '@trello/test-ids';

import { Icon, IconColor, IconSize } from '../src/components/Icon';

export interface GlyphProps {
  /**
   * A string that is applied as an aria attribute on the icon. Usually it
   * matches up with the display name of the icon
   * @default If no label is provided, it will fallback to the name of the icon
   */
  label?: string;
  /**
   * The color that the Icon should be rendered as.
   * @default @icon-default-color (#42526E)
   */
  color?: IconColor;
  /**
   * The size to render the Icon size.
   * @default "medium"
   */
  size?: IconSize;
  /**
   * A string that gets placed as a data attribute (data-test-id) onto the
   * Icon wrapper so that our
   * smoketest can properly target and test the component
   * @default undefined
   */
  testId?: TestId;
  // Escape hatches
  /**
   * ⚠️ DO NOT USE THIS PROP UNLESS YOU REALLY REALLY HAVE TO.
   *
   * Places a class name on the Icon (more specifically, the svg itself). This
   * is placed in addition to the classes already placed on the Icon. This is
   * placed directly onto the SVG via the glyph templates that are
   * generated by IconGlyph.template.js
   *
   * Please refrain from using this unless absolutely necessary.
   * @default undefined
   */
  dangerous_className?: string;
  /**
   * The switch for the icon to be centered in the dedicated space with padding around it.
   * Designed for cases when icon is not inline.
   */
  block?: boolean;
}

const InstagramIconGlyph = () => {
  return (
    <svg
      width="24"
      height="24"
      role="presentation"
      focusable="false"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M11.9964 7.37183C9.44283 7.37183 7.3728 9.44185 7.3728 11.9954C7.3728 14.5489 9.44283 16.619 11.9964 16.619C14.5499 16.619 16.6199 14.5489 16.6199 11.9954C16.6199 9.44185 14.5499 7.37183 11.9964 7.37183ZM11.9964 14.9967C10.3388 14.9967 8.9951 13.6529 8.9951 11.9954C8.9951 10.3378 10.3388 8.99413 11.9964 8.99413C13.6539 8.99413 14.9976 10.3378 14.9976 11.9954C14.9976 13.6529 13.6539 14.9967 11.9964 14.9967Z"
        fill="currentColor"
      />
      <path
        d="M16.8024 8.26955C17.3991 8.26955 17.8828 7.78584 17.8828 7.18912C17.8828 6.59239 17.3991 6.10864 16.8024 6.10864C16.2057 6.10864 15.7219 6.59239 15.7219 7.18912C15.7219 7.78584 16.2057 8.26955 16.8024 8.26955Z"
        fill="currentColor"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M11.9962 2.99207C9.55094 2.99207 9.24432 3.00243 8.28397 3.04625C7.32562 3.08996 6.6711 3.24218 6.0984 3.46477C5.50632 3.69483 5.0042 4.0027 4.50362 4.50325C4.00307 5.00383 3.6952 5.50595 3.46514 6.09803C3.24254 6.67074 3.09033 7.32525 3.04661 8.2836C3.0028 9.24395 2.99243 9.55057 2.99243 11.9959C2.99243 14.4411 3.0028 14.7478 3.04661 15.7081C3.09033 16.6665 3.24254 17.321 3.46514 17.8937C3.6952 18.4858 4.00307 18.9879 4.50362 19.4885C5.0042 19.989 5.50632 20.2969 6.0984 20.527C6.6711 20.7495 7.32562 20.9017 8.28397 20.9455C9.24432 20.9893 9.55094 20.9996 11.9962 20.9996C14.4415 20.9996 14.7481 20.9893 15.7085 20.9455C16.6668 20.9017 17.3213 20.7495 17.894 20.527C18.4861 20.2969 18.9882 19.989 19.4888 19.4885C19.9894 18.9879 20.2972 18.4858 20.5273 17.8937C20.7499 17.321 20.9021 16.6665 20.9458 15.7081C20.9896 14.7478 21 14.4411 21 11.9959C21 9.55057 20.9896 9.24395 20.9458 8.2836C20.9021 7.32525 20.7499 6.67074 20.5273 6.09803C20.2972 5.50595 19.9894 5.00383 19.4888 4.50325C18.9882 4.0027 18.4861 3.69483 17.894 3.46477C17.3213 3.24218 16.6668 3.08996 15.7085 3.04625C14.7481 3.00243 14.4415 2.99207 11.9962 2.99207ZM11.9962 4.61437C14.4003 4.61437 14.6851 4.62355 15.6345 4.66687C16.5124 4.7069 16.9891 4.85358 17.3064 4.97688C17.7267 5.14022 18.0266 5.33533 18.3417 5.65041C18.6567 5.96547 18.8519 6.2654 19.0152 6.68568C19.1385 7.00295 19.2852 7.47969 19.3252 8.35755C19.3685 9.30696 19.3777 9.59174 19.3777 11.9959C19.3777 14.4 19.3685 14.6847 19.3252 15.6342C19.2852 16.512 19.1385 16.9888 19.0152 17.306C18.8519 17.7263 18.6567 18.0262 18.3417 18.3413C18.0266 18.6564 17.7267 18.8515 17.3064 19.0148C16.9891 19.1381 16.5124 19.2848 15.6345 19.3248C14.6852 19.3682 14.4005 19.3773 11.9962 19.3773C9.59193 19.3773 9.30722 19.3682 8.35792 19.3248C7.48006 19.2848 7.00331 19.1381 6.68604 19.0148C6.26577 18.8515 5.96583 18.6564 5.65078 18.3413C5.33573 18.0262 5.14058 17.7263 4.97725 17.306C4.85394 16.9888 4.70726 16.512 4.66724 15.6342C4.62392 14.6847 4.61473 14.4 4.61473 11.9959C4.61473 9.59174 4.62392 9.30696 4.66724 8.35755C4.70726 7.47969 4.85394 7.00295 4.97725 6.68568C5.14058 6.2654 5.33569 5.96547 5.65078 5.65041C5.96583 5.33533 6.26577 5.14022 6.68604 4.97688C7.00331 4.85358 7.48006 4.7069 8.35792 4.66687C9.30733 4.62355 9.59211 4.61437 11.9962 4.61437Z"
        fill="currentColor"
      />
    </svg>
  );
};

export const InstagramIcon: React.FunctionComponent<GlyphProps> = (props) => {
  const { testId, dangerous_className, size, color, label, block } = props;
  return (
    <Icon
      testId={testId}
      size={size}
      dangerous_className={dangerous_className}
      color={color}
      block={block}
      label={label || 'InstagramIcon'}
      glyph={InstagramIconGlyph}
    />
  );
};
