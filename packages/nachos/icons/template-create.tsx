// this component was automatically generated by IconGlyph.template.js
import React from 'react';
import { TestId } from '@trello/test-ids';

import { Icon, IconColor, IconSize } from '../src/components/Icon';

export interface GlyphProps {
  /**
   * A string that is applied as an aria attribute on the icon. Usually it
   * matches up with the display name of the icon
   * @default If no label is provided, it will fallback to the name of the icon
   */
  label?: string;
  /**
   * The color that the Icon should be rendered as.
   * @default @icon-default-color (#42526E)
   */
  color?: IconColor;
  /**
   * The size to render the Icon size.
   * @default "medium"
   */
  size?: IconSize;
  /**
   * A string that gets placed as a data attribute (data-test-id) onto the
   * Icon wrapper so that our
   * smoketest can properly target and test the component
   * @default undefined
   */
  testId?: TestId;
  // Escape hatches
  /**
   * ⚠️ DO NOT USE THIS PROP UNLESS YOU REALLY REALLY HAVE TO.
   *
   * Places a class name on the Icon (more specifically, the svg itself). This
   * is placed in addition to the classes already placed on the Icon. This is
   * placed directly onto the SVG via the glyph templates that are
   * generated by IconGlyph.template.js
   *
   * Please refrain from using this unless absolutely necessary.
   * @default undefined
   */
  dangerous_className?: string;
  /**
   * The switch for the icon to be centered in the dedicated space with padding around it.
   * Designed for cases when icon is not inline.
   */
  block?: boolean;
}

const TemplateCreateIconGlyph = () => {
  return (
    <svg
      width="24"
      height="24"
      role="presentation"
      focusable="false"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M5 3C3.89543 3 3 3.89543 3 5V7C3 7.55229 3.44772 8 4 8C4.55228 8 5 7.55229 5 7V5H7C7.55228 5 8 4.55229 8 4C8 3.44772 7.55228 3 7 3H5Z"
        fill="currentColor"
      />
      <path
        d="M21 5C21 3.89543 20.1046 3 19 3H17C16.4477 3 16 3.44772 16 4C16 4.55228 16.4477 5 17 5H19V7C19 7.55228 19.4477 8 20 8C20.5523 8 21 7.55228 21 7V5Z"
        fill="currentColor"
      />
      <path
        d="M5 21C3.89543 21 3 20.1046 3 19V17C3 16.4477 3.44772 16 4 16C4.55228 16 5 16.4477 5 17V19H7C7.55228 19 8 19.4477 8 20C8 20.5523 7.55228 21 7 21H5Z"
        fill="currentColor"
      />
      <path
        d="M4 10C3.44772 10 3 10.4477 3 11V13C3 13.5523 3.44772 14 4 14C4.55228 14 5 13.5523 5 13V11C5 10.4477 4.55228 10 4 10Z"
        fill="currentColor"
      />
      <path
        d="M11 5C10.4477 5 10 4.55228 10 4C10 3.44772 10.4477 3 11 3H13C13.5523 3 14 3.44772 14 4C14 4.55228 13.5523 5 13 5H11Z"
        fill="currentColor"
      />
      <path
        d="M14 10C14 9.44771 14.4477 9 15 9C15.5523 9 16 9.44772 16 10V14H20C20.5523 14 21 14.4477 21 15C21 15.5523 20.5523 16 20 16H16V20C16 20.5523 15.5523 21 15 21C14.4477 21 14 20.5523 14 20V16H10C9.44771 16 9 15.5523 9 15C9 14.4477 9.44772 14 10 14H14V10Z"
        fill="currentColor"
      />
    </svg>
  );
};

export const TemplateCreateIcon: React.FunctionComponent<GlyphProps> = (
  props,
) => {
  const { testId, dangerous_className, size, color, label, block } = props;
  return (
    <Icon
      testId={testId}
      size={size}
      dangerous_className={dangerous_className}
      color={color}
      block={block}
      label={label || 'TemplateCreateIcon'}
      glyph={TemplateCreateIconGlyph}
    />
  );
};
