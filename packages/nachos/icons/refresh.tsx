// this component was automatically generated by IconGlyph.template.js
import React from 'react';
import { TestId } from '@trello/test-ids';

import { Icon, IconColor, IconSize } from '../src/components/Icon';

export interface GlyphProps {
  /**
   * A string that is applied as an aria attribute on the icon. Usually it
   * matches up with the display name of the icon
   * @default If no label is provided, it will fallback to the name of the icon
   */
  label?: string;
  /**
   * The color that the Icon should be rendered as.
   * @default @icon-default-color (#42526E)
   */
  color?: IconColor;
  /**
   * The size to render the Icon size.
   * @default "medium"
   */
  size?: IconSize;
  /**
   * A string that gets placed as a data attribute (data-test-id) onto the
   * Icon wrapper so that our
   * smoketest can properly target and test the component
   * @default undefined
   */
  testId?: TestId;
  // Escape hatches
  /**
   * ⚠️ DO NOT USE THIS PROP UNLESS YOU REALLY REALLY HAVE TO.
   *
   * Places a class name on the Icon (more specifically, the svg itself). This
   * is placed in addition to the classes already placed on the Icon. This is
   * placed directly onto the SVG via the glyph templates that are
   * generated by IconGlyph.template.js
   *
   * Please refrain from using this unless absolutely necessary.
   * @default undefined
   */
  dangerous_className?: string;
  /**
   * The switch for the icon to be centered in the dedicated space with padding around it.
   * Designed for cases when icon is not inline.
   */
  block?: boolean;
}

const RefreshIconGlyph = () => {
  return (
    <svg
      width="24"
      height="24"
      role="presentation"
      focusable="false"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M6.41147 14.6064C5.93123 14.8792 5.76301 15.4896 6.03574 15.9698C7.43928 18.4413 10.0483 20 12.9283 20C16.0259 20 18.799 18.1958 20.1021 15.4268C20.2136 15.1851 20.3641 14.7943 20.512 14.2831C20.9098 12.9079 21.0444 11.481 20.7475 10.1098C20.5471 9.18477 20.1545 8.33681 19.5479 7.59632C17.6868 5.32366 15.487 4 12.9283 4C10.0142 4 7.38651 5.59842 6 8.094V7.0003C6 6.44802 5.55228 6.0003 5 6.0003C4.44772 6.0003 4 6.44802 4 7.0003V10.9003C4 11.5047 4.48877 12.0003 5.099 12.0003H8.954C9.50628 12.0003 9.954 11.5526 9.954 11.0003C9.954 10.448 9.50628 10.0003 8.954 10.0003H7.32865C7.39632 9.80693 7.47457 9.61558 7.56276 9.42743C8.53951 7.35107 10.6143 6 12.9283 6C14.8015 6 16.4854 7.01323 18.0006 8.86357C18.3991 9.34999 18.6573 9.90771 18.7928 10.5332C19.0091 11.5322 18.9043 12.6434 18.5907 13.7274C18.473 14.1343 18.358 14.4332 18.2893 14.5821C17.3156 16.6511 15.2422 18 12.9283 18C10.7768 18 8.82724 16.8353 7.77486 14.9822C7.50213 14.5019 6.89172 14.3337 6.41147 14.6064Z"
        fill="currentColor"
      />
    </svg>
  );
};

export const RefreshIcon: React.FunctionComponent<GlyphProps> = (props) => {
  const { testId, dangerous_className, size, color, label, block } = props;
  return (
    <Icon
      testId={testId}
      size={size}
      dangerous_className={dangerous_className}
      color={color}
      block={block}
      label={label || 'RefreshIcon'}
      glyph={RefreshIconGlyph}
    />
  );
};
